{
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\link.d": {
		"origin": "module uim.filesystems.interfaces.link;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface ILink : IFilesystemEntry {\r  bool isLink();\r  bool isFileLink();\r  bool isFolderLink();\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.link",
		"name": "module uim.filesystems.s.link; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.link; import uim.filesystems; @safe: ILink : IFilesystemEntry bool isLink(); bool isFileLink(); bool isFolderLink(); }",
		"methods": {},
		"implements": [
			"ILink"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\tenantmanager.d": {
		"origin": "module uim.jsonbases.interfaces.tenantmanager;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonTenantManager {\r  // Tenants\r  bool hasTenants(string[] someNames...);\r  bool hasTenants(string[] someNames = null);\r  size_t countTenants(string[] someNames...);\r  size_t countTenants(string[] someNames = null);\r  string[] existingTenants(string[] someNames...);\r  string[] existingTenants(string[] someNames = null);\r  string[] tenantNames();\r  IJsonTenant[] tenants();\r\r  // Tenant\r  bool hasTenant(string aName);\r  IJsonTenant tenant(string aName);\r\r  // Add tenants\r  bool addTenants(IJsonTenant[] someTenants...);\r  bool addTenants(IJsonTenant[] someTenants);\r  bool addTenants(IJsonTenant[string] someTenants);\r\r  // Add tenant\r  bool addTenant(IJsonTenant aTenant);\r  bool addTenant(string aName, IJsonTenant aTenant);\r\r  // Create Tenants\r  IJsonTenant[] createTenants(string[] someNames...);\r  IJsonTenant[] createTenants(string[] someNames);\r\r  IJsonTenant createTenant(string aName);\r\r  // Delete\r  bool deleteTenant(string aName);\r}\r",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.jsonbases.interfaces.tenantmanager",
		"name": "module uim.jsonbases.s.tenantmanager; import uim.jsonbases; @safe",
		"header": "module uim.jsonbases.s.tenantmanager; import uim.jsonbases; @safe: IJsonTenantManager",
		"methods": {},
		"implements": [
			"IJsonTenantManager"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\foldermanager.d": {
		"origin": "module uim.filesystems.interfaces.foldermanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFolderManager {\r  IFolder folder(string aPath);\r  IFolder folder(string aPath, string aFolderName);\r  IFolder folder(string[] aPath);\r  IFolder folder(string[] aPath, string aFolderName);\r\r  // Returns a Folders collection consisting of all Folder objects contained in the specified folder, including those with hidden and system folder attributes set.\r  bool existsFolders(string aPath);\r  bool existsFolders(string aPath, string aFolderName);\r  bool existsFolders(string[] aPath);\r  bool existsFolders(string[] aPath, string aFolderName);\r\r  size_t countFolders(string aPath);\r  size_t countFolders(string aPath, string aFolderName);\r  size_t countFolders(string[] aPath);\r  size_t countFolders(string[] aPath, string aFolderName);\r\r  IFolder[] folders();\r  IFolder[] folders(string aPath);\r  IFolder[] folders(string aPath, string aFolderName);\r  IFolder[] folders(string[] aPath);\r  IFolder[] folders(string[] aPath, string aFolderName);\r\r  // Checks if a specified folder exists.\r  bool existsFolder(string aPath);\r  bool existsFolder(string aPath, string aFolderName);\r  bool existsFolder(string[] aPath);\r  bool existsFolder(string[] aPath, string aFolderName);\r\r  // Creates folder \r  IFolder createFolder(string aPath);\r  IFolder createFolder(string aPath, string aFolderName);\r  IFolder createFolder(string[] aPath);\r  IFolder createFolder(string[] aPath, string aFolderName);\r\r  // Creates folder if not exits\r  IFolder createIfNotExistsFolder(string aPath);\r  IFolder createIfNotExistsFolder(string aPath, string aFolderName);\r  IFolder createIfNotExistsFolder(string[] aPath);\r  IFolder createIfNotExistsFolder(string[] aPath, string aFolderName);\r\r  // Add folder from one location to another.\r  final bool addFolders(IFolder[] someFolders...) {\r    return addFolders(someFolders.dup);\r  }\r\r  final bool addFolders(IFolder[] someFolders) {\r    if (someFolders.isEmpty) {\r      return false;\r    }\r\r    foreach (myFolder; someFolders) {\r      if (!addFolder(myFolder)) {\r        return false;\r      }\r    }\r\r    return true;\r  }\r\r  bool addFolder(IFolder aFolder);\r\r  bool renameFolder(string oldPathAndName, string newName);\r  bool renameFolder(string aPath, string oldName, string newName);\r  bool renameFolder(string[] oldPathAndName, string newName);\r  bool renameFolder(string[] aPath, string oldName, string newName);\r\r  // Copies folder from one location to another.\r  bool copyFolder(string fromPath, string toPath);\r  bool copyFolder(string[] fromPath, string[] toPath);\r  bool copyFolder(IFolder aFolder, string[] toPath);\r  bool copyFolder(IFolder aFolder, IFolder toFolder);\r\r  // Moves folder from one location to another.\r  bool moveFolder(string fromPath, string toPath);\r  bool moveFolder(string[] fromPath, string[] toPath);\r  bool moveFolder(IFolder aFolder, string[] toPath);\r  bool moveFolder(IFolder aFolder, IFolder toFolder);\r\r  bool removeFolder(string aPath);\r  bool removeFolder(string aPath, string aFolderName);\r  bool removeFolder(string[] aPath);\r  bool removeFolder(string[] aPath, string aFolderName);\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.foldermanager",
		"name": "module uim.filesystems.s.foldermanager; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.foldermanager; import uim.filesystems; @safe: IFolderManager IFolder folder(string aPath); IFolder folder(string aPath, string aFolderName); IFolder folder(string[] aPath); IFolder folder(string[] aPath, string aFolderName);",
		"methods": {},
		"implements": [
			"IFolderManager IFolder folder(string aPath); IFolder folder(string aPath",
			"string aFolderName); IFolder folder(string[] aPath); IFolder folder(string[] aPath",
			"string aFolderName);"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\controllers\\uim\\controllers\\interfaces\\controller.d": {
		"origin": "interface IController {\r",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.controller",
		"name": "IController",
		"header": "IController",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\core\\uim\\core\\helpers\\classes.d": {
		"origin": "    interface ITest {\r",
		"package": "uim.core.helpers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.core.helpers.classes",
		"name": "ITest",
		"header": "ITest",
		"methods": {},
		"implements": [],
		"library": "uim-core"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\list.d": {
		"origin": "interface IList(T) {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.list",
		"name": "IList(T)",
		"header": "IList(T)",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\base.d": {
		"origin": "module uim.jsonbases.interfaces.base;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonBase : INamed {  \r} ",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.jsonbases.interfaces.base",
		"name": "module uim.jsonbases.s.base; import uim.jsonbases; @safe",
		"header": "module uim.jsonbases.s.base; import uim.jsonbases; @safe: IJsonBase : INamed }",
		"methods": {},
		"implements": [
			"IJsonBase"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\folder.d": {
		"origin": "module uim.filesystems.interfaces.folder;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager {\r  // Sets or returns the attributes of a specified folder.\r  long attributes();\r  void attributes(long newAttributes);\r\r  // Returns the date and time when a specified folder was created.\r  long createdOn();\r\r  // Returns the date and time when a specified folder was last accessed.\r  long accessedOn();\r\r  // Returns the date and time when a specified folder was last modified.\r  long modifiedOn();\r\r  // Returns the drive letter of the drive where the specified folder resides.\r  IDrive drive();\r\r  bool hasEntries();\r  bool isEmpty();\r\r  // Returns True if a folder is the root folder and False if not.\r  bool isRootFolder();\r  bool isFolder();\r\r  // Returns the type of a specified folder. */\r  string type();\r\r  // Deletes file.\r  bool remove();\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.folder",
		"name": "module uim.filesystems.s.folder; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.folder; import uim.filesystems; @safe: IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager",
		"methods": {},
		"implements": [
			"IFolder"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\entry.d": {
		"origin": "module uim.filesystems.interfaces.entry;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFilesystemEntry : INamed {\r  bool hasFilesystem();\r  IFilesystem filesystem();\r\r  // Sets or returns the path of a specified entry.\r  string[] path();\r  void path(string[] aPath);\r\r  // Returns the folder object for the parent of the specified file.\r  IFolder parentFolder();\r  void parentFolder(IFolder aFolder);\r\r  // Name of class\r\r  // Returns the size of a specified folder.\r  size_t size();\r\r  // Rename entry\r  bool rename(string newName);\r\r  // Check if filesystem exists\r   bool exists(); \r\r  // Check if filesystem entry is hidden\r  bool isHidden();\r\r  // Check if filesystem entry is folder\r  bool isFolder();\r\r  // Check if filesystem entry is file\r  bool isFile();\r\r  // Check if filesystem entry is link\r  bool isLink();\r\r  string relPath(string aPath); \r  string relPath(string[] aPath = null); \r\r  string absolutePath(string aPath); \r  string absolutePath(string[] aPath = null); \r\r  string toString();\r}",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.entry",
		"name": "module uim.filesystems.s.entry; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.entry; import uim.filesystems; @safe: IFilesystemEntry : INamed bool hasFilesystem(); IFilesystem filesystem();",
		"methods": {},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\tenant.d": {
		"origin": "module uim.jsonbases.interfaces.tenant;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonTenant : INamed {  \r  IJsonBase base();\r}",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.jsonbases.interfaces.tenant",
		"name": "module uim.jsonbases.s.tenant; import uim.jsonbases; @safe",
		"header": "module uim.jsonbases.s.tenant; import uim.jsonbases; @safe: IJsonTenant : INamed IJsonBase base(); }",
		"methods": {},
		"implements": [
			"IJsonTenant"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\parsers\\interfaces.d": {
		"origin": "interface IParser : INamed {\r",
		"package": "uim.oop.parsers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.parsers.interfaces",
		"name": "IParser",
		"header": "IParser : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\keyandpath.d": {
		"origin": "interface IKeyAndPath {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.keyandpath",
		"name": "IKeyAndPath",
		"header": "IKeyAndPath",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\containerapplication.d": {
		"origin": "interface IContainerApplication {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for applications that configure and use a dependency injection container."
		],
		"namespace": "uim.oop.interfaces.containerapplication",
		"name": "IContainerApplication",
		"header": "IContainerApplication",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\linkmanager.d": {
		"origin": "module uim.filesystems.interfaces.linkmanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface ILinkManager {\r  bool existsLinks(string aPath);\r  bool existsLinks(string[] aPath);\r\r  size_t countLinks(string aPath);\r  size_t countLinks(string[] aPath);\r\r  ILink[] links(string aPath);\r  ILink[] links(string[] aPath);\r\r  // Returns a Link object for a specified path.\r  ILink link(string aPath);\r  ILink link(string[] aPath);\r\r  bool existsLink(string aPath);\r  bool existsLink(string[] aPath);\r\r  bool addLink(ILink aLink);\r\r  // Copies link from one location to another.\r  bool copyLink(string fromPath, string toPath);\r  bool copyLink(string[] fromPath, string[] toPath);\r\r  // Moves one or more links from one location to another.\r  bool moveLink(string fromPath, string toPath);\r  bool moveLink(string[] fromPath, string[] toPath);\r\r  // Checks if a specified link exists.\r  final bool linksExists(ILink[] someLinks) {\r    if (someLinks.isEmpty) {\r      return false;\r    }\r\r    return someLinks.all!(link => link.exists);\r  }\r\r  // Deletes specified link.\r  bool removeLinks(string aPath);\r  bool removeLinks(string[] aPath);\r\r  // Deletes specified link.\r  ILink createLink(string aPath);\r  ILink createLink(string[] aPath);\r\r  // Deletes specified link.\r  bool removeLink(string aPath);\r  bool removeLink(string[] aPath);\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.linkmanager",
		"name": "module uim.filesystems.s.linkmanager; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.linkmanager; import uim.filesystems; @safe: ILinkManager bool existsLinks(string aPath); bool existsLinks(string[] aPath); size_t countLinks(string aPath); size_t countLinks(string[] aPath); ILink[] links(string aPath); ILink[] links(string[] aPath);",
		"methods": {},
		"implements": [
			"ILinkManager bool existsLinks(string aPath); bool existsLinks(string[] aPath); size_t countLinks(string aPath); size_t countLinks(string[] aPath); ILink[] links(string aPath); ILink[] links(string[] aPath);"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\collection.d": {
		"origin": "interface ICollection(T) : IKeyAndPath {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.collection",
		"name": "ICollection(T)",
		"header": "ICollection(T) : IKeyAndPath",
		"methods": {},
		"implements": [
			"IKeyAndPath"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\comparable.d": {
		"origin": "interface IComparable(T) {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."
		],
		"namespace": "uim.oop.interfaces.comparable",
		"name": "IComparable(T)",
		"header": "IComparable(T)",
		"methods": {
			"int compareTo(T compareValue)": {
				"origin": "int compareTo(T compareValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T compareValue"
				],
				"datatype": "int",
				"name": "compareTo",
				"header": "int compareTo(T compareValue)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\appendable.d": {
		"origin": "interface IAppendable {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An object to which char sequences and values can be appended."
		],
		"namespace": "uim.oop.interfaces.appendable",
		"name": "IAppendable",
		"header": "IAppendable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\closure.d": {
		"origin": "interface IClosure {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.closure",
		"name": "IClosure",
		"header": "IClosure",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\css\\uim\\css\\interfaces\\css.d": {
		"origin": "module uim.css.interfaces.css;\r\rimport uim.css;\r\r@safe:\r\rinterface ICss {\r    \r}",
		"package": "uim.css.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.css.interfaces.css",
		"name": "module uim.css.s.css; import uim.css; @safe",
		"header": "module uim.css.s.css; import uim.css; @safe: ICss }",
		"methods": {},
		"implements": [
			"ICss }"
		],
		"library": "uim-css"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\models\\uim\\models\\interfaces\\attribute.d": {
		"origin": "interface IAttribute : INamed {\r",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.attribute",
		"name": "IAttribute",
		"header": "IAttribute : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-models"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\enumeration.d": {
		"origin": "interface IEnumeration {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.enumeration",
		"name": "IEnumeration",
		"header": "IEnumeration",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\file.d": {
		"origin": "module uim.filesystems.interfaces.file;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFile : IFilesystemEntry {\r  // #region Properties\r  // Sets or returns the attributes of a specified file.\r  bool isFile();\r\r  size_t attributes();\r  void attributes(size_t newAttributes);\r\r  // Returns the date and time when a specified file was created.\r  long createdOn();\r\r  // Returns the date and time when a specified file was last accessed.\r  long accessedOn();\r\r  // Returns the date and time when a specified file was last modified.\r  long modifiedOn();\r\r  // Returns the drive letter of the drive where a specified file or folder resides.\r  string driveName();\r\r  // Returns the type of a specified file.\r  string type();\r  // #endregion Properties\r\r  // #region Methods\r  void writeContent(const void[] content);\r  void[] readContent(size_t contentSize = size_t.max);\r  void appendContent(const void[] content);\r\r  string readText();\r  void writeText(string aText);\r  void appendText(string aText);\r\r  string[] readLines();\r\r  Json readJson();\r  bool writeJson(Json jsonData);\r\r  // Copies a specified file from one location to another.\r  bool copy(string toPath);\r  bool copy(string[] toPath);\r  bool copy(IFolder toFolder);\r\r  // Moves file from one location to another.\r  bool move(string toPath);\r  bool move(string[] toPath);\r  bool move(IFolder toFolder);\r\r  // Deletes file.\r  bool remove();\r\r  // TODO: OpenAsTextStream   Opens a specified file and returns a TextStream object to access the file.\r  // #endregion Methods\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.file",
		"name": "module uim.filesystems.s.file; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.file; import uim.filesystems; @safe: IFile : IFilesystemEntry",
		"methods": {},
		"implements": [
			"IFile"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\services\\uim\\services\\interfaces\\service.d": {
		"origin": "interface IServices {}",
		"package": "uim.services.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.services.interfaces.service",
		"name": "IServices",
		"header": "IServices",
		"methods": {},
		"implements": [],
		"library": "uim-services"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\fixturestrategy.d": {
		"origin": "interface IFixtureStrategy {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Base interface for strategies used to manage fixtures for TestCase."
		],
		"namespace": "uim.oop.interfaces.fixturestrategy",
		"name": "IFixtureStrategy",
		"header": "IFixtureStrategy",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\validators\\interfaces.d": {
		"origin": "interface IValidator : INamed {\r",
		"package": "uim.oop.validators",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.validators.interfaces",
		"name": "IValidator",
		"header": "IValidator : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\configengine.d": {
		"origin": "interface IConfigEngine {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for creating objects compatible with Configure.load()"
		],
		"namespace": "uim.oop.interfaces.configengine",
		"name": "IConfigEngine",
		"header": "IConfigEngine",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\runnable.d": {
		"origin": "interface IRunnable {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.runnable",
		"name": "IRunnable",
		"header": "IRunnable",
		"methods": {
			"O run(this O)()": {
				"origin": "O run(this O)()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)()",
				"isStatic": false
			},
			"O run(this O)(Json data)": {
				"origin": "O run(this O)(Json data)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)(Json data)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\exception.d": {
		"origin": "interface IException {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.exception",
		"name": "IException",
		"header": "IException",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\stringable.d": {
		"origin": "interface IStringable {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.stringable",
		"name": "IStringable",
		"header": "IStringable",
		"methods": {
			"string toString()": {
				"origin": "string toString()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toString",
				"header": "string toString()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\formatters\\interfaces.d": {
		"origin": "interface IFormatter : INamed {\r",
		"package": "uim.oop.formatters",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.formatters.interfaces",
		"name": "IFormatter",
		"header": "IFormatter : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\filemanager.d": {
		"origin": "module uim.filesystems.interfaces.filemanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFileManager {\r  bool hasFiles(string aPathOrName);\r  bool hasFiles(string aPath, string aFileName);\r  bool hasFiles(string[] aPath);\r  bool hasFiles(string[] aPath, string aFileName);\r\r  size_t countFiles(string aPathOrName);\r  size_t countFiles(string aPath, string aFileName);\r  size_t countFiles(string[] aPath);\r  size_t countFiles(string[] aPath, string aFileName);\r\r  IFile[] files();\r  IFile[] files(string aPathOrName);\r  IFile[] files(string aPath, string aFileName);\r  IFile[] files(string[] aPath);\r  IFile[] files(string[] aPath, string aFileName);\r\r  // Returns a File object for a specified path.\r  IFile file(string aPathOrName);\r  IFile file(string aPath, string aFileName);\r  IFile file(string[] aPath);\r  IFile file(string[] aPath, string aFileName);\r\r  bool existsFile(string aPathOrName);\r  bool existsFile(string aPath, string aFileName);\r  bool existsFile(string[] aPath);\r  bool existsFile(string[] aPath, string aFileName);\r\r  bool addFile(IFile aFile);\r\r  IFile createFile(string aPathOrName);\r  IFile createFile(string aPath, string aFileName);\r  IFile createFile(string[] aPath);\r  IFile createFile(string[] aPath, string aFileName);\r\r  bool renameFile(string oldPathAndName, string newName);\r  bool renameFile(string aPath, string oldName, string newName);\r  bool renameFile(string[] oldPathAndName, string newName);\r  bool renameFile(string[] aPath, string oldName, string newName);\r\r  // Copies file from one location to another.\r  bool copyFile(string fromPath, string toPath);\r  bool copyFile(string[] fromPath, string[] toPath);\r\r  // Moves one or more files from one location to another.\r  bool moveFile(string fromPath, string toPath);\r  bool moveFile(string[] fromPath, string[] toPath);\r\r  // Checks if a specified file exists. False, ifsomeFiles is empty\r  final bool filesExists(IFile[] files) {\r    if (files.isEmpty) { return false; }\r\r    return files.all!(file => file.exists);\r  }\r\r  bool removeFile(string aPath);\r  bool removeFile(string aPath, string aFolderName);\r  bool removeFile(string[] aPath);\r  bool removeFile(string[] aPath, string aFolderName);\r}",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.filemanager",
		"name": "module uim.filesystems.s.filemanager; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.filemanager; import uim.filesystems; @safe: IFileManager bool hasFiles(string aPathOrName); bool hasFiles(string aPath, string aFileName); bool hasFiles(string[] aPath); bool hasFiles(string[] aPath, string aFileName); size_t countFiles(string aPathOrName); size_t countFiles(string aPath, string aFileName); size_t countFiles(string[] aPath); size_t countFiles(string[] aPath, string aFileName); IFile[] files(); IFile[] files(string aPathOrName); IFile[] files(string aPath, string aFileName); IFile[] files(string[] aPath); IFile[] files(string[] aPath, string aFileName);",
		"methods": {},
		"implements": [
			"IFileManager bool hasFiles(string aPathOrName); bool hasFiles(string aPath",
			"string aFileName); bool hasFiles(string[] aPath); bool hasFiles(string[] aPath",
			"string aFileName); size_t countFiles(string aPathOrName); size_t countFiles(string aPath",
			"string aFileName); size_t countFiles(string[] aPath); size_t countFiles(string[] aPath",
			"string aFileName); IFile[] files(); IFile[] files(string aPathOrName); IFile[] files(string aPath",
			"string aFileName); IFile[] files(string[] aPath); IFile[] files(string[] aPath",
			"string aFileName);"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\commands\\interfaces.d": {
		"origin": "interface ICommand : INamed {\r",
		"package": "uim.oop.commands",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.commands.interfaces",
		"name": "ICommand",
		"header": "ICommand : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\apps\\uim\\apps\\interfaces\\application.d": {
		"origin": "interface IApplication : INamed {\r",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.application",
		"name": "IApplication",
		"header": "IApplication : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-apps"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\configurable.d": {
		"origin": "interface IConfigurable {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.configurable",
		"name": "IConfigurable",
		"header": "IConfigurable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\cloneable.d": {
		"origin": "interface ICloneable {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.cloneable",
		"name": "ICloneable",
		"header": "ICloneable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\container.d": {
		"origin": "interface IContainer { // TODO: IDefinitionContainer {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for the Dependency Injection Container in UIM applications",
			"",
			"This interface : the PSR-11 container interface and adds",
			"methods to add services and service providers to the container.",
			"",
			"The methods defined in this interface use the conventions provided",
			"by league/container as that is the library that UIM uses.",
			""
		],
		"namespace": "uim.oop.interfaces.container",
		"name": "IContainer",
		"header": "IContainer",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\collection.d": {
		"origin": "module uim.jsonbases.interfaces.collection;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonCollection : INamed {  \r  // #region READ\r    // #region findMany()\r      Json[] findMany(bool allVersions = false);\r      Json[] findMany(UUID[] ids, bool allVersions = false);\r      Json[] findMany(UUID id, bool allVersions = false);\r      Json[] findMany(UUID[] ids, size_t versionNumber);\r\r      Json[] findMany(string[string][] selects, bool allVersions = false);\r      Json[] findMany(string[string] select, bool allVersions = false);\r      Json[] findMany(Json[] selects, bool allVersions = false);\r      Json[] findMany(Json select, bool allVersions = false);\r    // #endregion findMany() \r\r    // #region findOne()\r      Json findOne(UUID[] ids, bool allVersions = false);\r      Json findOne(UUID id, bool allVersions = false);\r      Json findOne(UUID[] ids, size_t versionNumber);\r      Json findOne(UUID id, size_t versionNumber);\r\r      Json findOne(string[string][] selects, bool allVersions = false);\r      Json findOne(string[string] select, bool allVersions = false);\r      Json findOne(Json[] selects, bool allVersions = false);\r      Json findOne(Json select, bool allVersions = false);\r    // #endregion findOne()\r  // #endregion READ                            \r\r  // #region UPDATE\r    // #region updateMany()\r      size_t updateMany(string[string] select, string[string] updateData);\r      size_t updateMany(string[string] select, Json updateData);\r      \r      size_t updateMany(Json select, string[string] updateData);\r      size_t updateMany(Json select, Json updateData);\r    // #endregion updateMany()\r\r    // #region updateOne()\r      bool updateOne(string[string] select, string[string] updateData);\r      bool updateOne(string[string] select, Json updateData);\r      bool updateOne(Json select, string[string] updateData);\r      abstract bool updateOne(Json select, Json updateData);\r    // #endregion updateOne()\r  // #endregion UPDATE                                                                 \r}                                                                                                                                                                                                               ",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.jsonbases.interfaces.collection",
		"name": "module uim.jsonbases.s.collection; import uim.jsonbases; @safe",
		"header": "module uim.jsonbases.s.collection; import uim.jsonbases; @safe: IJsonCollection : INamed",
		"methods": {},
		"implements": [
			"IJsonCollection"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\retrystrategy.d": {
		"origin": "interface IRetryStrategy {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Used to instruct a CommandRetry object on whether a retry",
			"for an action should be performed",
			""
		],
		"namespace": "uim.oop.interfaces.retrystrategy",
		"name": "IRetryStrategy",
		"header": "IRetryStrategy",
		"methods": {
			"bool shouldRetry(UIMException failException, int retryCount)": {
				"origin": "bool shouldRetry(UIMException failException, int retryCount)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"UIMException failException",
					"int retryCount"
				],
				"datatype": "bool",
				"name": "shouldRetry",
				"header": "bool shouldRetry(UIMException failException, int retryCount)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\httpapplication.d": {
		"origin": "interface IHttpApplication /* : IRequestHandler */ {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the http server depend on."
		],
		"namespace": "uim.oop.interfaces.httpapplication",
		"name": "IHttpApplication /*",
		"header": "IHttpApplication /* : IRequestHandler */",
		"methods": {
			"void bootstrap()": {
				"origin": "void bootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IRequestHandler */"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\map.d": {
		"origin": "interface IMap {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.map",
		"name": "IMap",
		"header": "IMap",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\consoleapplication.d": {
		"origin": "interface IConsoleApplication {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the console runner depend on."
		],
		"namespace": "uim.oop.interfaces.consoleapplication",
		"name": "IConsoleApplication",
		"header": "IConsoleApplication",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\pluginapplication.d": {
		"origin": "interface IPluginApplication /* : IEventDispatcher */ { // TODO",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for Applications that leverage plugins & events.",
			"",
			"Events can be bound to the application event manager during",
			"the application`s bootstrap and plugin bootstrap.",
			""
		],
		"namespace": "uim.oop.interfaces.pluginapplication",
		"name": "IPluginApplication /*",
		"header": "IPluginApplication /* : IEventDispatcher */",
		"methods": {
			"void addPlugin(string pluginName, Json Data = null)": {
				"origin": "void addPlugin(string pluginName, Json Data = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string pluginName",
					"Json Data = null"
				],
				"datatype": "void",
				"name": "addPlugin",
				"header": "void addPlugin(string pluginName, Json Data = null)",
				"isStatic": false
			},
			"void pluginBootstrap()": {
				"origin": "void pluginBootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "pluginBootstrap",
				"header": "void pluginBootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IEventDispatcher */"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\entitybases\\uim\\entitybases\\interfaces\\base.d": {
		"origin": "module uim.entitybases.interfaces.base;\r\rimport uim.entitybases;\r\r@safe:\r\rinterface IEntityBase {\r}\r",
		"package": "uim.entitybases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.entitybases.interfaces.base",
		"name": "module uim.entitybases.s.base; import uim.entitybases; @safe",
		"header": "module uim.entitybases.s.base; import uim.entitybases; @safe: IEntityBase }",
		"methods": {},
		"implements": [
			"IEntityBase }"
		],
		"library": "uim-entitybases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\filesystem.d": {
		"origin": "module uim.filesystems.interfaces.filesystem;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFilesystem : IFolderManager, IFileManager, ILinkManager {\r  // #region Properties\r  // Returns rootPath of filesystem\r  string rootPath();\r\r  // Sets or returns the path of the filesystem\r  string[] path();\r  void path(string[] path);\r\r  // Returns information about type of filsystem\r  string type();\r\r  // Returns the size, in bytes, of the filesystem\r  size_t size();\r\r  // Returns the size, in bytes, of the filesystem\r  size_t capacity();\r\r  IFolder rootFolder();\r  IFilesystem filesystem();\r  string pathSeparator();\r  size_t availableDiskSpace();\r\r  bool isHidden(string aPath);\r  bool isHidden(string aPath, string aFolderName);\r  bool isHidden(string[] aPath);\r  bool isHidden(string[] aPath, string aFolderName);\r\r  string relPath(string aPath);\r  string relPath(string[] aPath);\r\r  string absolutePath(string aPath);\r  string absolutePath(string[] aPath);\r  // #endregion Properties\r\r  bool isFolder(string aPath);\r  bool isFolder(string aPath, string aFolderName);\r  bool isFolder(string[] aPath);\r  bool isFolder(string[] aPath, string aFolderName);\r\r  // Check if entry is file\r  bool isFile(string aPath);\r  bool isFile(string aPath, string aFolderName);\r  bool isFile(string[] aPath);\r  bool isFile(string[] aPath, string aFolderName);\r\r  void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max);\r\r  void writeToFile(string[] aPath, string aFileName, const void[] buffer);\r\r  void appendToFile(string[] aPath, string aFileName, const void[] buffer);\r\r  string readTextFromFile(string[] aPath, string aFileName);\r\r  void writeTextToFile(string[] aPath, string aFileName, string aText);\r\r  void appendTextToFile(string[] aPath, string aFileName, string aText);\r\r  string[] readLines(string[] aPath, string aFileName);\r\r  // Check if entry is link\r  bool isLink(string aPath);\r  bool isLink(string aPath, string aFolderName);\r  bool isLink(string[] aPath);\r  bool isLink(string[] aPath, string aFolderName);\r}\r",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.filesystem",
		"name": "module uim.filesystems.s.filesystem; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.filesystem; import uim.filesystems; @safe: IFilesystem : IFolderManager, IFileManager, ILinkManager",
		"methods": {},
		"implements": [
			"IFilesystem"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\drive.d": {
		"origin": "module uim.filesystems.interfaces.drive;\r\rimport uim.filesystems;\r\r@safe:\rinterface IDrive : IFilesystemEntry {\r}",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.filesystems.interfaces.drive",
		"name": "module uim.filesystems.s.drive; import uim.filesystems; @safe",
		"header": "module uim.filesystems.s.drive; import uim.filesystems; @safe: IDrive : IFilesystemEntry }",
		"methods": {},
		"implements": [
			"IDrive"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\models\\uim\\models\\interfaces\\model.d": {
		"origin": "interface IModel : INamed {\r",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.model",
		"name": "IModel",
		"header": "IModel : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-models"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\iterable.d": {
		"origin": "interface IIterable(T) {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.iterable",
		"name": "IIterable(T)",
		"header": "IIterable(T)",
		"methods": {
			"void forEach(void function(T)forEachFunc)": {
				"origin": "void forEach(void function(T)forEachFunc)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"void function"
				],
				"datatype": "void",
				"name": "forEach",
				"header": "void forEach(void function(T)forEachFunc)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\configurations\\interfaces.d": {
		"origin": "interface IConfiguration : INamed {",
		"package": "uim.oop.configurations",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.configurations.interfaces",
		"name": "IConfiguration",
		"header": "IConfiguration : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\collectionmanager.d": {
		"origin": "module uim.jsonbases.interfaces.collectionmanager;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonCollectionManager {  \r  // Collections\r  bool hasCollections(string[] someNames...); \r  bool hasCollections(string[] someNames = null); \r  size_t countCollections(string[] someNames...); \r  size_t countCollections(string[] someNames = null); \r  string[] existingCollections(string[] someNames...); \r  string[] existingCollections(string[] someNames = null); \r  string[] collectionNames(); \r  IJsonCollection[] collections(); \r\r  // Collection\r  bool hasCollection(string aName); \r  IJsonCollection collection(string aName); \r\r  // Add collections\r  bool addCollections(IJsonCollection[] someCollections...); \r  bool addCollections(IJsonCollection[] someCollections); \r  bool addCollections(IJsonCollection[string] someCollections); \r\r  // Add collection\r  bool addCollection(IJsonCollection aCollection); \r  bool addCollection(string aName, IJsonCollection aCollection); \r\r  // Create Collections\r  IJsonCollection[] createCollections(string[] someNames...); \r  IJsonCollection[] createCollections(string[] someNames); \r\r  IJsonCollection createCollection(string aName); \r\r  // Delete\r  bool deleteCollections(string[] someNames...); \r  bool deleteCollections(string[] someNames);\r\r  bool deleteCollection(string aName); \r}",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [
			"/****************************************************************************************************************",
			"Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur) *",
			"License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *",
			"Authors: Ozan Nurettin Süel (aka UIManufaktur) *",
			"*****************************************************************************************************************/"
		],
		"namespace": "uim.jsonbases.interfaces.collectionmanager",
		"name": "module uim.jsonbases.s.collectionmanager; import uim.jsonbases; @safe",
		"header": "module uim.jsonbases.s.collectionmanager; import uim.jsonbases; @safe: IJsonCollectionManager",
		"methods": {},
		"implements": [
			"IJsonCollectionManager"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\errors\\interfaces.d": {
		"origin": "interface IError {\r",
		"package": "uim.oop.errors",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.errors.interfaces",
		"name": "IError",
		"header": "IError",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\named.d": {
		"origin": "interface INamed {\r",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.named",
		"name": "INamed",
		"header": "INamed",
		"methods": {
			"void name(string newName)": {
				"origin": "void name(string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string newName"
				],
				"datatype": "void",
				"name": "name",
				"header": "void name(string newName)",
				"isStatic": false
			},
			"string name()": {
				"origin": "string name()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "name",
				"header": "string name()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	}
}
