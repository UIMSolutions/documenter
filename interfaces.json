{
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\named.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.named",
		"name": "interface INamed {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IFixtureStrategy": {
		"origin": "interface IFixtureStrategy {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Base interface for strategies used to manage fixtures for TestCase."
		],
		"namespace": "uim.oop.interfaces.fixturestrategy",
		"name": "IFixtureStrategy",
		"header": "IFixtureStrategy",
		"methods": {
			"void teardownTest() */": {
				"origin": "void teardownTest() */",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					") */"
				],
				"datatype": "void",
				"name": "teardownTest",
				"header": "void teardownTest() */",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\link.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.link",
		"name": "module uim.filesystems.interfaces.link;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface ILink : IFilesystemEntry {\r  bool isLink();\r  bool isFileLink();\r  bool isFolderLink();\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"IFilesystemEntry": {
		"origin": "interface IFilesystemEntry : INamed {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.entry",
		"name": "IFilesystemEntry",
		"header": "IFilesystemEntry : INamed",
		"methods": {
			"string absolutePath(string aPath)": {
				"origin": "string absolutePath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string aPath)",
				"isStatic": false
			},
			"bool hasFilesystem()": {
				"origin": "bool hasFilesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "hasFilesystem",
				"header": "bool hasFilesystem()",
				"isStatic": false
			},
			"string[] path()": {
				"origin": "string[] path()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "path",
				"header": "string[] path()",
				"isStatic": false
			},
			"bool isFile()": {
				"origin": "bool isFile()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile()",
				"isStatic": false
			},
			"bool isLink()": {
				"origin": "bool isLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink()",
				"isStatic": false
			},
			"IFolder parentFolder()": {
				"origin": "IFolder parentFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder",
				"name": "parentFolder",
				"header": "IFolder parentFolder()",
				"isStatic": false
			},
			"IFilesystem filesystem()": {
				"origin": "IFilesystem filesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFilesystem",
				"name": "filesystem",
				"header": "IFilesystem filesystem()",
				"isStatic": false
			},
			"void path(string[] aPath)": {
				"origin": "void path(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "void",
				"name": "path",
				"header": "void path(string[] aPath)",
				"isStatic": false
			},
			"void parentFolder(IFolder aFolder)": {
				"origin": "void parentFolder(IFolder aFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder"
				],
				"datatype": "void",
				"name": "parentFolder",
				"header": "void parentFolder(IFolder aFolder)",
				"isStatic": false
			},
			"size_t size()": {
				"origin": "size_t size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"string toString()": {
				"origin": "string toString()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toString",
				"header": "string toString()",
				"isStatic": false
			},
			"bool rename(string newName)": {
				"origin": "bool rename(string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string newName"
				],
				"datatype": "bool",
				"name": "rename",
				"header": "bool rename(string newName)",
				"isStatic": false
			},
			"string relPath(string[] aPath = null)": {
				"origin": "string relPath(string[] aPath = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath = null"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string[] aPath = null)",
				"isStatic": false
			},
			"bool isHidden()": {
				"origin": "bool isHidden()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden()",
				"isStatic": false
			},
			"string relPath(string aPath)": {
				"origin": "string relPath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string aPath)",
				"isStatic": false
			},
			"string absolutePath(string[] aPath = null)": {
				"origin": "string absolutePath(string[] aPath = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath = null"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string[] aPath = null)",
				"isStatic": false
			},
			"bool isFolder()": {
				"origin": "bool isFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\foldermanager.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.foldermanager",
		"name": "module uim.filesystems.interfaces.foldermanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFolderManager {\r  IFolder folder(string aPath);\r  IFolder folder(string aPath, string aFolderName);\r  IFolder folder(string[] aPath);\r  IFolder folder(string[] aPath, string aFolderName);\r\r  // Returns a Folders collection consisting of all Folder objects contained in the specified folder, including those with hidden and system folder attributes set.\r  bool existsFolders(string aPath);\r  bool existsFolders(string aPath, string aFolderName);\r  bool existsFolders(string[] aPath);\r  bool existsFolders(string[] aPath, string aFolderName);\r\r  size_t countFolders(string aPath);\r  size_t countFolders(string aPath, string aFolderName);\r  size_t countFolders(string[] aPath);\r  size_t countFolders(string[] aPath, string aFolderName);\r\r  IFolder[] folders();\r  IFolder[] folders(string aPath);\r  IFolder[] folders(string aPath, string aFolderName);\r  IFolder[] folders(string[] aPath);\r  IFolder[] folders(string[] aPath, string aFolderName);\r\r  // Checks if a specified folder exists.\r  bool existsFolder(string aPath);\r  bool existsFolder(string aPath, string aFolderName);\r  bool existsFolder(string[] aPath);\r  bool existsFolder(string[] aPath, string aFolderName);\r\r  // Creates folder \r  IFolder createFolder(string aPath);\r  IFolder createFolder(string aPath, string aFolderName);\r  IFolder createFolder(string[] aPath);\r  IFolder createFolder(string[] aPath, string aFolderName);\r\r  // Creates folder if not exits\r  IFolder createIfNotExistsFolder(string aPath);\r  IFolder createIfNotExistsFolder(string aPath, string aFolderName);\r  IFolder createIfNotExistsFolder(string[] aPath);\r  IFolder createIfNotExistsFolder(string[] aPath, string aFolderName);\r\r  // Add folder from one location to another.\r  final bool addFolders(IFolder[] someFolders...) {\r    return addFolders(someFolders.dup);\r  }\r\r  final bool addFolders(IFolder[] someFolders) {\r    if (someFolders.isEmpty) {\r      return false;\r    }\r\r    foreach (myFolder; someFolders) {\r      if (!addFolder(myFolder)) {\r        return false;\r      }\r    }\r\r    return true;\r  }\r\r  bool addFolder(IFolder aFolder);\r\r  bool renameFolder(string oldPathAndName, string newName);\r  bool renameFolder(string aPath, string oldName, string newName);\r  bool renameFolder(string[] oldPathAndName, string newName);\r  bool renameFolder(string[] aPath, string oldName, string newName);\r\r  // Copies folder from one location to another.\r  bool copyFolder(string fromPath, string toPath);\r  bool copyFolder(string[] fromPath, string[] toPath);\r  bool copyFolder(IFolder aFolder, string[] toPath);\r  bool copyFolder(IFolder aFolder, IFolder toFolder);\r\r  // Moves folder from one location to another.\r  bool moveFolder(string fromPath, string toPath);\r  bool moveFolder(string[] fromPath, string[] toPath);\r  bool moveFolder(IFolder aFolder, string[] toPath);\r  bool moveFolder(IFolder aFolder, IFolder toFolder);\r\r  bool removeFolder(string aPath);\r  bool removeFolder(string aPath, string aFolderName);\r  bool removeFolder(string[] aPath);\r  bool removeFolder(string[] aPath, string aFolderName);\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\retrystrategy.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.retrystrategy",
		"name": "interface IRetryStrategy {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\tenantmanager.d": {
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenantmanager",
		"name": "module uim.jsonbases.interfaces.tenantmanager;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonTenantManager {\r  // Tenants\r  bool hasTenants(string[] someNames...);\r  bool hasTenants(string[] someNames = null);\r  size_t countTenants(string[] someNames...);\r  size_t countTenants(string[] someNames = null);\r  string[] existingTenants(string[] someNames...);\r  string[] existingTenants(string[] someNames = null);\r  string[] tenantNames();\r  IJsonTenant[] tenants();\r\r  // Tenant\r  bool hasTenant(string aName);\r  IJsonTenant tenant(string aName);\r\r  // Add tenants\r  bool addTenants(IJsonTenant[] someTenants...);\r  bool addTenants(IJsonTenant[] someTenants);\r  bool addTenants(IJsonTenant[string] someTenants);\r\r  // Add tenant\r  bool addTenant(IJsonTenant aTenant);\r  bool addTenant(string aName, IJsonTenant aTenant);\r\r  // Create Tenants\r  IJsonTenant[] createTenants(string[] someNames...);\r  IJsonTenant[] createTenants(string[] someNames);\r\r  IJsonTenant createTenant(string aName);\r\r  // Delete\r  bool deleteTenant(string aName);\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"ICommand": {
		"origin": "interface ICommand : INamed {",
		"package": "uim.oop.commands",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.commands.interfaces",
		"name": "ICommand",
		"header": "ICommand : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IFolderManager": {
		"origin": "interface IFolderManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.foldermanager",
		"name": "IFolderManager",
		"header": "IFolderManager",
		"methods": {
			"final bool addFolders(IFolder[] someFolders...) {": {
				"origin": "final bool addFolders(IFolder[] someFolders...) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFolder[] someFolders..."
				],
				"datatype": "final",
				"name": "bool addFolders",
				"header": "final bool addFolders(IFolder[] someFolders...)",
				"isStatic": false
			},
			"bool removeFolder(string aPath)": {
				"origin": "bool removeFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string aPath)",
				"isStatic": false
			},
			"bool removeFolder(string[] aPath, string aFolderName)": {
				"origin": "bool removeFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders(string[] aPath)": {
				"origin": "IFolder[] folders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string[] aPath)",
				"isStatic": false
			},
			"bool removeFolder(string aPath, string aFolderName)": {
				"origin": "bool removeFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool renameFolder(string[] oldPathAndName, string newName)": {
				"origin": "bool renameFolder(string[] oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string[] oldPathAndName, string newName)",
				"isStatic": false
			},
			"size_t countFolders(string[] aPath)": {
				"origin": "size_t countFolders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string[] aPath)",
				"isStatic": false
			},
			"size_t countFolders(string[] aPath, string aFolderName)": {
				"origin": "size_t countFolders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool copyFolder(string fromPath, string toPath)": {
				"origin": "bool copyFolder(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFolder folder(string[] aPath)": {
				"origin": "IFolder folder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string[] aPath)",
				"isStatic": false
			},
			"bool copyFolder(string[] fromPath, string[] toPath)": {
				"origin": "bool copyFolder(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool existsFolder(string aPath, string aFolderName)": {
				"origin": "bool existsFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder folder(string aPath, string aFolderName)": {
				"origin": "IFolder folder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders()": {
				"origin": "IFolder[] folders()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders()",
				"isStatic": false
			},
			"size_t countFolders(string aPath, string aFolderName)": {
				"origin": "size_t countFolders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolders(string aPath)": {
				"origin": "bool existsFolders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string aPath)",
				"isStatic": false
			},
			"IFolder folder(string aPath)": {
				"origin": "IFolder folder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string aPath)",
				"isStatic": false
			},
			"bool existsFolder(string[] aPath)": {
				"origin": "bool existsFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string[] aPath)",
				"isStatic": false
			},
			"bool existsFolders(string[] aPath, string aFolderName)": {
				"origin": "bool existsFolders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders(string aPath, string aFolderName)": {
				"origin": "IFolder[] folders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolder(string[] aPath, string aFolderName)": {
				"origin": "bool existsFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool copyFolder(IFolder aFolder, string[] toPath)": {
				"origin": "bool copyFolder(IFolder aFolder, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(IFolder aFolder, string[] toPath)",
				"isStatic": false
			},
			"IFolder createFolder(string aPath, string aFolderName)": {
				"origin": "IFolder createFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"final bool addFolders(IFolder[] someFolders) {": {
				"origin": "final bool addFolders(IFolder[] someFolders) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFolder[] someFolders"
				],
				"datatype": "final",
				"name": "bool addFolders",
				"header": "final bool addFolders(IFolder[] someFolders)",
				"isStatic": false
			},
			"bool renameFolder(string[] aPath, string oldName, string newName)": {
				"origin": "bool renameFolder(string[] aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string[] aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool addFolder(IFolder aFolder)": {
				"origin": "bool addFolder(IFolder aFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder"
				],
				"datatype": "bool",
				"name": "addFolder",
				"header": "bool addFolder(IFolder aFolder)",
				"isStatic": false
			},
			"bool moveFolder(IFolder aFolder, IFolder toFolder)": {
				"origin": "bool moveFolder(IFolder aFolder, IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(IFolder aFolder, IFolder toFolder)",
				"isStatic": false
			},
			"IFolder[] folders(string aPath)": {
				"origin": "IFolder[] folders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string aPath)",
				"isStatic": false
			},
			"bool existsFolders(string[] aPath)": {
				"origin": "bool existsFolders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string[] aPath)",
				"isStatic": false
			},
			"size_t countFolders(string aPath)": {
				"origin": "size_t countFolders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string aPath)",
				"isStatic": false
			},
			"bool moveFolder(string[] fromPath, string[] toPath)": {
				"origin": "bool moveFolder(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool renameFolder(string aPath, string oldName, string newName)": {
				"origin": "bool renameFolder(string aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool renameFolder(string oldPathAndName, string newName)": {
				"origin": "bool renameFolder(string oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string oldPathAndName, string newName)",
				"isStatic": false
			},
			"bool removeFolder(string[] aPath)": {
				"origin": "bool removeFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string[] aPath)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string aPath, string aFolderName)": {
				"origin": "IFolder createIfNotExistsFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createFolder(string[] aPath)": {
				"origin": "IFolder createFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string[] aPath)",
				"isStatic": false
			},
			"IFolder createFolder(string[] aPath, string aFolderName)": {
				"origin": "IFolder createFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolders(string aPath, string aFolderName)": {
				"origin": "bool existsFolders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolder(string aPath)": {
				"origin": "bool existsFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string aPath)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)": {
				"origin": "IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string[] aPath)": {
				"origin": "IFolder createIfNotExistsFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string[] aPath)",
				"isStatic": false
			},
			"bool moveFolder(string fromPath, string toPath)": {
				"origin": "bool moveFolder(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFolder[] folders(string[] aPath, string aFolderName)": {
				"origin": "IFolder[] folders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool moveFolder(IFolder aFolder, string[] toPath)": {
				"origin": "bool moveFolder(IFolder aFolder, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(IFolder aFolder, string[] toPath)",
				"isStatic": false
			},
			"IFolder folder(string[] aPath, string aFolderName)": {
				"origin": "IFolder folder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string aPath)": {
				"origin": "IFolder createIfNotExistsFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string aPath)",
				"isStatic": false
			},
			"IFolder createFolder(string aPath)": {
				"origin": "IFolder createFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string aPath)",
				"isStatic": false
			},
			"bool copyFolder(IFolder aFolder, IFolder toFolder)": {
				"origin": "bool copyFolder(IFolder aFolder, IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(IFolder aFolder, IFolder toFolder)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\controllers\\uim\\controllers\\interfaces\\controller.d": {
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.controller",
		"name": "interface IController {\r",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\core\\uim\\core\\helpers\\classes.d": {
		"package": "uim.core.helpers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.core.helpers.classes",
		"name": "    interface ITest {\r",
		"methods": {},
		"implements": [],
		"library": "uim-core"
	},
	"IRetryStrategy": {
		"origin": "interface IRetryStrategy {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Used to instruct a CommandRetry object on whether a retry",
			"for an action should be performed",
			""
		],
		"namespace": "uim.oop.interfaces.retrystrategy",
		"name": "IRetryStrategy",
		"header": "IRetryStrategy",
		"methods": {
			"bool shouldRetry(UIMException failException, int retryCount)": {
				"origin": "bool shouldRetry(UIMException failException, int retryCount)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"UIMException failException",
					"int retryCount"
				],
				"datatype": "bool",
				"name": "shouldRetry",
				"header": "bool shouldRetry(UIMException failException, int retryCount)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IEntityBase": {
		"origin": "interface IEntityBase {",
		"package": "uim.entitybases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.entitybases.interfaces.base",
		"name": "IEntityBase",
		"header": "IEntityBase",
		"methods": {},
		"implements": [],
		"library": "uim-entitybases"
	},
	"IComparable(T)": {
		"origin": "interface IComparable(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."
		],
		"namespace": "uim.oop.interfaces.comparable",
		"name": "IComparable(T)",
		"header": "IComparable(T)",
		"methods": {
			"int compareTo(T compareValue)": {
				"origin": "int compareTo(T compareValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T compareValue"
				],
				"datatype": "int",
				"name": "compareTo",
				"header": "int compareTo(T compareValue)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IFile": {
		"origin": "interface IFile : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.file",
		"name": "IFile",
		"header": "IFile : IFilesystemEntry",
		"methods": {
			"void appendContent(const void[] content)": {
				"origin": "void appendContent(const void[] content)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"const void[] content"
				],
				"datatype": "void",
				"name": "appendContent",
				"header": "void appendContent(const void[] content)",
				"isStatic": false
			},
			"long accessedOn()": {
				"origin": "long accessedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "accessedOn",
				"header": "long accessedOn()",
				"isStatic": false
			},
			"bool move(IFolder toFolder)": {
				"origin": "bool move(IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(IFolder toFolder)",
				"isStatic": false
			},
			"bool remove()": {
				"origin": "bool remove()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "remove",
				"header": "bool remove()",
				"isStatic": false
			},
			"bool copy(IFolder toFolder)": {
				"origin": "bool copy(IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(IFolder toFolder)",
				"isStatic": false
			},
			"void writeContent(const void[] content)": {
				"origin": "void writeContent(const void[] content)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"const void[] content"
				],
				"datatype": "void",
				"name": "writeContent",
				"header": "void writeContent(const void[] content)",
				"isStatic": false
			},
			"bool isFile()": {
				"origin": "bool isFile()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile()",
				"isStatic": false
			},
			"void attributes(size_t newAttributes)": {
				"origin": "void attributes(size_t newAttributes)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"size_t newAttributes"
				],
				"datatype": "void",
				"name": "attributes",
				"header": "void attributes(size_t newAttributes)",
				"isStatic": false
			},
			"long modifiedOn()": {
				"origin": "long modifiedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "modifiedOn",
				"header": "long modifiedOn()",
				"isStatic": false
			},
			"string driveName()": {
				"origin": "string driveName()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "driveName",
				"header": "string driveName()",
				"isStatic": false
			},
			"bool writeJson(Json jsonData)": {
				"origin": "bool writeJson(Json jsonData)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json jsonData"
				],
				"datatype": "bool",
				"name": "writeJson",
				"header": "bool writeJson(Json jsonData)",
				"isStatic": false
			},
			"bool copy(string[] toPath)": {
				"origin": "bool copy(string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(string[] toPath)",
				"isStatic": false
			},
			"bool move(string[] toPath)": {
				"origin": "bool move(string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(string[] toPath)",
				"isStatic": false
			},
			"long createdOn()": {
				"origin": "long createdOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "createdOn",
				"header": "long createdOn()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"void[] readContent(size_t contentSize = size_t.max)": {
				"origin": "void[] readContent(size_t contentSize = size_t.max)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"size_t contentSize = size_t.max"
				],
				"datatype": "void[]",
				"name": "readContent",
				"header": "void[] readContent(size_t contentSize = size_t.max)",
				"isStatic": false
			},
			"size_t attributes()": {
				"origin": "size_t attributes()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "attributes",
				"header": "size_t attributes()",
				"isStatic": false
			},
			"Json readJson()": {
				"origin": "Json readJson()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json",
				"name": "readJson",
				"header": "Json readJson()",
				"isStatic": false
			},
			"void writeText(string aText)": {
				"origin": "void writeText(string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aText"
				],
				"datatype": "void",
				"name": "writeText",
				"header": "void writeText(string aText)",
				"isStatic": false
			},
			"string[] readLines()": {
				"origin": "string[] readLines()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "readLines",
				"header": "string[] readLines()",
				"isStatic": false
			},
			"string readText()": {
				"origin": "string readText()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "readText",
				"header": "string readText()",
				"isStatic": false
			},
			"void appendText(string aText)": {
				"origin": "void appendText(string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aText"
				],
				"datatype": "void",
				"name": "appendText",
				"header": "void appendText(string aText)",
				"isStatic": false
			},
			"bool copy(string toPath)": {
				"origin": "bool copy(string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string toPath"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(string toPath)",
				"isStatic": false
			},
			"bool move(string toPath)": {
				"origin": "bool move(string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string toPath"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(string toPath)",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"IJsonCollection": {
		"origin": "interface IJsonCollection : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collection",
		"name": "IJsonCollection",
		"header": "IJsonCollection : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"IMap": {
		"origin": "interface IMap {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.map",
		"name": "IMap",
		"header": "IMap",
		"methods": {
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"size_t length()": {
				"origin": "size_t length()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "length",
				"header": "size_t length()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IConfigurable": {
		"origin": "interface IConfigurable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.configurable",
		"name": "IConfigurable",
		"header": "IConfigurable",
		"methods": {
			"void configuration(IConfiguration newConfiguration)": {
				"origin": "void configuration(IConfiguration newConfiguration)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IConfiguration newConfiguration"
				],
				"datatype": "void",
				"name": "configuration",
				"header": "void configuration(IConfiguration newConfiguration)",
				"isStatic": false
			},
			"IConfiguration configuration()": {
				"origin": "IConfiguration configuration()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IConfiguration",
				"name": "configuration",
				"header": "IConfiguration configuration()",
				"isStatic": false
			},
			"final void setConfiguration(string key, Json value) {": {
				"origin": "final void setConfiguration(string key, Json value) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json value"
				],
				"datatype": "final",
				"name": "void setConfiguration",
				"header": "final void setConfiguration(string key, Json value)",
				"isStatic": false
			},
			"final Json getConfiguration(string key) {": {
				"origin": "final Json getConfiguration(string key) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"string key"
				],
				"datatype": "final",
				"name": "Json getConfiguration",
				"header": "final Json getConfiguration(string key)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\list.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.list",
		"name": "interface IList(T) {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\base.d": {
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.base",
		"name": "module uim.jsonbases.interfaces.base;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonBase : INamed {  \r} ",
		"methods": {},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\folder.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.folder",
		"name": "module uim.filesystems.interfaces.folder;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager {\r  // Sets or returns the attributes of a specified folder.\r  long attributes();\r  void attributes(long newAttributes);\r\r  // Returns the date and time when a specified folder was created.\r  long createdOn();\r\r  // Returns the date and time when a specified folder was last accessed.\r  long accessedOn();\r\r  // Returns the date and time when a specified folder was last modified.\r  long modifiedOn();\r\r  // Returns the drive letter of the drive where the specified folder resides.\r  IDrive drive();\r\r  bool hasEntries();\r  bool isEmpty();\r\r  // Returns True if a folder is the root folder and False if not.\r  bool isRootFolder();\r  bool isFolder();\r\r  // Returns the type of a specified folder. */\r  string type();\r\r  // Deletes file.\r  bool remove();\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\entry.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.entry",
		"name": "module uim.filesystems.interfaces.entry;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFilesystemEntry : INamed {\r  bool hasFilesystem();\r  IFilesystem filesystem();\r\r  // Sets or returns the path of a specified entry.\r  string[] path();\r  void path(string[] aPath);\r\r  // Returns the folder object for the parent of the specified file.\r  IFolder parentFolder();\r  void parentFolder(IFolder aFolder);\r\r  // Name of class\r\r  // Returns the size of a specified folder.\r  size_t size();\r\r  // Rename entry\r  bool rename(string newName);\r\r  // Check if filesystem exists\r   bool exists(); \r\r  // Check if filesystem entry is hidden\r  bool isHidden();\r\r  // Check if filesystem entry is folder\r  bool isFolder();\r\r  // Check if filesystem entry is file\r  bool isFile();\r\r  // Check if filesystem entry is link\r  bool isLink();\r\r  string relPath(string aPath); \r  string relPath(string[] aPath = null); \r\r  string absolutePath(string aPath); \r  string absolutePath(string[] aPath = null); \r\r  string toString();\r}",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\tenant.d": {
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenant",
		"name": "module uim.jsonbases.interfaces.tenant;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonTenant : INamed {  \r  IJsonBase base();\r}",
		"methods": {},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"ICollection(T)": {
		"origin": "interface ICollection(T) : IKeyAndPath {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.collection",
		"name": "ICollection(T)",
		"header": "ICollection(T) : IKeyAndPath",
		"methods": {
			"T[] toArray()": {
				"origin": "T[] toArray()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "T[]",
				"name": "toArray",
				"header": "T[] toArray()",
				"isStatic": false
			},
			"bool addAll(ICollection2!T aCollection)": {
				"origin": "bool addAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "addAll",
				"header": "bool addAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"bool containsAll(ICollection2!T aCollection)": {
				"origin": "bool containsAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "containsAll",
				"header": "bool containsAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"int  hashCode()": {
				"origin": "int  hashCode()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "int",
				"name": "hashCode",
				"header": "int hashCode()",
				"isStatic": false
			},
			"size_t  size()": {
				"origin": "size_t  size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"void  clear()": {
				"origin": "void  clear()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "clear",
				"header": "void clear()",
				"isStatic": false
			},
			"bool contains(T anItem)": {
				"origin": "bool contains(T anItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T anItem"
				],
				"datatype": "bool",
				"name": "contains",
				"header": "bool contains(T anItem)",
				"isStatic": false
			},
			"bool removeKey(T anItem)": {
				"origin": "bool removeKey(T anItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T anItem"
				],
				"datatype": "bool",
				"name": "removeKey",
				"header": "bool removeKey(T anItem)",
				"isStatic": false
			},
			"bool removeAll(ICollection2!T aCollection)": {
				"origin": "bool removeAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "removeAll",
				"header": "bool removeAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"bool add(T newItem)": {
				"origin": "bool add(T newItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T newItem"
				],
				"datatype": "bool",
				"name": "add",
				"header": "bool add(T newItem)",
				"isStatic": false
			}
		},
		"implements": [
			"IKeyAndPath"
		],
		"library": "uim-oop"
	},
	"IPluginApplication /*": {
		"origin": "interface IPluginApplication /* : IEventDispatcher */ { // TODO",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for Applications that leverage plugins & events.",
			"",
			"Events can be bound to the application event manager during",
			"the application`s bootstrap and plugin bootstrap.",
			""
		],
		"namespace": "uim.oop.interfaces.pluginapplication",
		"name": "IPluginApplication /*",
		"header": "IPluginApplication /* : IEventDispatcher */",
		"methods": {
			"void addPlugin(string pluginName, Json Data = null)": {
				"origin": "void addPlugin(string pluginName, Json Data = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string pluginName",
					"Json Data = null"
				],
				"datatype": "void",
				"name": "addPlugin",
				"header": "void addPlugin(string pluginName, Json Data = null)",
				"isStatic": false
			},
			"void pluginBootstrap()": {
				"origin": "void pluginBootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "pluginBootstrap",
				"header": "void pluginBootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IEventDispatcher */"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\keyandpath.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.keyandpath",
		"name": "interface IKeyAndPath {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IStringable": {
		"origin": "interface IStringable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.stringable",
		"name": "IStringable",
		"header": "IStringable",
		"methods": {
			"string toString()": {
				"origin": "string toString()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toString",
				"header": "string toString()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IFormatter": {
		"origin": "interface IFormatter : INamed {",
		"package": "uim.oop.formatters",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.formatters.interfaces",
		"name": "IFormatter",
		"header": "IFormatter : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IRunnable": {
		"origin": "interface IRunnable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.runnable",
		"name": "IRunnable",
		"header": "IRunnable",
		"methods": {
			"O run(this O)()": {
				"origin": "O run(this O)()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)()",
				"isStatic": false
			},
			"O run(this O)(Json data)": {
				"origin": "O run(this O)(Json data)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)(Json data)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IParser": {
		"origin": "interface IParser : INamed {",
		"package": "uim.oop.parsers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.parsers.interfaces",
		"name": "IParser",
		"header": "IParser : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IJsonTenant": {
		"origin": "interface IJsonTenant : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenant",
		"name": "IJsonTenant",
		"header": "IJsonTenant : INamed",
		"methods": {
			"IJsonBase base()": {
				"origin": "IJsonBase base()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonBase",
				"name": "base",
				"header": "IJsonBase base()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\containerapplication.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.containerapplication",
		"name": "interface IContainerApplication {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IFolder": {
		"origin": "interface IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.folder",
		"name": "IFolder",
		"header": "IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager",
		"methods": {
			"long accessedOn()": {
				"origin": "long accessedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "accessedOn",
				"header": "long accessedOn()",
				"isStatic": false
			},
			"bool hasEntries()": {
				"origin": "bool hasEntries()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "hasEntries",
				"header": "bool hasEntries()",
				"isStatic": false
			},
			"bool remove()": {
				"origin": "bool remove()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "remove",
				"header": "bool remove()",
				"isStatic": false
			},
			"IDrive drive()": {
				"origin": "IDrive drive()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IDrive",
				"name": "drive",
				"header": "IDrive drive()",
				"isStatic": false
			},
			"long modifiedOn()": {
				"origin": "long modifiedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "modifiedOn",
				"header": "long modifiedOn()",
				"isStatic": false
			},
			"void attributes(long newAttributes)": {
				"origin": "void attributes(long newAttributes)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"long newAttributes"
				],
				"datatype": "void",
				"name": "attributes",
				"header": "void attributes(long newAttributes)",
				"isStatic": false
			},
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"long createdOn()": {
				"origin": "long createdOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "createdOn",
				"header": "long createdOn()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"long attributes()": {
				"origin": "long attributes()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "attributes",
				"header": "long attributes()",
				"isStatic": false
			},
			"bool isRootFolder()": {
				"origin": "bool isRootFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isRootFolder",
				"header": "bool isRootFolder()",
				"isStatic": false
			},
			"bool isFolder()": {
				"origin": "bool isFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry",
			"IFolderManager",
			"IFileManager",
			"ILinkManager"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\linkmanager.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.linkmanager",
		"name": "module uim.filesystems.interfaces.linkmanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface ILinkManager {\r  bool existsLinks(string aPath);\r  bool existsLinks(string[] aPath);\r\r  size_t countLinks(string aPath);\r  size_t countLinks(string[] aPath);\r\r  ILink[] links(string aPath);\r  ILink[] links(string[] aPath);\r\r  // Returns a Link object for a specified path.\r  ILink link(string aPath);\r  ILink link(string[] aPath);\r\r  bool existsLink(string aPath);\r  bool existsLink(string[] aPath);\r\r  bool addLink(ILink aLink);\r\r  // Copies link from one location to another.\r  bool copyLink(string fromPath, string toPath);\r  bool copyLink(string[] fromPath, string[] toPath);\r\r  // Moves one or more links from one location to another.\r  bool moveLink(string fromPath, string toPath);\r  bool moveLink(string[] fromPath, string[] toPath);\r\r  // Checks if a specified link exists.\r  final bool linksExists(ILink[] someLinks) {\r    if (someLinks.isEmpty) {\r      return false;\r    }\r\r    return someLinks.all!(link => link.exists);\r  }\r\r  // Deletes specified link.\r  bool removeLinks(string aPath);\r  bool removeLinks(string[] aPath);\r\r  // Deletes specified link.\r  ILink createLink(string aPath);\r  ILink createLink(string[] aPath);\r\r  // Deletes specified link.\r  bool removeLink(string aPath);\r  bool removeLink(string[] aPath);\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\collection.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.collection",
		"name": "interface ICollection(T) : IKeyAndPath {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IJsonBase": {
		"origin": "interface IJsonBase : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.base",
		"name": "IJsonBase",
		"header": "IJsonBase : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\comparable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.comparable",
		"name": "interface IComparable(T) {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\appendable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.appendable",
		"name": "interface IAppendable {}",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IConsoleApplication": {
		"origin": "interface IConsoleApplication {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the console runner depend on."
		],
		"namespace": "uim.oop.interfaces.consoleapplication",
		"name": "IConsoleApplication",
		"header": "IConsoleApplication",
		"methods": {
			"void bootstrap()": {
				"origin": "void bootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IConfiguration": {
		"origin": "interface IConfiguration : INamed {",
		"package": "uim.oop.configurations",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.configurations.interfaces",
		"name": "IConfiguration",
		"header": "IConfiguration : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\closure.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.closure",
		"name": "interface IClosure {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"ICss": {
		"origin": "interface ICss {",
		"package": "uim.css.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.css.interfaces.css",
		"name": "ICss",
		"header": "ICss",
		"methods": {},
		"implements": [],
		"library": "uim-css"
	},
	"IFilesystem": {
		"origin": "interface IFilesystem : IFolderManager, IFileManager, ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filesystem",
		"name": "IFilesystem",
		"header": "IFilesystem : IFolderManager, IFileManager, ILinkManager",
		"methods": {
			"string absolutePath(string[] aPath)": {
				"origin": "string absolutePath(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string[] aPath)",
				"isStatic": false
			},
			"bool isFile(string[] aPath)": {
				"origin": "bool isFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string[] aPath)",
				"isStatic": false
			},
			"void appendTextToFile(string[] aPath, string aFileName, string aText)": {
				"origin": "void appendTextToFile(string[] aPath, string aFileName, string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"string aText"
				],
				"datatype": "void",
				"name": "appendTextToFile",
				"header": "void appendTextToFile(string[] aPath, string aFileName, string aText)",
				"isStatic": false
			},
			"bool isLink(string[] aPath, string aFolderName)": {
				"origin": "bool isLink(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isFolder(string[] aPath, string aFolderName)": {
				"origin": "bool isFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"string pathSeparator()": {
				"origin": "string pathSeparator()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "pathSeparator",
				"header": "string pathSeparator()",
				"isStatic": false
			},
			"bool isHidden(string[] aPath, string aFolderName)": {
				"origin": "bool isHidden(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isLink(string aPath, string aFolderName)": {
				"origin": "bool isLink(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void appendToFile(string[] aPath, string aFileName, const void[] buffer)": {
				"origin": "void appendToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"const void[] buffer"
				],
				"datatype": "void",
				"name": "appendToFile",
				"header": "void appendToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isStatic": false
			},
			"bool isHidden(string aPath)": {
				"origin": "bool isHidden(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string aPath)",
				"isStatic": false
			},
			"bool isLink(string aPath)": {
				"origin": "bool isLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string aPath)",
				"isStatic": false
			},
			"void writeTextToFile(string[] aPath, string aFileName, string aText)": {
				"origin": "void writeTextToFile(string[] aPath, string aFileName, string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"string aText"
				],
				"datatype": "void",
				"name": "writeTextToFile",
				"header": "void writeTextToFile(string[] aPath, string aFileName, string aText)",
				"isStatic": false
			},
			"IFilesystem filesystem()": {
				"origin": "IFilesystem filesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFilesystem",
				"name": "filesystem",
				"header": "IFilesystem filesystem()",
				"isStatic": false
			},
			"string readTextFromFile(string[] aPath, string aFileName)": {
				"origin": "string readTextFromFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "string",
				"name": "readTextFromFile",
				"header": "string readTextFromFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool isHidden(string aPath, string aFolderName)": {
				"origin": "bool isHidden(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isFolder(string[] aPath)": {
				"origin": "bool isFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string[] aPath)",
				"isStatic": false
			},
			"void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)": {
				"origin": "void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"size_t numberOfBytes = size_t.max"
				],
				"datatype": "void[]",
				"name": "readFromFile",
				"header": "void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)",
				"isStatic": false
			},
			"string absolutePath(string aPath)": {
				"origin": "string absolutePath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string aPath)",
				"isStatic": false
			},
			"string[] readLines(string[] aPath, string aFileName)": {
				"origin": "string[] readLines(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "string[]",
				"name": "readLines",
				"header": "string[] readLines(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"string relPath(string[] aPath)": {
				"origin": "string relPath(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string[] aPath)",
				"isStatic": false
			},
			"size_t capacity()": {
				"origin": "size_t capacity()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "capacity",
				"header": "size_t capacity()",
				"isStatic": false
			},
			"string[] path()": {
				"origin": "string[] path()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "path",
				"header": "string[] path()",
				"isStatic": false
			},
			"bool isFolder(string aPath, string aFolderName)": {
				"origin": "bool isFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void writeToFile(string[] aPath, string aFileName, const void[] buffer)": {
				"origin": "void writeToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"const void[] buffer"
				],
				"datatype": "void",
				"name": "writeToFile",
				"header": "void writeToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isStatic": false
			},
			"bool isFolder(string aPath)": {
				"origin": "bool isFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string aPath)",
				"isStatic": false
			},
			"bool isFile(string aPath)": {
				"origin": "bool isFile(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string aPath)",
				"isStatic": false
			},
			"bool isFile(string[] aPath, string aFolderName)": {
				"origin": "bool isFile(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isLink(string[] aPath)": {
				"origin": "bool isLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string[] aPath)",
				"isStatic": false
			},
			"bool isHidden(string[] aPath)": {
				"origin": "bool isHidden(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string[] aPath)",
				"isStatic": false
			},
			"string relPath(string aPath)": {
				"origin": "string relPath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string aPath)",
				"isStatic": false
			},
			"size_t availableDiskSpace()": {
				"origin": "size_t availableDiskSpace()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "availableDiskSpace",
				"header": "size_t availableDiskSpace()",
				"isStatic": false
			},
			"string rootPath()": {
				"origin": "string rootPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "rootPath",
				"header": "string rootPath()",
				"isStatic": false
			},
			"size_t size()": {
				"origin": "size_t size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"bool isFile(string aPath, string aFolderName)": {
				"origin": "bool isFile(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void path(string[] path)": {
				"origin": "void path(string[] path)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] path"
				],
				"datatype": "void",
				"name": "path",
				"header": "void path(string[] path)",
				"isStatic": false
			},
			"IFolder rootFolder()": {
				"origin": "IFolder rootFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder",
				"name": "rootFolder",
				"header": "IFolder rootFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"IFolderManager",
			"IFileManager",
			"ILinkManager"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\css\\uim\\css\\interfaces\\css.d": {
		"package": "uim.css.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.css.interfaces.css",
		"name": "module uim.css.interfaces.css;\r\rimport uim.css;\r\r@safe:\r\rinterface ICss {\r    \r}",
		"methods": {},
		"implements": [],
		"library": "uim-css"
	},
	"IAppendable": {
		"origin": "interface IAppendable {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An object to which char sequences and values can be appended."
		],
		"namespace": "uim.oop.interfaces.appendable",
		"name": "IAppendable",
		"header": "IAppendable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\enumeration.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.enumeration",
		"name": "interface IEnumeration {}",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\file.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.file",
		"name": "module uim.filesystems.interfaces.file;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFile : IFilesystemEntry {\r  // #region Properties\r  // Sets or returns the attributes of a specified file.\r  bool isFile();\r\r  size_t attributes();\r  void attributes(size_t newAttributes);\r\r  // Returns the date and time when a specified file was created.\r  long createdOn();\r\r  // Returns the date and time when a specified file was last accessed.\r  long accessedOn();\r\r  // Returns the date and time when a specified file was last modified.\r  long modifiedOn();\r\r  // Returns the drive letter of the drive where a specified file or folder resides.\r  string driveName();\r\r  // Returns the type of a specified file.\r  string type();\r  // #endregion Properties\r\r  // #region Methods\r  void writeContent(const void[] content);\r  void[] readContent(size_t contentSize = size_t.max);\r  void appendContent(const void[] content);\r\r  string readText();\r  void writeText(string aText);\r  void appendText(string aText);\r\r  string[] readLines();\r\r  Json readJson();\r  bool writeJson(Json jsonData);\r\r  // Copies a specified file from one location to another.\r  bool copy(string toPath);\r  bool copy(string[] toPath);\r  bool copy(IFolder toFolder);\r\r  // Moves file from one location to another.\r  bool move(string toPath);\r  bool move(string[] toPath);\r  bool move(IFolder toFolder);\r\r  // Deletes file.\r  bool remove();\r\r  // TODO: OpenAsTextStream   Opens a specified file and returns a TextStream object to access the file.\r  // #endregion Methods\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\parsers\\interfaces.d": {
		"package": "uim.oop.parsers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.parsers.interfaces",
		"name": "interface IParser : INamed {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IConfigEngine": {
		"origin": "interface IConfigEngine {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for creating objects compatible with Configure.load()"
		],
		"namespace": "uim.oop.interfaces.configengine",
		"name": "IConfigEngine",
		"header": "IConfigEngine",
		"methods": {
			"bool dump(string key, Json[string] dataToDump)": {
				"origin": "bool dump(string key, Json[string] dataToDump)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json[string] dataToDump"
				],
				"datatype": "bool",
				"name": "dump",
				"header": "bool dump(string key, Json[string] dataToDump)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IContainer": {
		"origin": "interface IContainer { // TODO: IDefinitionContainer {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for the Dependency Injection Container in UIM applications",
			"",
			"This interface : the PSR-11 container interface and adds",
			"methods to add services and service providers to the container.",
			"",
			"The methods defined in this interface use the conventions provided",
			"by league/container as that is the library that UIM uses.",
			""
		],
		"namespace": "uim.oop.interfaces.container",
		"name": "IContainer",
		"header": "IContainer",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\fixturestrategy.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.fixturestrategy",
		"name": "interface IFixtureStrategy {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\services\\uim\\services\\interfaces\\service.d": {
		"package": "uim.services.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.services.interfaces.service",
		"name": "interface IServices {}",
		"methods": {},
		"implements": [],
		"library": "uim-services"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\validators\\interfaces.d": {
		"package": "uim.oop.validators",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.validators.interfaces",
		"name": "interface IValidator : INamed {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IError": {
		"origin": "interface IError {",
		"package": "uim.oop.errors",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.errors.interfaces",
		"name": "IError",
		"header": "IError",
		"methods": {
			"ERRORS code()": {
				"origin": "ERRORS code()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "ERRORS",
				"name": "code",
				"header": "ERRORS code()",
				"isStatic": false
			},
			"string message()": {
				"origin": "string message()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "message",
				"header": "string message()",
				"isStatic": false
			},
			"string fileName()": {
				"origin": "string fileName()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "fileName",
				"header": "string fileName()",
				"isStatic": false
			},
			"void message(string message)": {
				"origin": "void message(string message)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string message"
				],
				"datatype": "void",
				"name": "message",
				"header": "void message(string message)",
				"isStatic": false
			},
			"size_t[string][] trace()": {
				"origin": "size_t[string][] trace()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t[string][]",
				"name": "trace",
				"header": "size_t[string][] trace()",
				"isStatic": false
			},
			"size_t lineNumber()": {
				"origin": "size_t lineNumber()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "lineNumber",
				"header": "size_t lineNumber()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\configengine.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.configengine",
		"name": "interface IConfigEngine {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\runnable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.runnable",
		"name": "interface IRunnable {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\exception.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.exception",
		"name": "interface IException {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\stringable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.stringable",
		"name": "interface IStringable {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IDrive": {
		"origin": "interface IDrive : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.drive",
		"name": "IDrive",
		"header": "IDrive : IFilesystemEntry",
		"methods": {},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"IHttpApplication /*": {
		"origin": "interface IHttpApplication /* : IRequestHandler */ {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the http server depend on."
		],
		"namespace": "uim.oop.interfaces.httpapplication",
		"name": "IHttpApplication /*",
		"header": "IHttpApplication /* : IRequestHandler */",
		"methods": {
			"void bootstrap()": {
				"origin": "void bootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IRequestHandler */"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\filemanager.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filemanager",
		"name": "module uim.filesystems.interfaces.filemanager;\r\rimport uim.filesystems;\r\r@safe:\rinterface IFileManager {\r  bool hasFiles(string aPathOrName);\r  bool hasFiles(string aPath, string aFileName);\r  bool hasFiles(string[] aPath);\r  bool hasFiles(string[] aPath, string aFileName);\r\r  size_t countFiles(string aPathOrName);\r  size_t countFiles(string aPath, string aFileName);\r  size_t countFiles(string[] aPath);\r  size_t countFiles(string[] aPath, string aFileName);\r\r  IFile[] files();\r  IFile[] files(string aPathOrName);\r  IFile[] files(string aPath, string aFileName);\r  IFile[] files(string[] aPath);\r  IFile[] files(string[] aPath, string aFileName);\r\r  // Returns a File object for a specified path.\r  IFile file(string aPathOrName);\r  IFile file(string aPath, string aFileName);\r  IFile file(string[] aPath);\r  IFile file(string[] aPath, string aFileName);\r\r  bool existsFile(string aPathOrName);\r  bool existsFile(string aPath, string aFileName);\r  bool existsFile(string[] aPath);\r  bool existsFile(string[] aPath, string aFileName);\r\r  bool addFile(IFile aFile);\r\r  IFile createFile(string aPathOrName);\r  IFile createFile(string aPath, string aFileName);\r  IFile createFile(string[] aPath);\r  IFile createFile(string[] aPath, string aFileName);\r\r  bool renameFile(string oldPathAndName, string newName);\r  bool renameFile(string aPath, string oldName, string newName);\r  bool renameFile(string[] oldPathAndName, string newName);\r  bool renameFile(string[] aPath, string oldName, string newName);\r\r  // Copies file from one location to another.\r  bool copyFile(string fromPath, string toPath);\r  bool copyFile(string[] fromPath, string[] toPath);\r\r  // Moves one or more files from one location to another.\r  bool moveFile(string fromPath, string toPath);\r  bool moveFile(string[] fromPath, string[] toPath);\r\r  // Checks if a specified file exists. False, ifsomeFiles is empty\r  final bool filesExists(IFile[] files) {\r    if (files.isEmpty) { return false; }\r\r    return files.all!(file => file.exists);\r  }\r\r  bool removeFile(string aPath);\r  bool removeFile(string aPath, string aFolderName);\r  bool removeFile(string[] aPath);\r  bool removeFile(string[] aPath, string aFolderName);\r}",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"ILink": {
		"origin": "interface ILink : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.link",
		"name": "ILink",
		"header": "ILink : IFilesystemEntry",
		"methods": {
			"bool isLink()": {
				"origin": "bool isLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink()",
				"isStatic": false
			},
			"bool isFileLink()": {
				"origin": "bool isFileLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFileLink",
				"header": "bool isFileLink()",
				"isStatic": false
			},
			"bool isFolderLink()": {
				"origin": "bool isFolderLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolderLink",
				"header": "bool isFolderLink()",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\commands\\interfaces.d": {
		"package": "uim.oop.commands",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.commands.interfaces",
		"name": "interface ICommand : INamed {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IException": {
		"origin": "interface IException {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.exception",
		"name": "IException",
		"header": "IException",
		"methods": {
			"string message()": {
				"origin": "string message()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "message",
				"header": "string message()",
				"isStatic": false
			},
			"string messageTemplate(string templateName = \"default\")": {
				"origin": "string messageTemplate(string templateName = \"default\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string templateName = \"default\""
				],
				"datatype": "string",
				"name": "messageTemplate",
				"header": "string messageTemplate(string templateName = \"default\")",
				"isStatic": false
			},
			"STRINGAA messageTemplates()": {
				"origin": "STRINGAA messageTemplates()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "STRINGAA",
				"name": "messageTemplates",
				"header": "STRINGAA messageTemplates()",
				"isStatic": false
			},
			"void messageTemplate(string templateName, string templateText)": {
				"origin": "void messageTemplate(string templateName, string templateText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string templateName",
					"string templateText"
				],
				"datatype": "void",
				"name": "messageTemplate",
				"header": "void messageTemplate(string templateName, string templateText)",
				"isStatic": false
			},
			"void messageTemplates(string[string] templates)": {
				"origin": "void messageTemplates(string[string] templates)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[string] templates"
				],
				"datatype": "void",
				"name": "messageTemplates",
				"header": "void messageTemplates(string[string] templates)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IIterable(T)": {
		"origin": "interface IIterable(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.iterable",
		"name": "IIterable(T)",
		"header": "IIterable(T)",
		"methods": {
			"void forEach(void function(T)forEachFunc)": {
				"origin": "void forEach(void function(T)forEachFunc)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"void function"
				],
				"datatype": "void",
				"name": "forEach",
				"header": "void forEach(void function(T)forEachFunc)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IJsonCollectionManager": {
		"origin": "interface IJsonCollectionManager {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collectionmanager",
		"name": "IJsonCollectionManager",
		"header": "IJsonCollectionManager",
		"methods": {
			"size_t countCollections(string[] someNames = null)": {
				"origin": "size_t countCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "size_t",
				"name": "countCollections",
				"header": "size_t countCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool hasCollections(string[] someNames...)": {
				"origin": "bool hasCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "hasCollections",
				"header": "bool hasCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[string] someCollections)": {
				"origin": "bool addCollections(IJsonCollection[string] someCollections)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[string] someCollections"
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[string] someCollections)",
				"isStatic": false
			},
			"string[] existingCollections(string[] someNames = null)": {
				"origin": "string[] existingCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "string[]",
				"name": "existingCollections",
				"header": "string[] existingCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool deleteCollection(string aName)": {
				"origin": "bool deleteCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "deleteCollection",
				"header": "bool deleteCollection(string aName)",
				"isStatic": false
			},
			"IJsonCollection[] createCollections(string[] someNames...)": {
				"origin": "IJsonCollection[] createCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "IJsonCollection[]",
				"name": "createCollections",
				"header": "IJsonCollection[] createCollections(string[] someNames...)",
				"isStatic": false
			},
			"string[] existingCollections(string[] someNames...)": {
				"origin": "string[] existingCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "string[]",
				"name": "existingCollections",
				"header": "string[] existingCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollection(IJsonCollection aCollection)": {
				"origin": "bool addCollection(IJsonCollection aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection aCollection"
				],
				"datatype": "bool",
				"name": "addCollection",
				"header": "bool addCollection(IJsonCollection aCollection)",
				"isStatic": false
			},
			"bool addCollection(string aName, IJsonCollection aCollection)": {
				"origin": "bool addCollection(string aName, IJsonCollection aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IJsonCollection aCollection"
				],
				"datatype": "bool",
				"name": "addCollection",
				"header": "bool addCollection(string aName, IJsonCollection aCollection)",
				"isStatic": false
			},
			"string[] collectionNames()": {
				"origin": "string[] collectionNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "collectionNames",
				"header": "string[] collectionNames()",
				"isStatic": false
			},
			"IJsonCollection[] collections()": {
				"origin": "IJsonCollection[] collections()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonCollection[]",
				"name": "collections",
				"header": "IJsonCollection[] collections()",
				"isStatic": false
			},
			"IJsonCollection createCollection(string aName)": {
				"origin": "IJsonCollection createCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonCollection",
				"name": "createCollection",
				"header": "IJsonCollection createCollection(string aName)",
				"isStatic": false
			},
			"IJsonCollection collection(string aName)": {
				"origin": "IJsonCollection collection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonCollection",
				"name": "collection",
				"header": "IJsonCollection collection(string aName)",
				"isStatic": false
			},
			"IJsonCollection[] createCollections(string[] someNames)": {
				"origin": "IJsonCollection[] createCollections(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "IJsonCollection[]",
				"name": "createCollections",
				"header": "IJsonCollection[] createCollections(string[] someNames)",
				"isStatic": false
			},
			"bool deleteCollections(string[] someNames)": {
				"origin": "bool deleteCollections(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "bool",
				"name": "deleteCollections",
				"header": "bool deleteCollections(string[] someNames)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[] someCollections...)": {
				"origin": "bool addCollections(IJsonCollection[] someCollections...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[] someCollections..."
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[] someCollections...)",
				"isStatic": false
			},
			"bool hasCollection(string aName)": {
				"origin": "bool hasCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "hasCollection",
				"header": "bool hasCollection(string aName)",
				"isStatic": false
			},
			"size_t countCollections(string[] someNames...)": {
				"origin": "size_t countCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "size_t",
				"name": "countCollections",
				"header": "size_t countCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool hasCollections(string[] someNames = null)": {
				"origin": "bool hasCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "bool",
				"name": "hasCollections",
				"header": "bool hasCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool deleteCollections(string[] someNames...)": {
				"origin": "bool deleteCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "deleteCollections",
				"header": "bool deleteCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[] someCollections)": {
				"origin": "bool addCollections(IJsonCollection[] someCollections)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[] someCollections"
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[] someCollections)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"IServices": {
		"origin": "interface IServices {}",
		"package": "uim.services.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.services.interfaces.service",
		"name": "IServices",
		"header": "IServices",
		"methods": {},
		"implements": [],
		"library": "uim-services"
	},
	"IList(T)": {
		"origin": "interface IList(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.list",
		"name": "IList(T)",
		"header": "IList(T)",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\configurable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.configurable",
		"name": "interface IConfigurable {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"ITest": {
		"origin": "    interface ITest {",
		"package": "uim.core.helpers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.core.helpers.classes",
		"name": "ITest",
		"header": "ITest",
		"methods": {
			"debug writeln(result.classname)": {
				"origin": "debug writeln(result.classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"result.classname"
				],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln(result.classname)",
				"isStatic": false
			},
			"assert((new Test2).classname == \"Test2\")": {
				"origin": "assert((new Test2).classname == \"Test2\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert((new",
				"name": "",
				"header": "assert((new Test2).classname == \"Test2\")",
				"isStatic": false
			},
			"writeln(\"classname:\", (new Test2).classname)": {
				"origin": "writeln(\"classname:\", (new Test2).classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"classname:\",",
				"name": "",
				"header": "writeln(\"classname:\", (new Test2).classname)",
				"isStatic": false
			},
			"writeln((new Test2).classinfo)": {
				"origin": "writeln((new Test2).classinfo)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln((new",
				"name": "",
				"header": "writeln((new Test2).classinfo)",
				"isStatic": false
			},
			"writeln(\"Base:\", (new Test2).classinfo.base)": {
				"origin": "writeln(\"Base:\", (new Test2).classinfo.base)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Base:\",",
				"name": "",
				"header": "writeln(\"Base:\", (new Test2).classinfo.base)",
				"isStatic": false
			},
			"() @trusted { result = Object.factory(name) }()": {
				"origin": "() @trusted ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "()",
				"name": "",
				"header": "() @trusted",
				"isStatic": false
			},
			"debug writeln(cl.create)": {
				"origin": "debug writeln(cl.create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"cl.create"
				],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln(cl.create)",
				"isStatic": false
			},
			"auto cl = (new Test2).classinfo": {
				"origin": "auto cl = (new Test2).classinfo",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"new Test2).classinfo"
				],
				"datatype": "auto",
				"name": "cl = ",
				"header": "auto cl = (new Test2).classinfo",
				"isStatic": false
			},
			"writeln(\"test.classname\", test.classname)": {
				"origin": "writeln(\"test.classname\", test.classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"test.classname\",",
				"name": "",
				"header": "writeln(\"test.classname\", test.classname)",
				"isStatic": false
			},
			"writeln(\"Interfaces:\", (new Test).classinfo.interfaces)": {
				"origin": "writeln(\"Interfaces:\", (new Test).classinfo.interfaces)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Interfaces:\",",
				"name": "",
				"header": "writeln(\"Interfaces:\", (new Test).classinfo.interfaces)",
				"isStatic": false
			},
			"writeln(\"fullclassname:\", (new Test2).classFullname)": {
				"origin": "writeln(\"fullclassname:\", (new Test2).classFullname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"fullclassname:\",",
				"name": "",
				"header": "writeln(\"fullclassname:\", (new Test2).classFullname)",
				"isStatic": false
			},
			"assert(test.classname == \"Test\")": {
				"origin": "assert(test.classname == \"Test\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert(test.classname",
				"name": "",
				"header": "assert(test.classname == \"Test\")",
				"isStatic": false
			},
			"Test2 function(string) fn": {
				"origin": "Test2 function(string) fn",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string) fn"
				],
				"datatype": "Test2",
				"name": "function",
				"header": "Test2 function(string) fn",
				"isStatic": false
			},
			"debug writeln((new Test2).classinfo.create)": {
				"origin": "debug writeln((new Test2).classinfo.create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln((new Test2).classinfo.create)",
				"isStatic": false
			},
			"assert((new Test1).classname == \"Test1\")": {
				"origin": "assert((new Test1).classname == \"Test1\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert((new",
				"name": "",
				"header": "assert((new Test1).classname == \"Test1\")",
				"isStatic": false
			},
			"debug writeln((new Test2).create)": {
				"origin": "debug writeln((new Test2).create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln((new Test2).create)",
				"isStatic": false
			},
			"assert(test.stringof == \"test\")": {
				"origin": "assert(test.stringof == \"test\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert(test.stringof",
				"name": "",
				"header": "assert(test.stringof == \"test\")",
				"isStatic": false
			},
			"writeln(\"Name:\", (new Test2).classinfo.name)": {
				"origin": "writeln(\"Name:\", (new Test2).classinfo.name)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Name:\",",
				"name": "",
				"header": "writeln(\"Name:\", (new Test2).classinfo.name)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-core"
	},
	"IContainerApplication": {
		"origin": "interface IContainerApplication {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for applications that configure and use a dependency injection container."
		],
		"namespace": "uim.oop.interfaces.containerapplication",
		"name": "IContainerApplication",
		"header": "IContainerApplication",
		"methods": {
			"IContainer getContainer()": {
				"origin": "IContainer getContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IContainer",
				"name": "getContainer",
				"header": "IContainer getContainer()",
				"isStatic": false
			},
			"void services(IContainer container)": {
				"origin": "void services(IContainer container)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IContainer container"
				],
				"datatype": "void",
				"name": "services",
				"header": "void services(IContainer container)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IKeyAndPath": {
		"origin": "interface IKeyAndPath {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.keyandpath",
		"name": "IKeyAndPath",
		"header": "IKeyAndPath",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IController": {
		"origin": "interface IController {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.controller",
		"name": "IController",
		"header": "IController",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"IValidator": {
		"origin": "interface IValidator : INamed {",
		"package": "uim.oop.validators",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.validators.interfaces",
		"name": "IValidator",
		"header": "IValidator : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\collection.d": {
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collection",
		"name": "module uim.jsonbases.interfaces.collection;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonCollection : INamed {  \r  // #region READ\r    // #region findMany()\r      Json[] findMany(bool allVersions = false);\r      Json[] findMany(UUID[] ids, bool allVersions = false);\r      Json[] findMany(UUID id, bool allVersions = false);\r      Json[] findMany(UUID[] ids, size_t versionNumber);\r\r      Json[] findMany(string[string][] selects, bool allVersions = false);\r      Json[] findMany(string[string] select, bool allVersions = false);\r      Json[] findMany(Json[] selects, bool allVersions = false);\r      Json[] findMany(Json select, bool allVersions = false);\r    // #endregion findMany() \r\r    // #region findOne()\r      Json findOne(UUID[] ids, bool allVersions = false);\r      Json findOne(UUID id, bool allVersions = false);\r      Json findOne(UUID[] ids, size_t versionNumber);\r      Json findOne(UUID id, size_t versionNumber);\r\r      Json findOne(string[string][] selects, bool allVersions = false);\r      Json findOne(string[string] select, bool allVersions = false);\r      Json findOne(Json[] selects, bool allVersions = false);\r      Json findOne(Json select, bool allVersions = false);\r    // #endregion findOne()\r  // #endregion READ                            \r\r  // #region UPDATE\r    // #region updateMany()\r      size_t updateMany(string[string] select, string[string] updateData);\r      size_t updateMany(string[string] select, Json updateData);\r      \r      size_t updateMany(Json select, string[string] updateData);\r      size_t updateMany(Json select, Json updateData);\r    // #endregion updateMany()\r\r    // #region updateOne()\r      bool updateOne(string[string] select, string[string] updateData);\r      bool updateOne(string[string] select, Json updateData);\r      bool updateOne(Json select, string[string] updateData);\r      abstract bool updateOne(Json select, Json updateData);\r    // #endregion updateOne()\r  // #endregion UPDATE                                                                 \r}                                                                                                                                                                                                               ",
		"methods": {},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\cloneable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.cloneable",
		"name": "interface ICloneable {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\httpapplication.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.httpapplication",
		"name": "interface IHttpApplication /* : IRequestHandler */ {",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\formatters\\interfaces.d": {
		"package": "uim.oop.formatters",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.formatters.interfaces",
		"name": "interface IFormatter : INamed {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\consoleapplication.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.consoleapplication",
		"name": "interface IConsoleApplication {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IClosure": {
		"origin": "interface IClosure {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"TODO"
		],
		"namespace": "uim.oop.interfaces.closure",
		"name": "IClosure",
		"header": "IClosure",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\map.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.map",
		"name": "interface IMap {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IEnumeration": {
		"origin": "interface IEnumeration {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.enumeration",
		"name": "IEnumeration",
		"header": "IEnumeration",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\entitybases\\uim\\entitybases\\interfaces\\base.d": {
		"package": "uim.entitybases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.entitybases.interfaces.base",
		"name": "module uim.entitybases.interfaces.base;\r\rimport uim.entitybases;\r\r@safe:\r\rinterface IEntityBase {\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-entitybases"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\pluginapplication.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.pluginapplication",
		"name": "interface IPluginApplication /* : IEventDispatcher */ { // TODO",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\drive.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.drive",
		"name": "module uim.filesystems.interfaces.drive;\r\rimport uim.filesystems;\r\r@safe:\rinterface IDrive : IFilesystemEntry {\r}",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\configurations\\interfaces.d": {
		"package": "uim.oop.configurations",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.configurations.interfaces",
		"name": "interface IConfiguration : INamed {",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"ICloneable": {
		"origin": "interface ICloneable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.cloneable",
		"name": "ICloneable",
		"header": "ICloneable",
		"methods": {
			"T clone(this O)()": {
				"origin": "T clone(this O)()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "T",
				"name": "clone",
				"header": "T clone(this O)()",
				"isStatic": false
			},
			"T create()": {
				"origin": "T create()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "T",
				"name": "create",
				"header": "T create()",
				"isStatic": false
			},
			"T clone(this O)(Json[string] data)": {
				"origin": "T clone(this O)(Json[string] data)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "T",
				"name": "clone",
				"header": "T clone(this O)(Json[string] data)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\filesystems\\uim\\filesystems\\interfaces\\filesystem.d": {
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filesystem",
		"name": "module uim.filesystems.interfaces.filesystem;\r\rimport uim.filesystems;\r\r@safe:\r\rinterface IFilesystem : IFolderManager, IFileManager, ILinkManager {\r  // #region Properties\r  // Returns rootPath of filesystem\r  string rootPath();\r\r  // Sets or returns the path of the filesystem\r  string[] path();\r  void path(string[] path);\r\r  // Returns information about type of filsystem\r  string type();\r\r  // Returns the size, in bytes, of the filesystem\r  size_t size();\r\r  // Returns the size, in bytes, of the filesystem\r  size_t capacity();\r\r  IFolder rootFolder();\r  IFilesystem filesystem();\r  string pathSeparator();\r  size_t availableDiskSpace();\r\r  bool isHidden(string aPath);\r  bool isHidden(string aPath, string aFolderName);\r  bool isHidden(string[] aPath);\r  bool isHidden(string[] aPath, string aFolderName);\r\r  string relPath(string aPath);\r  string relPath(string[] aPath);\r\r  string absolutePath(string aPath);\r  string absolutePath(string[] aPath);\r  // #endregion Properties\r\r  bool isFolder(string aPath);\r  bool isFolder(string aPath, string aFolderName);\r  bool isFolder(string[] aPath);\r  bool isFolder(string[] aPath, string aFolderName);\r\r  // Check if entry is file\r  bool isFile(string aPath);\r  bool isFile(string aPath, string aFolderName);\r  bool isFile(string[] aPath);\r  bool isFile(string[] aPath, string aFolderName);\r\r  void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max);\r\r  void writeToFile(string[] aPath, string aFileName, const void[] buffer);\r\r  void appendToFile(string[] aPath, string aFileName, const void[] buffer);\r\r  string readTextFromFile(string[] aPath, string aFileName);\r\r  void writeTextToFile(string[] aPath, string aFileName, string aText);\r\r  void appendTextToFile(string[] aPath, string aFileName, string aText);\r\r  string[] readLines(string[] aPath, string aFileName);\r\r  // Check if entry is link\r  bool isLink(string aPath);\r  bool isLink(string aPath, string aFolderName);\r  bool isLink(string[] aPath);\r  bool isLink(string[] aPath, string aFolderName);\r}\r",
		"methods": {},
		"implements": [],
		"library": "uim-filesystems"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\iterable.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.iterable",
		"name": "interface IIterable(T) {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\interfaces\\container.d": {
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.container",
		"name": "interface IContainer { // TODO: IDefinitionContainer {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\jsonbases\\uim\\jsonbases\\interfaces\\collectionmanager.d": {
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collectionmanager",
		"name": "module uim.jsonbases.interfaces.collectionmanager;\r\rimport uim.jsonbases;\r\r@safe:\rinterface IJsonCollectionManager {  \r  // Collections\r  bool hasCollections(string[] someNames...); \r  bool hasCollections(string[] someNames = null); \r  size_t countCollections(string[] someNames...); \r  size_t countCollections(string[] someNames = null); \r  string[] existingCollections(string[] someNames...); \r  string[] existingCollections(string[] someNames = null); \r  string[] collectionNames(); \r  IJsonCollection[] collections(); \r\r  // Collection\r  bool hasCollection(string aName); \r  IJsonCollection collection(string aName); \r\r  // Add collections\r  bool addCollections(IJsonCollection[] someCollections...); \r  bool addCollections(IJsonCollection[] someCollections); \r  bool addCollections(IJsonCollection[string] someCollections); \r\r  // Add collection\r  bool addCollection(IJsonCollection aCollection); \r  bool addCollection(string aName, IJsonCollection aCollection); \r\r  // Create Collections\r  IJsonCollection[] createCollections(string[] someNames...); \r  IJsonCollection[] createCollections(string[] someNames); \r\r  IJsonCollection createCollection(string aName); \r\r  // Delete\r  bool deleteCollections(string[] someNames...); \r  bool deleteCollections(string[] someNames);\r\r  bool deleteCollection(string aName); \r}",
		"methods": {},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"ILinkManager": {
		"origin": "interface ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.linkmanager",
		"name": "ILinkManager",
		"header": "ILinkManager",
		"methods": {
			"ILink[] links(string aPath)": {
				"origin": "ILink[] links(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink[]",
				"name": "links",
				"header": "ILink[] links(string aPath)",
				"isStatic": false
			},
			"size_t countLinks(string[] aPath)": {
				"origin": "size_t countLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countLinks",
				"header": "size_t countLinks(string[] aPath)",
				"isStatic": false
			},
			"bool moveLink(string[] fromPath, string[] toPath)": {
				"origin": "bool moveLink(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveLink",
				"header": "bool moveLink(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"final bool linksExists(ILink[] someLinks) {": {
				"origin": "final bool linksExists(ILink[] someLinks) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"ILink[] someLinks"
				],
				"datatype": "final",
				"name": "bool linksExists",
				"header": "final bool linksExists(ILink[] someLinks)",
				"isStatic": false
			},
			"ILink createLink(string aPath)": {
				"origin": "ILink createLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink",
				"name": "createLink",
				"header": "ILink createLink(string aPath)",
				"isStatic": false
			},
			"ILink createLink(string[] aPath)": {
				"origin": "ILink createLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink",
				"name": "createLink",
				"header": "ILink createLink(string[] aPath)",
				"isStatic": false
			},
			"bool existsLink(string[] aPath)": {
				"origin": "bool existsLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsLink",
				"header": "bool existsLink(string[] aPath)",
				"isStatic": false
			},
			"ILink link(string aPath)": {
				"origin": "ILink link(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink",
				"name": "link",
				"header": "ILink link(string aPath)",
				"isStatic": false
			},
			"ILink link(string[] aPath)": {
				"origin": "ILink link(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink",
				"name": "link",
				"header": "ILink link(string[] aPath)",
				"isStatic": false
			},
			"bool copyLink(string fromPath, string toPath)": {
				"origin": "bool copyLink(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyLink",
				"header": "bool copyLink(string fromPath, string toPath)",
				"isStatic": false
			},
			"bool copyLink(string[] fromPath, string[] toPath)": {
				"origin": "bool copyLink(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyLink",
				"header": "bool copyLink(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool removeLink(string aPath)": {
				"origin": "bool removeLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeLink",
				"header": "bool removeLink(string aPath)",
				"isStatic": false
			},
			"bool removeLinks(string[] aPath)": {
				"origin": "bool removeLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeLinks",
				"header": "bool removeLinks(string[] aPath)",
				"isStatic": false
			},
			"bool removeLink(string[] aPath)": {
				"origin": "bool removeLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeLink",
				"header": "bool removeLink(string[] aPath)",
				"isStatic": false
			},
			"bool addLink(ILink aLink)": {
				"origin": "bool addLink(ILink aLink)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ILink aLink"
				],
				"datatype": "bool",
				"name": "addLink",
				"header": "bool addLink(ILink aLink)",
				"isStatic": false
			},
			"bool removeLinks(string aPath)": {
				"origin": "bool removeLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeLinks",
				"header": "bool removeLinks(string aPath)",
				"isStatic": false
			},
			"bool existsLinks(string[] aPath)": {
				"origin": "bool existsLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsLinks",
				"header": "bool existsLinks(string[] aPath)",
				"isStatic": false
			},
			"bool moveLink(string fromPath, string toPath)": {
				"origin": "bool moveLink(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveLink",
				"header": "bool moveLink(string fromPath, string toPath)",
				"isStatic": false
			},
			"bool existsLinks(string aPath)": {
				"origin": "bool existsLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsLinks",
				"header": "bool existsLinks(string aPath)",
				"isStatic": false
			},
			"ILink[] links(string[] aPath)": {
				"origin": "ILink[] links(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink[]",
				"name": "links",
				"header": "ILink[] links(string[] aPath)",
				"isStatic": false
			},
			"size_t countLinks(string aPath)": {
				"origin": "size_t countLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "size_t",
				"name": "countLinks",
				"header": "size_t countLinks(string aPath)",
				"isStatic": false
			},
			"bool existsLink(string aPath)": {
				"origin": "bool existsLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsLink",
				"header": "bool existsLink(string aPath)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	},
	"INamed": {
		"origin": "interface INamed {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.named",
		"name": "INamed",
		"header": "INamed",
		"methods": {
			"void name(string newName)": {
				"origin": "void name(string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string newName"
				],
				"datatype": "void",
				"name": "name",
				"header": "void name(string newName)",
				"isStatic": false
			},
			"string name()": {
				"origin": "string name()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "name",
				"header": "string name()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"C:\\Users\\ONS\\PROJECTS2023\\uim\\oop\\uim\\oop\\errors\\interfaces.d": {
		"package": "uim.oop.errors",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.errors.interfaces",
		"name": "interface IError {\r",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IJsonTenantManager": {
		"origin": "interface IJsonTenantManager {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenantmanager",
		"name": "IJsonTenantManager",
		"header": "IJsonTenantManager",
		"methods": {
			"bool deleteTenant(string aName)": {
				"origin": "bool deleteTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "deleteTenant",
				"header": "bool deleteTenant(string aName)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[string] someTenants)": {
				"origin": "bool addTenants(IJsonTenant[string] someTenants)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[string] someTenants"
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[string] someTenants)",
				"isStatic": false
			},
			"bool hasTenant(string aName)": {
				"origin": "bool hasTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "hasTenant",
				"header": "bool hasTenant(string aName)",
				"isStatic": false
			},
			"IJsonTenant createTenant(string aName)": {
				"origin": "IJsonTenant createTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonTenant",
				"name": "createTenant",
				"header": "IJsonTenant createTenant(string aName)",
				"isStatic": false
			},
			"string[] existingTenants(string[] someNames = null)": {
				"origin": "string[] existingTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "string[]",
				"name": "existingTenants",
				"header": "string[] existingTenants(string[] someNames = null)",
				"isStatic": false
			},
			"IJsonTenant[] tenants()": {
				"origin": "IJsonTenant[] tenants()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonTenant[]",
				"name": "tenants",
				"header": "IJsonTenant[] tenants()",
				"isStatic": false
			},
			"bool addTenant(IJsonTenant aTenant)": {
				"origin": "bool addTenant(IJsonTenant aTenant)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant aTenant"
				],
				"datatype": "bool",
				"name": "addTenant",
				"header": "bool addTenant(IJsonTenant aTenant)",
				"isStatic": false
			},
			"bool hasTenants(string[] someNames...)": {
				"origin": "bool hasTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "hasTenants",
				"header": "bool hasTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool hasTenants(string[] someNames = null)": {
				"origin": "bool hasTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "bool",
				"name": "hasTenants",
				"header": "bool hasTenants(string[] someNames = null)",
				"isStatic": false
			},
			"size_t countTenants(string[] someNames...)": {
				"origin": "size_t countTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "size_t",
				"name": "countTenants",
				"header": "size_t countTenants(string[] someNames...)",
				"isStatic": false
			},
			"string[] tenantNames()": {
				"origin": "string[] tenantNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "tenantNames",
				"header": "string[] tenantNames()",
				"isStatic": false
			},
			"IJsonTenant[] createTenants(string[] someNames...)": {
				"origin": "IJsonTenant[] createTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "IJsonTenant[]",
				"name": "createTenants",
				"header": "IJsonTenant[] createTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[] someTenants)": {
				"origin": "bool addTenants(IJsonTenant[] someTenants)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[] someTenants"
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[] someTenants)",
				"isStatic": false
			},
			"IJsonTenant tenant(string aName)": {
				"origin": "IJsonTenant tenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonTenant",
				"name": "tenant",
				"header": "IJsonTenant tenant(string aName)",
				"isStatic": false
			},
			"size_t countTenants(string[] someNames = null)": {
				"origin": "size_t countTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "size_t",
				"name": "countTenants",
				"header": "size_t countTenants(string[] someNames = null)",
				"isStatic": false
			},
			"IJsonTenant[] createTenants(string[] someNames)": {
				"origin": "IJsonTenant[] createTenants(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "IJsonTenant[]",
				"name": "createTenants",
				"header": "IJsonTenant[] createTenants(string[] someNames)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[] someTenants...)": {
				"origin": "bool addTenants(IJsonTenant[] someTenants...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[] someTenants..."
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[] someTenants...)",
				"isStatic": false
			},
			"string[] existingTenants(string[] someNames...)": {
				"origin": "string[] existingTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "string[]",
				"name": "existingTenants",
				"header": "string[] existingTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool addTenant(string aName, IJsonTenant aTenant)": {
				"origin": "bool addTenant(string aName, IJsonTenant aTenant)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IJsonTenant aTenant"
				],
				"datatype": "bool",
				"name": "addTenant",
				"header": "bool addTenant(string aName, IJsonTenant aTenant)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"IFileManager": {
		"origin": "interface IFileManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filemanager",
		"name": "IFileManager",
		"header": "IFileManager",
		"methods": {
			"bool copyFile(string[] fromPath, string[] toPath)": {
				"origin": "bool copyFile(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFile",
				"header": "bool copyFile(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool copyFile(string fromPath, string toPath)": {
				"origin": "bool copyFile(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyFile",
				"header": "bool copyFile(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFile[] files(string[] aPath, string aFileName)": {
				"origin": "IFile[] files(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool existsFile(string aPath, string aFileName)": {
				"origin": "bool existsFile(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool renameFile(string aPath, string oldName, string newName)": {
				"origin": "bool renameFile(string aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool moveFile(string fromPath, string toPath)": {
				"origin": "bool moveFile(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveFile",
				"header": "bool moveFile(string fromPath, string toPath)",
				"isStatic": false
			},
			"final bool filesExists(IFile[] files) {": {
				"origin": "final bool filesExists(IFile[] files) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFile[] files"
				],
				"datatype": "final",
				"name": "bool filesExists",
				"header": "final bool filesExists(IFile[] files)",
				"isStatic": false
			},
			"size_t countFiles(string[] aPath)": {
				"origin": "size_t countFiles(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string[] aPath)",
				"isStatic": false
			},
			"IFile file(string aPathOrName)": {
				"origin": "IFile file(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string aPathOrName)",
				"isStatic": false
			},
			"IFile file(string aPath, string aFileName)": {
				"origin": "IFile file(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string aPath, string aFileName)",
				"isStatic": false
			},
			"IFile[] files(string aPath, string aFileName)": {
				"origin": "IFile[] files(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool removeFile(string aPath, string aFolderName)": {
				"origin": "bool removeFile(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool hasFiles(string[] aPath)": {
				"origin": "bool hasFiles(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string[] aPath)",
				"isStatic": false
			},
			"bool existsFile(string[] aPath, string aFileName)": {
				"origin": "bool existsFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool renameFile(string[] aPath, string oldName, string newName)": {
				"origin": "bool renameFile(string[] aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string[] aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool removeFile(string[] aPath)": {
				"origin": "bool removeFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string[] aPath)",
				"isStatic": false
			},
			"bool existsFile(string[] aPath)": {
				"origin": "bool existsFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string[] aPath)",
				"isStatic": false
			},
			"bool hasFiles(string aPath, string aFileName)": {
				"origin": "bool hasFiles(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string aPath, string aFileName)",
				"isStatic": false
			},
			"IFile file(string[] aPath)": {
				"origin": "IFile file(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string[] aPath)",
				"isStatic": false
			},
			"IFile createFile(string aPath, string aFileName)": {
				"origin": "IFile createFile(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string aPath, string aFileName)",
				"isStatic": false
			},
			"size_t countFiles(string aPath, string aFileName)": {
				"origin": "size_t countFiles(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool hasFiles(string aPathOrName)": {
				"origin": "bool hasFiles(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string aPathOrName)",
				"isStatic": false
			},
			"IFile createFile(string aPathOrName)": {
				"origin": "IFile createFile(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string aPathOrName)",
				"isStatic": false
			},
			"bool removeFile(string aPath)": {
				"origin": "bool removeFile(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string aPath)",
				"isStatic": false
			},
			"IFile file(string[] aPath, string aFileName)": {
				"origin": "IFile file(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"IFile createFile(string[] aPath)": {
				"origin": "IFile createFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string[] aPath)",
				"isStatic": false
			},
			"IFile createFile(string[] aPath, string aFileName)": {
				"origin": "IFile createFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool hasFiles(string[] aPath, string aFileName)": {
				"origin": "bool hasFiles(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool removeFile(string[] aPath, string aFolderName)": {
				"origin": "bool removeFile(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFile(string aPathOrName)": {
				"origin": "bool existsFile(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string aPathOrName)",
				"isStatic": false
			},
			"bool renameFile(string oldPathAndName, string newName)": {
				"origin": "bool renameFile(string oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string oldPathAndName, string newName)",
				"isStatic": false
			},
			"size_t countFiles(string aPathOrName)": {
				"origin": "size_t countFiles(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string aPathOrName)",
				"isStatic": false
			},
			"bool moveFile(string[] fromPath, string[] toPath)": {
				"origin": "bool moveFile(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFile",
				"header": "bool moveFile(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"size_t countFiles(string[] aPath, string aFileName)": {
				"origin": "size_t countFiles(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"IFile[] files()": {
				"origin": "IFile[] files()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files()",
				"isStatic": false
			},
			"bool renameFile(string[] oldPathAndName, string newName)": {
				"origin": "bool renameFile(string[] oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string[] oldPathAndName, string newName)",
				"isStatic": false
			},
			"IFile[] files(string[] aPath)": {
				"origin": "IFile[] files(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string[] aPath)",
				"isStatic": false
			},
			"bool addFile(IFile aFile)": {
				"origin": "bool addFile(IFile aFile)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFile aFile"
				],
				"datatype": "bool",
				"name": "addFile",
				"header": "bool addFile(IFile aFile)",
				"isStatic": false
			},
			"IFile[] files(string aPathOrName)": {
				"origin": "IFile[] files(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string aPathOrName)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	}
}
