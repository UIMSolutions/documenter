{
	"II18NFormatter": {
		"origin": "interface II18NFormatter {",
		"package": "uim.i18n.interfaces",
		"visibility": "public",
		"comments": [
			"Formatter Interface"
		],
		"namespace": "uim.i18n.interfaces.formatter",
		"name": "II18NFormatter",
		"header": "II18NFormatter",
		"methods": {
			"string format(string messageLocale, string messageToTranslate, string[] tokenValues)": {
				"origin": "string format(string messageLocale, string messageToTranslate, string[] tokenValues)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string messageLocale",
					"string messageToTranslate",
					"string[] tokenValues"
				],
				"datatype": "string",
				"name": "format",
				"header": "string format(string messageLocale, string messageToTranslate, string[] tokenValues)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-i18n"
	},
	"ICommand": {
		"origin": "interface ICommand : INamed {",
		"package": "uim.oop.commands",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.commands.interfaces",
		"name": "ICommand",
		"header": "ICommand : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IWidget": {
		"origin": "interface IWidget {",
		"package": "uim.views.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for input widgets."
		],
		"namespace": "uim.views.interfaces.widget",
		"name": "IWidget",
		"header": "IWidget",
		"methods": {
			"string render(Json[string] dataToRender, IContext formContext)": {
				"origin": "string render(Json[string] dataToRender, IContext formContext)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] dataToRender",
					"IContext formContext"
				],
				"datatype": "string",
				"name": "render",
				"header": "string render(Json[string] dataToRender, IContext formContext)",
				"isStatic": false
			},
			"string[] secureFields(Json[string] dataToRender)": {
				"origin": "string[] secureFields(Json[string] dataToRender)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] dataToRender"
				],
				"datatype": "string[]",
				"name": "secureFields",
				"header": "string[] secureFields(Json[string] dataToRender)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-views"
	},
	"IServerRequest": {
		"origin": "interface IServerRequest {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.request",
		"name": "IServerRequest",
		"header": "IServerRequest",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IDecorator": {
		"origin": "interface IDecorator {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [
			"Common interface for event decorators"
		],
		"namespace": "uim.events.interfaces.decorator",
		"name": "IDecorator",
		"header": "IDecorator",
		"methods": {},
		"implements": [],
		"library": "uim-events"
	},
	"IView": {
		"origin": "interface IView : INamed {",
		"package": "uim.views.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.views.interfaces.view",
		"name": "IView",
		"header": "IView : INamed",
		"methods": {
			"IView enableAutoLayout(bool enable = true)": {
				"origin": "IView enableAutoLayout(bool enable = true)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"bool enable = true"
				],
				"datatype": "IView",
				"name": "enableAutoLayout",
				"header": "IView enableAutoLayout(bool enable = true)",
				"isStatic": false
			},
			"string currentType()": {
				"origin": "string currentType()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "currentType",
				"header": "string currentType()",
				"isStatic": false
			},
			"IView disableAutoLayout()": {
				"origin": "IView disableAutoLayout()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IView",
				"name": "disableAutoLayout",
				"header": "IView disableAutoLayout()",
				"isStatic": false
			},
			"string[] blockNames()": {
				"origin": "string[] blockNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "blockNames",
				"header": "string[] blockNames()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-views"
	},
	"IModel": {
		"origin": "interface IModel {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.model",
		"name": "IModel",
		"header": "IModel",
		"methods": {
			"IModel clone()": {
				"origin": "IModel clone()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IModel",
				"name": "clone",
				"header": "IModel clone()",
				"isStatic": false
			},
			"IModelManager manager()": {
				"origin": "IModelManager manager()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IModelManager",
				"name": "manager",
				"header": "IModelManager manager()",
				"isStatic": false
			},
			"string registerPath()": {
				"origin": "string registerPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "registerPath",
				"header": "string registerPath()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-models"
	},
	"IApp": {
		"origin": "interface IApp : IApplication, IMVCObject, IRequestHandler, IControllerManager, ISessionManager, IViewManager, IRouteManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.app",
		"name": "IApp",
		"header": "IApp : IApplication, IMVCObject, IRequestHandler, IControllerManager, ISessionManager, IViewManager, IRouteManager",
		"methods": {
			"IAppManager manager()": {
				"origin": "IAppManager manager()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IAppManager",
				"name": "manager",
				"header": "IAppManager manager()",
				"isStatic": false
			},
			"void manager(IAppManager aManager)": {
				"origin": "void manager(IAppManager aManager)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IAppManager aManager"
				],
				"datatype": "void",
				"name": "manager",
				"header": "void manager(IAppManager aManager)",
				"isStatic": false
			},
			"IEntityBase entityBase()": {
				"origin": "IEntityBase entityBase()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEntityBase",
				"name": "entityBase",
				"header": "IEntityBase entityBase()",
				"isStatic": false
			}
		},
		"implements": [
			"IApplication",
			"IMVCObject",
			"IRequestHandler",
			"IControllerManager",
			"ISessionManager",
			"IViewManager",
			"IRouteManager"
		],
		"library": "uim-apps"
	},
	"IParser": {
		"origin": "interface IParser : INamed {",
		"package": "uim.oop.parsers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.parsers.interfaces",
		"name": "IParser",
		"header": "IParser : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IControllerContainer": {
		"origin": "interface IControllerContainer {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.controllercontainer",
		"name": "IControllerContainer",
		"header": "IControllerContainer",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IConsoleCommandFactory": {
		"origin": "interface IConsoleCommandFactory {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for abstracting creation of command and shell instances."
		],
		"namespace": "uim.consoles.interfaces.commandfactory",
		"name": "IConsoleCommandFactory",
		"header": "IConsoleCommandFactory",
		"methods": {
			"IConsoleCommand create(string commandclassname)": {
				"origin": "IConsoleCommand create(string commandclassname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string commandclassname"
				],
				"datatype": "IConsoleCommand",
				"name": "create",
				"header": "IConsoleCommand create(string commandclassname)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-consoles"
	},
	"IFolder": {
		"origin": "interface IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.folder",
		"name": "IFolder",
		"header": "IFolder : IFilesystemEntry, IFolderManager, IFileManager, ILinkManager",
		"methods": {
			"long accessedOn()": {
				"origin": "long accessedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "accessedOn",
				"header": "long accessedOn()",
				"isStatic": false
			},
			"bool hasEntries()": {
				"origin": "bool hasEntries()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "hasEntries",
				"header": "bool hasEntries()",
				"isStatic": false
			},
			"bool remove()": {
				"origin": "bool remove()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "remove",
				"header": "bool remove()",
				"isStatic": false
			},
			"IDrive drive()": {
				"origin": "IDrive drive()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IDrive",
				"name": "drive",
				"header": "IDrive drive()",
				"isStatic": false
			},
			"long modifiedOn()": {
				"origin": "long modifiedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "modifiedOn",
				"header": "long modifiedOn()",
				"isStatic": false
			},
			"void attributes(long newAttributes)": {
				"origin": "void attributes(long newAttributes)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"long newAttributes"
				],
				"datatype": "void",
				"name": "attributes",
				"header": "void attributes(long newAttributes)",
				"isStatic": false
			},
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"long createdOn()": {
				"origin": "long createdOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "createdOn",
				"header": "long createdOn()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"long attributes()": {
				"origin": "long attributes()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "attributes",
				"header": "long attributes()",
				"isStatic": false
			},
			"bool isRootFolder()": {
				"origin": "bool isRootFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isRootFolder",
				"header": "bool isRootFolder()",
				"isStatic": false
			},
			"bool isFolder()": {
				"origin": "bool isFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry",
			"IFolderManager",
			"IFileManager",
			"ILinkManager"
		],
		"library": "uim-filesystems"
	},
	"IRouteManager": {
		"origin": "interface IRouteManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.routemanager",
		"name": "IRouteManager",
		"header": "IRouteManager",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IConsoleApplication": {
		"origin": "interface IConsoleApplication {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the console runner depend on."
		],
		"namespace": "uim.oop.interfaces.consoleapplication",
		"name": "IConsoleApplication",
		"header": "IConsoleApplication",
		"methods": {
			"void bootstrap()": {
				"origin": "void bootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IConfiguration": {
		"origin": "interface IConfiguration : INamed {",
		"package": "uim.oop.configurations",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.configurations.interfaces",
		"name": "IConfiguration",
		"header": "IConfiguration : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IFormHelper": {
		"origin": "interface IFormHelper {",
		"package": "uim.views.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for FormHelper context implementations."
		],
		"namespace": "uim.views.interfaces.helper",
		"name": "IFormHelper",
		"header": "IFormHelper",
		"methods": {},
		"implements": [],
		"library": "uim-views"
	},
	"IEntity": {
		"origin": "interface IEntity : IElement {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.entity",
		"name": "IEntity",
		"header": "IEntity : IElement",
		"methods": {
			"string description()": {
				"origin": "string description()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "description",
				"header": "string description()",
				"isStatic": false
			},
			"string versionDescription()": {
				"origin": "string versionDescription()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "versionDescription",
				"header": "string versionDescription()",
				"isStatic": false
			}
		},
		"implements": [
			"IElement"
		],
		"library": "uim-models"
	},
	"IPizzaIngredientFactory": {
		"origin": "public interface IPizzaIngredientFactory {",
		"package": "uim.oop.patterns.creationals.abstractfactories",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.patterns.creationals.abstractfactories.version2",
		"name": "IPizzaIngredientFactory",
		"header": "IPizzaIngredientFactory",
		"methods": {
			"public IDough createDough()": {
				"origin": "public IDough createDough()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "IDough createDough",
				"header": "public IDough createDough()",
				"isStatic": false
			},
			"public ICheese createCheese()": {
				"origin": "public ICheese createCheese()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "ICheese createCheese",
				"header": "public ICheese createCheese()",
				"isStatic": false
			},
			"public IClam createClam()": {
				"origin": "public IClam createClam()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "IClam createClam",
				"header": "public IClam createClam()",
				"isStatic": false
			},
			"void setName(string name) {": {
				"origin": "void setName(string name) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string name"
				],
				"datatype": "void",
				"name": "setName",
				"header": "void setName(string name)",
				"isStatic": false
			},
			"void box() {": {
				"origin": "void box() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "box",
				"header": "void box()",
				"isStatic": false
			},
			"public ISauce createSauce() {": {
				"origin": "public ISauce createSauce() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "ISauce createSauce",
				"header": "public ISauce createSauce()",
				"isStatic": false
			},
			"void cut() {": {
				"origin": "void cut() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "cut",
				"header": "void cut()",
				"isStatic": false
			},
			"public ICheese createCheese() {": {
				"origin": "public ICheese createCheese() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "ICheese createCheese",
				"header": "public ICheese createCheese()",
				"isStatic": false
			},
			"this(IPizzaIngredientFactory ingredientFactory) {": {
				"origin": "this(IPizzaIngredientFactory ingredientFactory) ",
				"isFinal": false,
				"isProperty": false,
				"datatype": null,
				"name": "this",
				"header": "this(IPizzaIngredientFactory ingredientFactory)",
				"isStatic": false
			},
			"public IClam createClam() {": {
				"origin": "public IClam createClam() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "IClam createClam",
				"header": "public IClam createClam()",
				"isStatic": false
			},
			"public DPizza orderPizza(string type) {": {
				"origin": "public DPizza orderPizza(string type) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string type"
				],
				"datatype": "public",
				"name": "DPizza orderPizza",
				"header": "public DPizza orderPizza(string type)",
				"isStatic": false
			},
			"override void prepare() {": {
				"origin": "override void prepare() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "override",
				"name": "void prepare",
				"header": "override void prepare()",
				"isStatic": false
			},
			"public IDough createDough() {": {
				"origin": "public IDough createDough() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "IDough createDough",
				"header": "public IDough createDough()",
				"isStatic": false
			},
			"abstract void prepare()": {
				"origin": "abstract void prepare()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "abstract",
				"name": "void prepare",
				"header": "abstract void prepare()",
				"isStatic": false
			},
			"protected abstract DPizza createPizza(string type)": {
				"origin": "protected abstract DPizza createPizza(string type)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string type"
				],
				"datatype": "protected",
				"name": "abstract DPizza createPizza",
				"header": "protected abstract DPizza createPizza(string type)",
				"isStatic": false
			},
			"string getName() {": {
				"origin": "string getName() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "getName",
				"header": "string getName()",
				"isStatic": false
			},
			"override protected DPizza createPizza(string item) {": {
				"origin": "override protected DPizza createPizza(string item) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string item"
				],
				"datatype": "override",
				"name": "protected DPizza createPizza",
				"header": "override protected DPizza createPizza(string item)",
				"isStatic": false
			},
			"public ISauce createSauce()": {
				"origin": "public ISauce createSauce()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "public",
				"name": "ISauce createSauce",
				"header": "public ISauce createSauce()",
				"isStatic": false
			},
			"void bake() {": {
				"origin": "void bake() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bake",
				"header": "void bake()",
				"isStatic": false
			},
			"this() {": {
				"origin": "this() ",
				"isFinal": false,
				"isProperty": false,
				"datatype": null,
				"name": "this",
				"header": "this()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IErrorController": {
		"origin": "interface IErrorController {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.errors.interfaces.controller",
		"name": "IErrorController",
		"header": "IErrorController",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"IContext": {
		"origin": "interface IContext {",
		"package": "uim.views.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for FormHelper context implementations."
		],
		"namespace": "uim.views.interfaces.context",
		"name": "IContext",
		"header": "IContext",
		"methods": {
			"size_t maxLength(string fieldName)": {
				"origin": "size_t maxLength(string fieldName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldName"
				],
				"datatype": "size_t",
				"name": "maxLength",
				"header": "size_t maxLength(string fieldName)",
				"isStatic": false
			},
			"string[] primaryKeys()": {
				"origin": "string[] primaryKeys()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "primaryKeys",
				"header": "string[] primaryKeys()",
				"isStatic": false
			},
			"bool isPrimaryKey(string[] fieldPath)": {
				"origin": "bool isPrimaryKey(string[] fieldPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fieldPath"
				],
				"datatype": "bool",
				"name": "isPrimaryKey",
				"header": "bool isPrimaryKey(string[] fieldPath)",
				"isStatic": false
			},
			"bool isCreate()": {
				"origin": "bool isCreate()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isCreate",
				"header": "bool isCreate()",
				"isStatic": false
			},
			"Json val(string fieldPath, Json[string] options = null)": {
				"origin": "Json val(string fieldPath, Json[string] options = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldPath",
					"Json[string] options = null"
				],
				"datatype": "Json",
				"name": "val",
				"header": "Json val(string fieldPath, Json[string] options = null)",
				"isStatic": false
			},
			"string getRequiredMessage(string fieldPath)": {
				"origin": "string getRequiredMessage(string fieldPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldPath"
				],
				"datatype": "string",
				"name": "getRequiredMessage",
				"header": "string getRequiredMessage(string fieldPath)",
				"isStatic": false
			},
			"bool hasError(string fieldPath)": {
				"origin": "bool hasError(string fieldPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldPath"
				],
				"datatype": "bool",
				"name": "hasError",
				"header": "bool hasError(string fieldPath)",
				"isStatic": false
			},
			"bool isPrimaryKey(string fieldName)": {
				"origin": "bool isPrimaryKey(string fieldName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldName"
				],
				"datatype": "bool",
				"name": "isPrimaryKey",
				"header": "bool isPrimaryKey(string fieldName)",
				"isStatic": false
			},
			"bool isRequired(string[] fieldPath)": {
				"origin": "bool isRequired(string[] fieldPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fieldPath"
				],
				"datatype": "bool",
				"name": "isRequired",
				"header": "bool isRequired(string[] fieldPath)",
				"isStatic": false
			},
			"string type(string fieldPath)": {
				"origin": "string type(string fieldPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldPath"
				],
				"datatype": "string",
				"name": "type",
				"header": "string type(string fieldPath)",
				"isStatic": false
			},
			"bool isRequired(string fieldName)": {
				"origin": "bool isRequired(string fieldName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fieldName"
				],
				"datatype": "bool",
				"name": "isRequired",
				"header": "bool isRequired(string fieldName)",
				"isStatic": false
			},
			"string[] fieldNames()": {
				"origin": "string[] fieldNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "fieldNames",
				"header": "string[] fieldNames()",
				"isStatic": false
			},
			"Json[string] data()": {
				"origin": "Json[string] data()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json[string]",
				"name": "data",
				"header": "Json[string] data()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-views"
	},
	"IError": {
		"origin": "interface IError {",
		"package": "uim.oop.errors",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.errors.interfaces",
		"name": "IError",
		"header": "IError",
		"methods": {
			"ERRORS code()": {
				"origin": "ERRORS code()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "ERRORS",
				"name": "code",
				"header": "ERRORS code()",
				"isStatic": false
			},
			"string message()": {
				"origin": "string message()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "message",
				"header": "string message()",
				"isStatic": false
			},
			"string fileName()": {
				"origin": "string fileName()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "fileName",
				"header": "string fileName()",
				"isStatic": false
			},
			"void message(string message)": {
				"origin": "void message(string message)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string message"
				],
				"datatype": "void",
				"name": "message",
				"header": "void message(string message)",
				"isStatic": false
			},
			"size_t[string][] trace()": {
				"origin": "size_t[string][] trace()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t[string][]",
				"name": "trace",
				"header": "size_t[string][] trace()",
				"isStatic": false
			},
			"size_t lineNumber()": {
				"origin": "size_t lineNumber()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "lineNumber",
				"header": "size_t lineNumber()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IForm": {
		"origin": "interface IForm : INamed {",
		"package": "uim.views.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.views.interfaces.form",
		"name": "IForm",
		"header": "IForm : INamed",
		"methods": {
			"mixin(IProperty!(\"Json[string]\", \"data\"))": {
				"origin": "mixin(IProperty!(\"Json[string]\", \"data\"))",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "mixin(IProperty!(\"Json[string]\",",
				"name": "",
				"header": "mixin(IProperty!(\"Json[string]\", \"data\"))",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-views"
	},
	"IErrorMiddleware /* */": {
		"origin": "interface IErrorMiddleware {}/*  */",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.errors.interfaces.middleware",
		"name": "IErrorMiddleware /* */",
		"header": "IErrorMiddleware /* */",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"I_Collection": {
		"origin": "interface I_Collection {",
		"package": "uim.collections.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Describes the methods a Collection should implement. A collection is an immutable",
			"list of elements exposing a number of traversing and extracting method for",
			"generating other collections.",
			""
		],
		"namespace": "uim.collections.interfaces.collection",
		"name": "I_Collection",
		"header": "I_Collection",
		"methods": {},
		"implements": [],
		"library": "uim-collections"
	},
	"IPaginated": {
		"origin": "interface IPaginated {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.paginated",
		"name": "IPaginated",
		"header": "IPaginated",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"ILink": {
		"origin": "interface ILink : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.link",
		"name": "ILink",
		"header": "ILink : IFilesystemEntry",
		"methods": {
			"bool isLink()": {
				"origin": "bool isLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink()",
				"isStatic": false
			},
			"bool isFileLink()": {
				"origin": "bool isFileLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFileLink",
				"header": "bool isFileLink()",
				"isStatic": false
			},
			"bool isFolderLink()": {
				"origin": "bool isFolderLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolderLink",
				"header": "bool isFolderLink()",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"ILogger": {
		"origin": "interface ILogger : INamed {",
		"package": "uim.logging.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.logging.interfaces.logger",
		"name": "ILogger",
		"header": "ILogger : INamed",
		"methods": {
			"string[] scopes()": {
				"origin": "string[] scopes()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "scopes",
				"header": "string[] scopes()",
				"isStatic": false
			},
			"void critical(string logMessage, Json[string] logContext = null)": {
				"origin": "void critical(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "critical",
				"header": "void critical(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"string[] levels()": {
				"origin": "string[] levels()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "levels",
				"header": "string[] levels()",
				"isStatic": false
			},
			"void error(string logMessage, Json[string] logContext = null)": {
				"origin": "void error(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "error",
				"header": "void error(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void emergency(string logMessage, Json[string] logContext = null)": {
				"origin": "void emergency(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "emergency",
				"header": "void emergency(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void alert(string logMessage, Json[string] logContext = null)": {
				"origin": "void alert(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "alert",
				"header": "void alert(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void info(string logMessage, Json[string] logContext = null)": {
				"origin": "void info(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "info",
				"header": "void info(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void debugInfo(string logMessage, Json[string] logContext = null) */": {
				"origin": "void debugInfo(string logMessage, Json[string] logContext = null) */",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null) */"
				],
				"datatype": "void",
				"name": "debugInfo",
				"header": "void debugInfo(string logMessage, Json[string] logContext = null) */",
				"isStatic": false
			},
			"void log(LogLevels logLevel, string logMessage, Json[string] logContext = null)": {
				"origin": "void log(LogLevels logLevel, string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"LogLevels logLevel",
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "log",
				"header": "void log(LogLevels logLevel, string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void warning(string logMessage, Json[string] logContext = null)": {
				"origin": "void warning(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "warning",
				"header": "void warning(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			},
			"void notice(string logMessage, Json[string] logContext = null)": {
				"origin": "void notice(string logMessage, Json[string] logContext = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string logMessage",
					"Json[string] logContext = null"
				],
				"datatype": "void",
				"name": "notice",
				"header": "void notice(string logMessage, Json[string] logContext = null)",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-logging"
	},
	"IController": {
		"origin": "interface IController {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.controller",
		"name": "IController",
		"header": "IController",
		"methods": {
			"IController addView(IView newView)": {
				"origin": "IController addView(IView newView)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IView newView"
				],
				"datatype": "IController",
				"name": "addView",
				"header": "IController addView(IView newView)",
				"isStatic": false
			},
			"IController orderViews()": {
				"origin": "IController orderViews()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IController",
				"name": "orderViews",
				"header": "IController orderViews()",
				"isStatic": false
			},
			"IView[] views()": {
				"origin": "IView[] views()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IView[]",
				"name": "views",
				"header": "IView[] views()",
				"isStatic": false
			},
			"IResponse response(Json[string] options = null)": {
				"origin": "IResponse response(Json[string] options = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] options = null"
				],
				"datatype": "IResponse",
				"name": "response",
				"header": "IResponse response(Json[string] options = null)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-controllers"
	},
	"IAdapter": {
		"origin": "interface IAdapter {",
		"package": "uim.http.interfaces",
		"visibility": "public",
		"comments": [
			"Http client adapter interface."
		],
		"namespace": "uim.http.interfaces.adapter",
		"name": "IAdapter",
		"header": "IAdapter",
		"methods": {
			"IResponse[] send(IRequest requestObjectToSend, Json[string] streamOptions = null)": {
				"origin": "IResponse[] send(IRequest requestObjectToSend, Json[string] streamOptions = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IRequest requestObjectToSend",
					"Json[string] streamOptions = null"
				],
				"datatype": "IResponse[]",
				"name": "send",
				"header": "IResponse[] send(IRequest requestObjectToSend, Json[string] streamOptions = null)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-http"
	},
	"IValidator": {
		"origin": "interface IValidator : INamed {",
		"package": "uim.oop.validators",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.validators.interfaces",
		"name": "IValidator",
		"header": "IValidator : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IViewContainer": {
		"origin": "interface IViewContainer {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.viewcontainer",
		"name": "IViewContainer",
		"header": "IViewContainer",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"II18NMiddleware": {
		"origin": "interface II18NMiddleware {",
		"package": "uim.i18n.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.i18n.interfaces.middleware",
		"name": "II18NMiddleware",
		"header": "II18NMiddleware",
		"methods": {},
		"implements": [],
		"library": "uim-i18n"
	},
	"IHttpApplication": {
		"origin": "interface IHttpApplication : IRequestHandler {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface defining the methods that the http server depend on."
		],
		"namespace": "uim.oop.interfaces.httpapplication",
		"name": "IHttpApplication",
		"header": "IHttpApplication : IRequestHandler",
		"methods": {
			"void bootstrap()": {
				"origin": "void bootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IRequestHandler"
		],
		"library": "uim-oop"
	},
	"ICookie": {
		"origin": "interface ICookie : INamed {",
		"package": "uim.http.interfaces",
		"visibility": "public",
		"comments": [
			"Cookie Interface"
		],
		"namespace": "uim.http.interfaces.cookie",
		"name": "ICookie",
		"header": "ICookie : INamed",
		"methods": {
			"static auto withDomain(string domainName)": {
				"origin": "static auto withDomain(string domainName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string domainName"
				],
				"datatype": "auto",
				"name": "withDomain",
				"header": "auto withDomain(string domainName)",
				"isStatic": false
			},
			"bool isSecure()": {
				"origin": "bool isSecure()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isSecure",
				"header": "bool isSecure()",
				"isStatic": false
			},
			"string getScalarValue()": {
				"origin": "string getScalarValue()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "getScalarValue",
				"header": "string getScalarValue()",
				"isStatic": false
			},
			"static auto withPath(string aPath)": {
				"origin": "static auto withPath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "auto",
				"name": "withPath",
				"header": "auto withPath(string aPath)",
				"isStatic": false
			},
			"string domain()": {
				"origin": "string domain()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "domain",
				"header": "string domain()",
				"isStatic": false
			},
			"string getFormattedExpires()": {
				"origin": "string getFormattedExpires()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "getFormattedExpires",
				"header": "string getFormattedExpires()",
				"isStatic": false
			},
			"static void withName(string aName)": {
				"origin": "static void withName(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "void",
				"name": "withName",
				"header": "void withName(string aName)",
				"isStatic": false
			},
			"static withValue(string[]/* |float|bool */ aValue)": {
				"origin": "static withValue(string[]/* |float|bool */ aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "withValue(string[]/*",
				"name": "",
				"header": "withValue(string[]/* |float|bool */ aValue)",
				"isStatic": false
			},
			"bool isHttpOnly()": {
				"origin": "bool isHttpOnly()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isHttpOnly",
				"header": "bool isHttpOnly()",
				"isStatic": false
			},
			"Json[string] toArray()": {
				"origin": "Json[string] toArray()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json[string]",
				"name": "toArray",
				"header": "Json[string] toArray()",
				"isStatic": false
			},
			"string getPath()": {
				"origin": "string getPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "getPath",
				"header": "string getPath()",
				"isStatic": false
			},
			"string id()": {
				"origin": "string id()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "id",
				"header": "string id()",
				"isStatic": false
			},
			"string[] getValue()": {
				"origin": "string[] getValue()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "getValue",
				"header": "string[] getValue()",
				"isStatic": false
			},
			"static void withHttpOnly(bool httpOnly)": {
				"origin": "static void withHttpOnly(bool httpOnly)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"bool httpOnly"
				],
				"datatype": "void",
				"name": "withHttpOnly",
				"header": "void withHttpOnly(bool httpOnly)",
				"isStatic": false
			},
			"static void withSecure(bool secure)": {
				"origin": "static void withSecure(bool secure)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"bool secure"
				],
				"datatype": "void",
				"name": "withSecure",
				"header": "void withSecure(bool secure)",
				"isStatic": false
			},
			"Json[string] options()": {
				"origin": "Json[string] options()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json[string]",
				"name": "options",
				"header": "Json[string] options()",
				"isStatic": false
			},
			"IDateTime getExpiry()": {
				"origin": "IDateTime getExpiry()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IDateTime",
				"name": "getExpiry",
				"header": "IDateTime getExpiry()",
				"isStatic": false
			},
			"static auto withNeverExpire()": {
				"origin": "static auto withNeverExpire()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "auto",
				"name": "withNeverExpire",
				"header": "auto withNeverExpire()",
				"isStatic": false
			},
			"static auto withExpiry(IDateTime dateTime)": {
				"origin": "static auto withExpiry(IDateTime dateTime)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IDateTime dateTime"
				],
				"datatype": "auto",
				"name": "withExpiry",
				"header": "auto withExpiry(IDateTime dateTime)",
				"isStatic": false
			},
			"static auto withSameSite(/* SameSiteEnum| */string sameSite)": {
				"origin": "static auto withSameSite(/* SameSiteEnum| */string sameSite)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"/* SameSiteEnum| */string sameSite"
				],
				"datatype": "auto",
				"name": "withSameSite",
				"header": "auto withSameSite(/* SameSiteEnum| */string sameSite)",
				"isStatic": false
			},
			"int getExpiresTimestamp()": {
				"origin": "int getExpiresTimestamp()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "int",
				"name": "getExpiresTimestamp",
				"header": "int getExpiresTimestamp()",
				"isStatic": false
			},
			"string toHeaderValue()": {
				"origin": "string toHeaderValue()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toHeaderValue",
				"header": "string toHeaderValue()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-http"
	},
	"IAppContainer": {
		"origin": "interface IAppContainer {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.appcontainer",
		"name": "IAppContainer",
		"header": "IAppContainer",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IApplication": {
		"origin": "interface IApplication {}",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.application",
		"name": "IApplication",
		"header": "IApplication",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IEntityBase": {
		"origin": "interface IEntityBase {",
		"package": "uim.entitybases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.entitybases.interfaces.base",
		"name": "IEntityBase",
		"header": "IEntityBase",
		"methods": {},
		"implements": [],
		"library": "uim-entitybases"
	},
	"IFile": {
		"origin": "interface IFile : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.file",
		"name": "IFile",
		"header": "IFile : IFilesystemEntry",
		"methods": {
			"void appendContent(const void[] content)": {
				"origin": "void appendContent(const void[] content)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"const void[] content"
				],
				"datatype": "void",
				"name": "appendContent",
				"header": "void appendContent(const void[] content)",
				"isStatic": false
			},
			"long accessedOn()": {
				"origin": "long accessedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "accessedOn",
				"header": "long accessedOn()",
				"isStatic": false
			},
			"bool move(IFolder toFolder)": {
				"origin": "bool move(IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(IFolder toFolder)",
				"isStatic": false
			},
			"bool remove()": {
				"origin": "bool remove()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "remove",
				"header": "bool remove()",
				"isStatic": false
			},
			"bool copy(IFolder toFolder)": {
				"origin": "bool copy(IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(IFolder toFolder)",
				"isStatic": false
			},
			"void writeContent(const void[] content)": {
				"origin": "void writeContent(const void[] content)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"const void[] content"
				],
				"datatype": "void",
				"name": "writeContent",
				"header": "void writeContent(const void[] content)",
				"isStatic": false
			},
			"bool isFile()": {
				"origin": "bool isFile()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile()",
				"isStatic": false
			},
			"void attributes(size_t newAttributes)": {
				"origin": "void attributes(size_t newAttributes)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"size_t newAttributes"
				],
				"datatype": "void",
				"name": "attributes",
				"header": "void attributes(size_t newAttributes)",
				"isStatic": false
			},
			"long modifiedOn()": {
				"origin": "long modifiedOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "modifiedOn",
				"header": "long modifiedOn()",
				"isStatic": false
			},
			"string driveName()": {
				"origin": "string driveName()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "driveName",
				"header": "string driveName()",
				"isStatic": false
			},
			"bool writeJson(Json jsonData)": {
				"origin": "bool writeJson(Json jsonData)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json jsonData"
				],
				"datatype": "bool",
				"name": "writeJson",
				"header": "bool writeJson(Json jsonData)",
				"isStatic": false
			},
			"bool copy(string[] toPath)": {
				"origin": "bool copy(string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(string[] toPath)",
				"isStatic": false
			},
			"bool move(string[] toPath)": {
				"origin": "bool move(string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(string[] toPath)",
				"isStatic": false
			},
			"long createdOn()": {
				"origin": "long createdOn()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "long",
				"name": "createdOn",
				"header": "long createdOn()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"void[] readContent(size_t contentSize = size_t.max)": {
				"origin": "void[] readContent(size_t contentSize = size_t.max)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"size_t contentSize = size_t.max"
				],
				"datatype": "void[]",
				"name": "readContent",
				"header": "void[] readContent(size_t contentSize = size_t.max)",
				"isStatic": false
			},
			"size_t attributes()": {
				"origin": "size_t attributes()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "attributes",
				"header": "size_t attributes()",
				"isStatic": false
			},
			"Json readJson()": {
				"origin": "Json readJson()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json",
				"name": "readJson",
				"header": "Json readJson()",
				"isStatic": false
			},
			"void writeText(string aText)": {
				"origin": "void writeText(string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aText"
				],
				"datatype": "void",
				"name": "writeText",
				"header": "void writeText(string aText)",
				"isStatic": false
			},
			"string[] readLines()": {
				"origin": "string[] readLines()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "readLines",
				"header": "string[] readLines()",
				"isStatic": false
			},
			"string readText()": {
				"origin": "string readText()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "readText",
				"header": "string readText()",
				"isStatic": false
			},
			"void appendText(string aText)": {
				"origin": "void appendText(string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aText"
				],
				"datatype": "void",
				"name": "appendText",
				"header": "void appendText(string aText)",
				"isStatic": false
			},
			"bool copy(string toPath)": {
				"origin": "bool copy(string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string toPath"
				],
				"datatype": "bool",
				"name": "copy",
				"header": "bool copy(string toPath)",
				"isStatic": false
			},
			"bool move(string toPath)": {
				"origin": "bool move(string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string toPath"
				],
				"datatype": "bool",
				"name": "move",
				"header": "bool move(string toPath)",
				"isStatic": false
			}
		},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"IEventListener": {
		"origin": "interface IEventListener {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Objects implementing this interface should declare the `implementedEvents()` method",
			"to notify the event manager what methods should be called when an event is triggered.",
			""
		],
		"namespace": "uim.events.interfaces.eventlistener",
		"name": "IEventListener",
		"header": "IEventListener",
		"methods": {
			"IEvent[] implementedEvents()": {
				"origin": "IEvent[] implementedEvents()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEvent[]",
				"name": "implementedEvents",
				"header": "IEvent[] implementedEvents()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-events"
	},
	"IValidation": {
		"origin": "interface IValidation {",
		"package": "uim.validations.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.validations.interfaces.validation",
		"name": "IValidation",
		"header": "IValidation",
		"methods": {},
		"implements": [],
		"library": "uim-validations"
	},
	"IConsoleCommand": {
		"origin": "interface IConsoleCommand : INamed {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [
			"Describe the interface between a command and the surrounding console libraries."
		],
		"namespace": "uim.consoles.interfaces.command",
		"name": "IConsoleCommand",
		"header": "IConsoleCommand : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-consoles"
	},
	"IJsonTenant": {
		"origin": "interface IJsonTenant : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenant",
		"name": "IJsonTenant",
		"header": "IJsonTenant : INamed",
		"methods": {
			"IJsonBase base()": {
				"origin": "IJsonBase base()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonBase",
				"name": "base",
				"header": "IJsonBase base()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"IMiddleware": {
		"origin": "interface IMiddleware {",
		"package": "uim.http.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.http.interfaces.middleware",
		"name": "IMiddleware",
		"header": "IMiddleware",
		"methods": {},
		"implements": [],
		"library": "uim-http"
	},
	"IConmsoleCommandCollectionAware": {
		"origin": "interface IConmsoleCommandCollectionAware {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for shells that take a CommandCollection during initialization."
		],
		"namespace": "uim.consoles.interfaces.commandcollectionaware",
		"name": "IConmsoleCommandCollectionAware",
		"header": "IConmsoleCommandCollectionAware",
		"methods": {},
		"implements": [],
		"library": "uim-consoles"
	},
	"IJsonBase": {
		"origin": "interface IJsonBase : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.base",
		"name": "IJsonBase",
		"header": "IJsonBase : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"IModelManager": {
		"origin": "interface IModelManager {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.modelmanager",
		"name": "IModelManager",
		"header": "IModelManager",
		"methods": {
			"IModel[] models()": {
				"origin": "IModel[] models()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IModel[]",
				"name": "models",
				"header": "IModel[] models()",
				"isStatic": false
			},
			"void hasModel(string aName)": {
				"origin": "void hasModel(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "void",
				"name": "hasModel",
				"header": "void hasModel(string aName)",
				"isStatic": false
			},
			"void updateModel(string aName, IModel aModel)": {
				"origin": "void updateModel(string aName, IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IModel aModel"
				],
				"datatype": "void",
				"name": "updateModel",
				"header": "void updateModel(string aName, IModel aModel)",
				"isStatic": false
			},
			"void modelContainer(IModelContainer aContainer)": {
				"origin": "void modelContainer(IModelContainer aContainer)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModelContainer aContainer"
				],
				"datatype": "void",
				"name": "modelContainer",
				"header": "void modelContainer(IModelContainer aContainer)",
				"isStatic": false
			},
			"IModelContainer modelContainer()": {
				"origin": "IModelContainer modelContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IModelContainer",
				"name": "modelContainer",
				"header": "IModelContainer modelContainer()",
				"isStatic": false
			},
			"IModel model(string aName)": {
				"origin": "IModel model(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IModel",
				"name": "model",
				"header": "IModel model(string aName)",
				"isStatic": false
			},
			"void models(IModel[] someModels...)": {
				"origin": "void models(IModel[] someModels...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel[] someModels..."
				],
				"datatype": "void",
				"name": "models",
				"header": "void models(IModel[] someModels...)",
				"isStatic": false
			},
			"void models(IModel[] someModels)": {
				"origin": "void models(IModel[] someModels)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel[] someModels"
				],
				"datatype": "void",
				"name": "models",
				"header": "void models(IModel[] someModels)",
				"isStatic": false
			},
			"string[] modelNames()": {
				"origin": "string[] modelNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "modelNames",
				"header": "string[] modelNames()",
				"isStatic": false
			},
			"void addModel(string aName, IModel aModel)": {
				"origin": "void addModel(string aName, IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IModel aModel"
				],
				"datatype": "void",
				"name": "addModel",
				"header": "void addModel(string aName, IModel aModel)",
				"isStatic": false
			},
			"void updateModel(IModel aModel)": {
				"origin": "void updateModel(IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel aModel"
				],
				"datatype": "void",
				"name": "updateModel",
				"header": "void updateModel(IModel aModel)",
				"isStatic": false
			},
			"void addModel(IModel aModel)": {
				"origin": "void addModel(IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel aModel"
				],
				"datatype": "void",
				"name": "addModel",
				"header": "void addModel(IModel aModel)",
				"isStatic": false
			},
			"void removeModel(string aName)": {
				"origin": "void removeModel(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "void",
				"name": "removeModel",
				"header": "void removeModel(string aName)",
				"isStatic": false
			},
			"void model(IModel aModel)": {
				"origin": "void model(IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel aModel"
				],
				"datatype": "void",
				"name": "model",
				"header": "void model(IModel aModel)",
				"isStatic": false
			},
			"void model(string aName, IModel aModel)": {
				"origin": "void model(string aName, IModel aModel)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IModel aModel"
				],
				"datatype": "void",
				"name": "model",
				"header": "void model(string aName, IModel aModel)",
				"isStatic": false
			},
			"void models(IModel[string] someModels)": {
				"origin": "void models(IModel[string] someModels)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IModel[string] someModels"
				],
				"datatype": "void",
				"name": "models",
				"header": "void models(IModel[string] someModels)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-models"
	},
	"IPlugin": {
		"origin": "interface IPlugin : INamed {",
		"package": "uim.routings.plugins",
		"visibility": "public",
		"comments": [
			"Plugin Interface"
		],
		"namespace": "uim.routings.plugins.interface_",
		"name": "IPlugin",
		"header": "IPlugin : INamed",
		"methods": {
			"string configPath()": {
				"origin": "string configPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "configPath",
				"header": "string configPath()",
				"isStatic": false
			},
			"void disable(string hookName)": {
				"origin": "void disable(string hookName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string hookName"
				],
				"datatype": "void",
				"name": "disable",
				"header": "void disable(string hookName)",
				"isStatic": false
			},
			"void services(IContainer container)": {
				"origin": "void services(IContainer container)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IContainer container"
				],
				"datatype": "void",
				"name": "services",
				"header": "void services(IContainer container)",
				"isStatic": false
			},
			"void bootstrap(IPluginApplication app)": {
				"origin": "void bootstrap(IPluginApplication app)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IPluginApplication app"
				],
				"datatype": "void",
				"name": "bootstrap",
				"header": "void bootstrap(IPluginApplication app)",
				"isStatic": false
			},
			"bool isEnabled(string hookName)": {
				"origin": "bool isEnabled(string hookName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string hookName"
				],
				"datatype": "bool",
				"name": "isEnabled",
				"header": "bool isEnabled(string hookName)",
				"isStatic": false
			},
			"void enable(string hookName)": {
				"origin": "void enable(string hookName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string hookName"
				],
				"datatype": "void",
				"name": "enable",
				"header": "void enable(string hookName)",
				"isStatic": false
			},
			"string templatePath()": {
				"origin": "string templatePath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "templatePath",
				"header": "string templatePath()",
				"isStatic": false
			},
			"string path()": {
				"origin": "string path()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "path",
				"header": "string path()",
				"isStatic": false
			},
			"string classPath()": {
				"origin": "string classPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "classPath",
				"header": "string classPath()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-routings"
	},
	"IContainer": {
		"origin": "interface IContainer { // TODO: IDefinitionContainer {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for the Dependency Injection Container in UIM applications",
			"",
			"This interface : the PSR-11 container interface and adds",
			"methods to add services and service providers to the container.",
			"",
			"The methods defined in this interface use the conventions provided",
			"by league/container as that is the library that UIM uses.",
			""
		],
		"namespace": "uim.oop.interfaces.container",
		"name": "IContainer",
		"header": "IContainer",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IComponent": {
		"origin": "interface IComponent {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.component",
		"name": "IComponent",
		"header": "IComponent",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"IViewManager": {
		"origin": "interface IViewManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.viewmanager",
		"name": "IViewManager",
		"header": "IViewManager",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IMVCObject": {
		"origin": "interface IMVCObject {}",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.mvc",
		"name": "IMVCObject",
		"header": "IMVCObject",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IErrorHandler": {
		"origin": "interface IErrorHandler {}",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.errors.interfaces.handler",
		"name": "IErrorHandler",
		"header": "IErrorHandler",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"IDrive": {
		"origin": "interface IDrive : IFilesystemEntry {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.drive",
		"name": "IDrive",
		"header": "IDrive : IFilesystemEntry",
		"methods": {},
		"implements": [
			"IFilesystemEntry"
		],
		"library": "uim-filesystems"
	},
	"IResponse": {
		"origin": "interface IResponse {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.response",
		"name": "IResponse",
		"header": "IResponse",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IList(T)": {
		"origin": "interface IList(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.list",
		"name": "IList(T)",
		"header": "IList(T)",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IContainerApplication": {
		"origin": "interface IContainerApplication {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for applications that configure and use a dependency injection container."
		],
		"namespace": "uim.oop.interfaces.containerapplication",
		"name": "IContainerApplication",
		"header": "IContainerApplication",
		"methods": {
			"IContainer getContainer()": {
				"origin": "IContainer getContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IContainer",
				"name": "getContainer",
				"header": "IContainer getContainer()",
				"isStatic": false
			},
			"void services(IContainer container)": {
				"origin": "void services(IContainer container)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IContainer container"
				],
				"datatype": "void",
				"name": "services",
				"header": "void services(IContainer container)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IErrorLogger": {
		"origin": "interface IErrorLogger {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for error logging handlers.",
			"",
			"Used by the ErrorHandlerMiddleware and global error handlers to log exceptions and errors.",
			""
		],
		"namespace": "uim.errors.interfaces.logger",
		"name": "IErrorLogger",
		"header": "IErrorLogger",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"IErrorDebugger": {
		"origin": "interface IErrorDebugger {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.errors.interfaces.debugger",
		"name": "IErrorDebugger",
		"header": "IErrorDebugger",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"IClosure": {
		"origin": "interface IClosure {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"TODO"
		],
		"namespace": "uim.oop.interfaces.closure",
		"name": "IClosure",
		"header": "IClosure",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IEvent": {
		"origin": "interface IEvent : INamed {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Represents the transport class of events across the system. It receives a name, subject and an optional",
			"payload. The name can be any string that uniquely identifies the event across the application, while the subject",
			"represents the object that the event applies to.",
			""
		],
		"namespace": "uim.events.interfaces.event",
		"name": "IEvent",
		"header": "IEvent : INamed",
		"methods": {
			"IEvent data(string key, double aValue)": {
				"origin": "IEvent data(string key, double aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"double aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string key, double aValue)",
				"isStatic": false
			},
			"IEvent data(string key, string aValue)": {
				"origin": "IEvent data(string key, string aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"string aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string key, string aValue)",
				"isStatic": false
			},
			"IEvent data(string[] keys, double aValue)": {
				"origin": "IEvent data(string[] keys, double aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys",
					"double aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string[] keys, double aValue)",
				"isStatic": false
			},
			"IEvent data(string key, bool aValue)": {
				"origin": "IEvent data(string key, bool aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"bool aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string key, bool aValue)",
				"isStatic": false
			},
			"IEventObject subject()": {
				"origin": "IEventObject subject()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEventObject",
				"name": "subject",
				"header": "IEventObject subject()",
				"isStatic": false
			},
			"IEvent result(Json resultValue)": {
				"origin": "IEvent result(Json resultValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json resultValue"
				],
				"datatype": "IEvent",
				"name": "result",
				"header": "IEvent result(Json resultValue)",
				"isStatic": false
			},
			"IEvent stopPropagation()": {
				"origin": "IEvent stopPropagation()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEvent",
				"name": "stopPropagation",
				"header": "IEvent stopPropagation()",
				"isStatic": false
			},
			"IEvent data(string[] keys, bool aValue)": {
				"origin": "IEvent data(string[] keys, bool aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys",
					"bool aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string[] keys, bool aValue)",
				"isStatic": false
			},
			"IEvent data(string key, Json aValue)": {
				"origin": "IEvent data(string key, Json aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string key, Json aValue)",
				"isStatic": false
			},
			"Json allData(string dataKey)": {
				"origin": "Json allData(string dataKey)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string dataKey"
				],
				"datatype": "Json",
				"name": "allData",
				"header": "Json allData(string dataKey)",
				"isStatic": false
			},
			"IEvent data(string[] keys, string aValue)": {
				"origin": "IEvent data(string[] keys, string aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys",
					"string aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string[] keys, string aValue)",
				"isStatic": false
			},
			"Json result()": {
				"origin": "Json result()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json",
				"name": "result",
				"header": "Json result()",
				"isStatic": false
			},
			"Json data(string dataKey)": {
				"origin": "Json data(string dataKey)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string dataKey"
				],
				"datatype": "Json",
				"name": "data",
				"header": "Json data(string dataKey)",
				"isStatic": false
			},
			"bool isStopped()": {
				"origin": "bool isStopped()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isStopped",
				"header": "bool isStopped()",
				"isStatic": false
			},
			"IEvent data(string[] keys, Json aValue)": {
				"origin": "IEvent data(string[] keys, Json aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys",
					"Json aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string[] keys, Json aValue)",
				"isStatic": false
			},
			"IEvent data(string[] keys, long aValue)": {
				"origin": "IEvent data(string[] keys, long aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys",
					"long aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string[] keys, long aValue)",
				"isStatic": false
			},
			"IEvent data(string key, long aValue)": {
				"origin": "IEvent data(string key, long aValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"long aValue"
				],
				"datatype": "IEvent",
				"name": "data",
				"header": "IEvent data(string key, long aValue)",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-events"
	},
	"IJsonTenantManager": {
		"origin": "interface IJsonTenantManager {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.tenantmanager",
		"name": "IJsonTenantManager",
		"header": "IJsonTenantManager",
		"methods": {
			"bool deleteTenant(string aName)": {
				"origin": "bool deleteTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "deleteTenant",
				"header": "bool deleteTenant(string aName)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[string] someTenants)": {
				"origin": "bool addTenants(IJsonTenant[string] someTenants)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[string] someTenants"
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[string] someTenants)",
				"isStatic": false
			},
			"bool hasTenant(string aName)": {
				"origin": "bool hasTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "hasTenant",
				"header": "bool hasTenant(string aName)",
				"isStatic": false
			},
			"IJsonTenant createTenant(string aName)": {
				"origin": "IJsonTenant createTenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonTenant",
				"name": "createTenant",
				"header": "IJsonTenant createTenant(string aName)",
				"isStatic": false
			},
			"string[] existingTenants(string[] someNames = null)": {
				"origin": "string[] existingTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "string[]",
				"name": "existingTenants",
				"header": "string[] existingTenants(string[] someNames = null)",
				"isStatic": false
			},
			"IJsonTenant[] tenants()": {
				"origin": "IJsonTenant[] tenants()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonTenant[]",
				"name": "tenants",
				"header": "IJsonTenant[] tenants()",
				"isStatic": false
			},
			"bool addTenant(IJsonTenant aTenant)": {
				"origin": "bool addTenant(IJsonTenant aTenant)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant aTenant"
				],
				"datatype": "bool",
				"name": "addTenant",
				"header": "bool addTenant(IJsonTenant aTenant)",
				"isStatic": false
			},
			"bool hasTenants(string[] someNames...)": {
				"origin": "bool hasTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "hasTenants",
				"header": "bool hasTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool hasTenants(string[] someNames = null)": {
				"origin": "bool hasTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "bool",
				"name": "hasTenants",
				"header": "bool hasTenants(string[] someNames = null)",
				"isStatic": false
			},
			"size_t countTenants(string[] someNames...)": {
				"origin": "size_t countTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "size_t",
				"name": "countTenants",
				"header": "size_t countTenants(string[] someNames...)",
				"isStatic": false
			},
			"string[] tenantNames()": {
				"origin": "string[] tenantNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "tenantNames",
				"header": "string[] tenantNames()",
				"isStatic": false
			},
			"IJsonTenant[] createTenants(string[] someNames...)": {
				"origin": "IJsonTenant[] createTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "IJsonTenant[]",
				"name": "createTenants",
				"header": "IJsonTenant[] createTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[] someTenants)": {
				"origin": "bool addTenants(IJsonTenant[] someTenants)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[] someTenants"
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[] someTenants)",
				"isStatic": false
			},
			"IJsonTenant tenant(string aName)": {
				"origin": "IJsonTenant tenant(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonTenant",
				"name": "tenant",
				"header": "IJsonTenant tenant(string aName)",
				"isStatic": false
			},
			"size_t countTenants(string[] someNames = null)": {
				"origin": "size_t countTenants(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "size_t",
				"name": "countTenants",
				"header": "size_t countTenants(string[] someNames = null)",
				"isStatic": false
			},
			"IJsonTenant[] createTenants(string[] someNames)": {
				"origin": "IJsonTenant[] createTenants(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "IJsonTenant[]",
				"name": "createTenants",
				"header": "IJsonTenant[] createTenants(string[] someNames)",
				"isStatic": false
			},
			"bool addTenants(IJsonTenant[] someTenants...)": {
				"origin": "bool addTenants(IJsonTenant[] someTenants...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonTenant[] someTenants..."
				],
				"datatype": "bool",
				"name": "addTenants",
				"header": "bool addTenants(IJsonTenant[] someTenants...)",
				"isStatic": false
			},
			"string[] existingTenants(string[] someNames...)": {
				"origin": "string[] existingTenants(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "string[]",
				"name": "existingTenants",
				"header": "string[] existingTenants(string[] someNames...)",
				"isStatic": false
			},
			"bool addTenant(string aName, IJsonTenant aTenant)": {
				"origin": "bool addTenant(string aName, IJsonTenant aTenant)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IJsonTenant aTenant"
				],
				"datatype": "bool",
				"name": "addTenant",
				"header": "bool addTenant(string aName, IJsonTenant aTenant)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"IFileManager": {
		"origin": "interface IFileManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filemanager",
		"name": "IFileManager",
		"header": "IFileManager",
		"methods": {
			"bool copyFile(string[] fromPath, string[] toPath)": {
				"origin": "bool copyFile(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFile",
				"header": "bool copyFile(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool copyFile(string fromPath, string toPath)": {
				"origin": "bool copyFile(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyFile",
				"header": "bool copyFile(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFile[] files(string[] aPath, string aFileName)": {
				"origin": "IFile[] files(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool existsFile(string aPath, string aFileName)": {
				"origin": "bool existsFile(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool renameFile(string aPath, string oldName, string newName)": {
				"origin": "bool renameFile(string aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool moveFile(string fromPath, string toPath)": {
				"origin": "bool moveFile(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveFile",
				"header": "bool moveFile(string fromPath, string toPath)",
				"isStatic": false
			},
			"final bool filesExists(IFile[] files) {": {
				"origin": "final bool filesExists(IFile[] files) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFile[] files"
				],
				"datatype": "final",
				"name": "bool filesExists",
				"header": "final bool filesExists(IFile[] files)",
				"isStatic": false
			},
			"size_t countFiles(string[] aPath)": {
				"origin": "size_t countFiles(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string[] aPath)",
				"isStatic": false
			},
			"IFile file(string aPathOrName)": {
				"origin": "IFile file(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string aPathOrName)",
				"isStatic": false
			},
			"IFile file(string aPath, string aFileName)": {
				"origin": "IFile file(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string aPath, string aFileName)",
				"isStatic": false
			},
			"IFile[] files(string aPath, string aFileName)": {
				"origin": "IFile[] files(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool removeFile(string aPath, string aFolderName)": {
				"origin": "bool removeFile(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool hasFiles(string[] aPath)": {
				"origin": "bool hasFiles(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string[] aPath)",
				"isStatic": false
			},
			"bool existsFile(string[] aPath, string aFileName)": {
				"origin": "bool existsFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool renameFile(string[] aPath, string oldName, string newName)": {
				"origin": "bool renameFile(string[] aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string[] aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool removeFile(string[] aPath)": {
				"origin": "bool removeFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string[] aPath)",
				"isStatic": false
			},
			"bool existsFile(string[] aPath)": {
				"origin": "bool existsFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string[] aPath)",
				"isStatic": false
			},
			"bool hasFiles(string aPath, string aFileName)": {
				"origin": "bool hasFiles(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string aPath, string aFileName)",
				"isStatic": false
			},
			"IFile file(string[] aPath)": {
				"origin": "IFile file(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string[] aPath)",
				"isStatic": false
			},
			"IFile createFile(string aPath, string aFileName)": {
				"origin": "IFile createFile(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string aPath, string aFileName)",
				"isStatic": false
			},
			"size_t countFiles(string aPath, string aFileName)": {
				"origin": "size_t countFiles(string aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFileName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string aPath, string aFileName)",
				"isStatic": false
			},
			"bool hasFiles(string aPathOrName)": {
				"origin": "bool hasFiles(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string aPathOrName)",
				"isStatic": false
			},
			"IFile createFile(string aPathOrName)": {
				"origin": "IFile createFile(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string aPathOrName)",
				"isStatic": false
			},
			"bool removeFile(string aPath)": {
				"origin": "bool removeFile(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string aPath)",
				"isStatic": false
			},
			"IFile file(string[] aPath, string aFileName)": {
				"origin": "IFile file(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "file",
				"header": "IFile file(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"IFile createFile(string[] aPath)": {
				"origin": "IFile createFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string[] aPath)",
				"isStatic": false
			},
			"IFile createFile(string[] aPath, string aFileName)": {
				"origin": "IFile createFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "IFile",
				"name": "createFile",
				"header": "IFile createFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool hasFiles(string[] aPath, string aFileName)": {
				"origin": "bool hasFiles(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "bool",
				"name": "hasFiles",
				"header": "bool hasFiles(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool removeFile(string[] aPath, string aFolderName)": {
				"origin": "bool removeFile(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFile",
				"header": "bool removeFile(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFile(string aPathOrName)": {
				"origin": "bool existsFile(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "bool",
				"name": "existsFile",
				"header": "bool existsFile(string aPathOrName)",
				"isStatic": false
			},
			"bool renameFile(string oldPathAndName, string newName)": {
				"origin": "bool renameFile(string oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string oldPathAndName, string newName)",
				"isStatic": false
			},
			"size_t countFiles(string aPathOrName)": {
				"origin": "size_t countFiles(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string aPathOrName)",
				"isStatic": false
			},
			"bool moveFile(string[] fromPath, string[] toPath)": {
				"origin": "bool moveFile(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFile",
				"header": "bool moveFile(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"size_t countFiles(string[] aPath, string aFileName)": {
				"origin": "size_t countFiles(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "size_t",
				"name": "countFiles",
				"header": "size_t countFiles(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"IFile[] files()": {
				"origin": "IFile[] files()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files()",
				"isStatic": false
			},
			"bool renameFile(string[] oldPathAndName, string newName)": {
				"origin": "bool renameFile(string[] oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFile",
				"header": "bool renameFile(string[] oldPathAndName, string newName)",
				"isStatic": false
			},
			"IFile[] files(string[] aPath)": {
				"origin": "IFile[] files(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string[] aPath)",
				"isStatic": false
			},
			"bool addFile(IFile aFile)": {
				"origin": "bool addFile(IFile aFile)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFile aFile"
				],
				"datatype": "bool",
				"name": "addFile",
				"header": "bool addFile(IFile aFile)",
				"isStatic": false
			},
			"IFile[] files(string aPathOrName)": {
				"origin": "IFile[] files(string aPathOrName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPathOrName"
				],
				"datatype": "IFile[]",
				"name": "files",
				"header": "IFile[] files(string aPathOrName)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	},
	"ISessionContainer": {
		"origin": "interface ISessionContainer {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.sessioncontainer",
		"name": "ISessionContainer",
		"header": "ISessionContainer",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IRetryStrategy": {
		"origin": "interface IRetryStrategy {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Used to instruct a CommandRetry object on whether a retry",
			"for an action should be performed",
			""
		],
		"namespace": "uim.oop.interfaces.retrystrategy",
		"name": "IRetryStrategy",
		"header": "IRetryStrategy",
		"methods": {
			"bool shouldRetry(UIMException failException, int retryCount)": {
				"origin": "bool shouldRetry(UIMException failException, int retryCount)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"UIMException failException",
					"int retryCount"
				],
				"datatype": "bool",
				"name": "shouldRetry",
				"header": "bool shouldRetry(UIMException failException, int retryCount)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IComparable(T)": {
		"origin": "interface IComparable(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."
		],
		"namespace": "uim.oop.interfaces.comparable",
		"name": "IComparable(T)",
		"header": "IComparable(T)",
		"methods": {
			"int compareTo(T compareValue)": {
				"origin": "int compareTo(T compareValue)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T compareValue"
				],
				"datatype": "int",
				"name": "compareTo",
				"header": "int compareTo(T compareValue)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IJsonCollection": {
		"origin": "interface IJsonCollection : INamed {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collection",
		"name": "IJsonCollection",
		"header": "IJsonCollection : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-jsonbases"
	},
	"IErrorFormatter": {
		"origin": "interface IErrorFormatter {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [
			"/******************************************************************************",
			"Interface for formatters used by Debugger-",
			"*****************************************************************************/"
		],
		"namespace": "uim.errors.interfaces.formatter",
		"name": "IErrorFormatter",
		"header": "IErrorFormatter",
		"methods": {
			"string dump(IErrorNode node)": {
				"origin": "string dump(IErrorNode node)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IErrorNode node"
				],
				"datatype": "string",
				"name": "dump",
				"header": "string dump(IErrorNode node)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-errors"
	},
	"ICollection(T)": {
		"origin": "interface ICollection(T) : IKeyAndPath {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.collection",
		"name": "ICollection(T)",
		"header": "ICollection(T) : IKeyAndPath",
		"methods": {
			"T[] toArray()": {
				"origin": "T[] toArray()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "T[]",
				"name": "toArray",
				"header": "T[] toArray()",
				"isStatic": false
			},
			"bool addAll(ICollection2!T aCollection)": {
				"origin": "bool addAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "addAll",
				"header": "bool addAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"bool containsAll(ICollection2!T aCollection)": {
				"origin": "bool containsAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "containsAll",
				"header": "bool containsAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"int  hashCode()": {
				"origin": "int  hashCode()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "int",
				"name": "hashCode",
				"header": "int hashCode()",
				"isStatic": false
			},
			"size_t  size()": {
				"origin": "size_t  size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"void  clear()": {
				"origin": "void  clear()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "clear",
				"header": "void clear()",
				"isStatic": false
			},
			"bool contains(T anItem)": {
				"origin": "bool contains(T anItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T anItem"
				],
				"datatype": "bool",
				"name": "contains",
				"header": "bool contains(T anItem)",
				"isStatic": false
			},
			"bool removeKey(T anItem)": {
				"origin": "bool removeKey(T anItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T anItem"
				],
				"datatype": "bool",
				"name": "removeKey",
				"header": "bool removeKey(T anItem)",
				"isStatic": false
			},
			"bool removeAll(ICollection2!T aCollection)": {
				"origin": "bool removeAll(ICollection2!T aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICollection2!T aCollection"
				],
				"datatype": "bool",
				"name": "removeAll",
				"header": "bool removeAll(ICollection2!T aCollection)",
				"isStatic": false
			},
			"bool add(T newItem)": {
				"origin": "bool add(T newItem)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"T newItem"
				],
				"datatype": "bool",
				"name": "add",
				"header": "bool add(T newItem)",
				"isStatic": false
			}
		},
		"implements": [
			"IKeyAndPath"
		],
		"library": "uim-oop"
	},
	"IStringable": {
		"origin": "interface IStringable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.stringable",
		"name": "IStringable",
		"header": "IStringable",
		"methods": {
			"string toString()": {
				"origin": "string toString()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toString",
				"header": "string toString()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IRunnable": {
		"origin": "interface IRunnable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.runnable",
		"name": "IRunnable",
		"header": "IRunnable",
		"methods": {
			"O run(this O)()": {
				"origin": "O run(this O)()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)()",
				"isStatic": false
			},
			"O run(this O)(Json data)": {
				"origin": "O run(this O)(Json data)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"this O"
				],
				"datatype": "O",
				"name": "run",
				"header": "O run(this O)(Json data)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IModelContainer": {
		"origin": "interface IModelContainer {}",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.modelcontainer",
		"name": "IModelContainer",
		"header": "IModelContainer",
		"methods": {},
		"implements": [],
		"library": "uim-models"
	},
	"IItem": {
		"origin": "interface IItem {",
		"package": "uim.oop.patterns.creational",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.patterns.creational.builders",
		"name": "IItem",
		"header": "IItem",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IEventManager": {
		"origin": "interface IEventManager {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.events.interfaces.eventmanager",
		"name": "IEventManager",
		"header": "IEventManager",
		"methods": {
			"Json[string] listeners(string eventKey)": {
				"origin": "Json[string] listeners(string eventKey)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string eventKey"
				],
				"datatype": "Json[string]",
				"name": "listeners",
				"header": "Json[string] listeners(string eventKey)",
				"isStatic": false
			},
			"IEvent dispatch(IEvent event)": {
				"origin": "IEvent dispatch(IEvent event)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IEvent event"
				],
				"datatype": "IEvent",
				"name": "dispatch",
				"header": "IEvent dispatch(IEvent event)",
				"isStatic": false
			},
			"IEvent dispatch(string eventName)": {
				"origin": "IEvent dispatch(string eventName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string eventName"
				],
				"datatype": "IEvent",
				"name": "dispatch",
				"header": "IEvent dispatch(string eventName)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-events"
	},
	"ICss": {
		"origin": "interface ICss {",
		"package": "uim.css.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.css.interfaces.css",
		"name": "ICss",
		"header": "ICss",
		"methods": {},
		"implements": [],
		"library": "uim-css"
	},
	"IUsecase": {
		"origin": "interface IUsecase {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.usecase",
		"name": "IUsecase",
		"header": "IUsecase",
		"methods": {},
		"implements": [],
		"library": "uim-models"
	},
	"IEventDispatcher": {
		"origin": "interface IEventDispatcher {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Objects implementing this interface can emit events.",
			"",
			"Objects with this interface can trigger events, and have",
			"an event manager retrieved from them.",
			"",
			"The {@link \\UIM\\Event\\EventDispatcherTrait} lets you easily implement",
			"this interface.",
			""
		],
		"namespace": "uim.events.interfaces.eventdispatcher",
		"name": "IEventDispatcher",
		"header": "IEventDispatcher",
		"methods": {
			"IEventManager getEventManager()": {
				"origin": "IEventManager getEventManager()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEventManager",
				"name": "getEventManager",
				"header": "IEventManager getEventManager()",
				"isStatic": false
			},
			"IEvent dispatchEvent(string eventName, Json[string] dataToTransport = null, UIMObject subject = null)": {
				"origin": "IEvent dispatchEvent(string eventName, Json[string] dataToTransport = null, UIMObject subject = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string eventName",
					"Json[string] dataToTransport = null",
					"UIMObject subject = null"
				],
				"datatype": "IEvent",
				"name": "dispatchEvent",
				"header": "IEvent dispatchEvent(string eventName, Json[string] dataToTransport = null, UIMObject subject = null)",
				"isStatic": false
			},
			"void eventManager(IEventManager eventManager)": {
				"origin": "void eventManager(IEventManager eventManager)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IEventManager eventManager"
				],
				"datatype": "void",
				"name": "eventManager",
				"header": "void eventManager(IEventManager eventManager)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-events"
	},
	"IIterable(T)": {
		"origin": "interface IIterable(T) {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.iterable",
		"name": "IIterable(T)",
		"header": "IIterable(T)",
		"methods": {
			"void forEach(void function(T)forEachFunc)": {
				"origin": "void forEach(void function(T)forEachFunc)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"void function"
				],
				"datatype": "void",
				"name": "forEach",
				"header": "void forEach(void function(T)forEachFunc)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IException": {
		"origin": "interface IException {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.exception",
		"name": "IException",
		"header": "IException",
		"methods": {
			"string message()": {
				"origin": "string message()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "message",
				"header": "string message()",
				"isStatic": false
			},
			"string messageTemplate(string templateName = \"default\")": {
				"origin": "string messageTemplate(string templateName = \"default\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string templateName = \"default\""
				],
				"datatype": "string",
				"name": "messageTemplate",
				"header": "string messageTemplate(string templateName = \"default\")",
				"isStatic": false
			},
			"STRINGAA messageTemplates()": {
				"origin": "STRINGAA messageTemplates()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "STRINGAA",
				"name": "messageTemplates",
				"header": "STRINGAA messageTemplates()",
				"isStatic": false
			},
			"void messageTemplate(string templateName, string templateText)": {
				"origin": "void messageTemplate(string templateName, string templateText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string templateName",
					"string templateText"
				],
				"datatype": "void",
				"name": "messageTemplate",
				"header": "void messageTemplate(string templateName, string templateText)",
				"isStatic": false
			},
			"void messageTemplates(string[string] templates)": {
				"origin": "void messageTemplates(string[string] templates)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[string] templates"
				],
				"datatype": "void",
				"name": "messageTemplates",
				"header": "void messageTemplates(string[string] templates)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IServices": {
		"origin": "interface IServices {}",
		"package": "uim.services.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.services.interfaces.service",
		"name": "IServices",
		"header": "IServices",
		"methods": {},
		"implements": [],
		"library": "uim-services"
	},
	"ITest": {
		"origin": "    interface ITest {",
		"package": "uim.core.helpers",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.core.helpers.classes",
		"name": "ITest",
		"header": "ITest",
		"methods": {
			"debug writeln(result.classname)": {
				"origin": "debug writeln(result.classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"result.classname"
				],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln(result.classname)",
				"isStatic": false
			},
			"assert((new Test2).classname == \"Test2\")": {
				"origin": "assert((new Test2).classname == \"Test2\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert((new",
				"name": "",
				"header": "assert((new Test2).classname == \"Test2\")",
				"isStatic": false
			},
			"writeln(\"classname:\", (new Test2).classname)": {
				"origin": "writeln(\"classname:\", (new Test2).classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"classname:\",",
				"name": "",
				"header": "writeln(\"classname:\", (new Test2).classname)",
				"isStatic": false
			},
			"writeln((new Test2).classinfo)": {
				"origin": "writeln((new Test2).classinfo)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln((new",
				"name": "",
				"header": "writeln((new Test2).classinfo)",
				"isStatic": false
			},
			"writeln(\"Base:\", (new Test2).classinfo.base)": {
				"origin": "writeln(\"Base:\", (new Test2).classinfo.base)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Base:\",",
				"name": "",
				"header": "writeln(\"Base:\", (new Test2).classinfo.base)",
				"isStatic": false
			},
			"() @trusted { result = Object.factory(name) }()": {
				"origin": "() @trusted ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "()",
				"name": "",
				"header": "() @trusted",
				"isStatic": false
			},
			"debug writeln(cl.create)": {
				"origin": "debug writeln(cl.create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"cl.create"
				],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln(cl.create)",
				"isStatic": false
			},
			"auto cl = (new Test2).classinfo": {
				"origin": "auto cl = (new Test2).classinfo",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"new Test2).classinfo"
				],
				"datatype": "auto",
				"name": "cl = ",
				"header": "auto cl = (new Test2).classinfo",
				"isStatic": false
			},
			"writeln(\"test.classname\", test.classname)": {
				"origin": "writeln(\"test.classname\", test.classname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"test.classname\",",
				"name": "",
				"header": "writeln(\"test.classname\", test.classname)",
				"isStatic": false
			},
			"writeln(\"Interfaces:\", (new Test).classinfo.interfaces)": {
				"origin": "writeln(\"Interfaces:\", (new Test).classinfo.interfaces)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Interfaces:\",",
				"name": "",
				"header": "writeln(\"Interfaces:\", (new Test).classinfo.interfaces)",
				"isStatic": false
			},
			"writeln(\"fullclassname:\", (new Test2).classFullname)": {
				"origin": "writeln(\"fullclassname:\", (new Test2).classFullname)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"fullclassname:\",",
				"name": "",
				"header": "writeln(\"fullclassname:\", (new Test2).classFullname)",
				"isStatic": false
			},
			"assert(test.classname == \"Test\")": {
				"origin": "assert(test.classname == \"Test\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert(test.classname",
				"name": "",
				"header": "assert(test.classname == \"Test\")",
				"isStatic": false
			},
			"Test2 function(string) fn": {
				"origin": "Test2 function(string) fn",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string) fn"
				],
				"datatype": "Test2",
				"name": "function",
				"header": "Test2 function(string) fn",
				"isStatic": false
			},
			"debug writeln((new Test2).classinfo.create)": {
				"origin": "debug writeln((new Test2).classinfo.create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln((new Test2).classinfo.create)",
				"isStatic": false
			},
			"assert((new Test1).classname == \"Test1\")": {
				"origin": "assert((new Test1).classname == \"Test1\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert((new",
				"name": "",
				"header": "assert((new Test1).classname == \"Test1\")",
				"isStatic": false
			},
			"debug writeln((new Test2).create)": {
				"origin": "debug writeln((new Test2).create)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "debug",
				"name": "writeln",
				"header": "debug writeln((new Test2).create)",
				"isStatic": false
			},
			"assert(test.stringof == \"test\")": {
				"origin": "assert(test.stringof == \"test\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "assert(test.stringof",
				"name": "",
				"header": "assert(test.stringof == \"test\")",
				"isStatic": false
			},
			"writeln(\"Name:\", (new Test2).classinfo.name)": {
				"origin": "writeln(\"Name:\", (new Test2).classinfo.name)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "writeln(\"Name:\",",
				"name": "",
				"header": "writeln(\"Name:\", (new Test2).classinfo.name)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-core"
	},
	"ITranslator": {
		"origin": "interface ITranslator {",
		"package": "uim.i18n.interfaces",
		"visibility": "public",
		"comments": [
			"Translator to translate the message."
		],
		"namespace": "uim.i18n.interfaces.translator",
		"name": "ITranslator",
		"header": "ITranslator",
		"methods": {
			"void catalog(ICatalog newCatalog)": {
				"origin": "void catalog(ICatalog newCatalog)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ICatalog newCatalog"
				],
				"datatype": "void",
				"name": "catalog",
				"header": "void catalog(ICatalog newCatalog)",
				"isStatic": false
			},
			"ICatalog catalog()": {
				"origin": "ICatalog catalog()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "ICatalog",
				"name": "catalog",
				"header": "ICatalog catalog()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-i18n"
	},
	"IErrorNode": {
		"origin": "interface IErrorNode {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for Error Nodes",
			"Provides methods to look at the contained value and iterate on child nodes in the error tree."
		],
		"namespace": "uim.errors.interfaces.node",
		"name": "IErrorNode",
		"header": "IErrorNode",
		"methods": {
			"IErrorNode[] children()": {
				"origin": "IErrorNode[] children()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IErrorNode[]",
				"name": "children",
				"header": "IErrorNode[] children()",
				"isStatic": false
			},
			"Json value()": {
				"origin": "Json value()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "Json",
				"name": "value",
				"header": "Json value()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-errors"
	},
	"IRoute": {
		"origin": "interface IRoute {",
		"package": "uim.routings.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for applications that use routing."
		],
		"namespace": "uim.routings.interfaces.route",
		"name": "IRoute",
		"header": "IRoute",
		"methods": {},
		"implements": [],
		"library": "uim-routings"
	},
	"ILinkManager": {
		"origin": "interface ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.linkmanager",
		"name": "ILinkManager",
		"header": "ILinkManager",
		"methods": {
			"ILink[] links(string aPath)": {
				"origin": "ILink[] links(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink[]",
				"name": "links",
				"header": "ILink[] links(string aPath)",
				"isStatic": false
			},
			"size_t countLinks(string[] aPath)": {
				"origin": "size_t countLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countLinks",
				"header": "size_t countLinks(string[] aPath)",
				"isStatic": false
			},
			"bool moveLink(string[] fromPath, string[] toPath)": {
				"origin": "bool moveLink(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveLink",
				"header": "bool moveLink(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"final bool linksExists(ILink[] someLinks) {": {
				"origin": "final bool linksExists(ILink[] someLinks) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"ILink[] someLinks"
				],
				"datatype": "final",
				"name": "bool linksExists",
				"header": "final bool linksExists(ILink[] someLinks)",
				"isStatic": false
			},
			"ILink createLink(string aPath)": {
				"origin": "ILink createLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink",
				"name": "createLink",
				"header": "ILink createLink(string aPath)",
				"isStatic": false
			},
			"ILink createLink(string[] aPath)": {
				"origin": "ILink createLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink",
				"name": "createLink",
				"header": "ILink createLink(string[] aPath)",
				"isStatic": false
			},
			"bool existsLink(string[] aPath)": {
				"origin": "bool existsLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsLink",
				"header": "bool existsLink(string[] aPath)",
				"isStatic": false
			},
			"ILink link(string aPath)": {
				"origin": "ILink link(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "ILink",
				"name": "link",
				"header": "ILink link(string aPath)",
				"isStatic": false
			},
			"ILink link(string[] aPath)": {
				"origin": "ILink link(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink",
				"name": "link",
				"header": "ILink link(string[] aPath)",
				"isStatic": false
			},
			"bool copyLink(string fromPath, string toPath)": {
				"origin": "bool copyLink(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyLink",
				"header": "bool copyLink(string fromPath, string toPath)",
				"isStatic": false
			},
			"bool copyLink(string[] fromPath, string[] toPath)": {
				"origin": "bool copyLink(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyLink",
				"header": "bool copyLink(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool removeLink(string aPath)": {
				"origin": "bool removeLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeLink",
				"header": "bool removeLink(string aPath)",
				"isStatic": false
			},
			"bool removeLinks(string[] aPath)": {
				"origin": "bool removeLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeLinks",
				"header": "bool removeLinks(string[] aPath)",
				"isStatic": false
			},
			"bool removeLink(string[] aPath)": {
				"origin": "bool removeLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeLink",
				"header": "bool removeLink(string[] aPath)",
				"isStatic": false
			},
			"bool addLink(ILink aLink)": {
				"origin": "bool addLink(ILink aLink)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ILink aLink"
				],
				"datatype": "bool",
				"name": "addLink",
				"header": "bool addLink(ILink aLink)",
				"isStatic": false
			},
			"bool removeLinks(string aPath)": {
				"origin": "bool removeLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeLinks",
				"header": "bool removeLinks(string aPath)",
				"isStatic": false
			},
			"bool existsLinks(string[] aPath)": {
				"origin": "bool existsLinks(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsLinks",
				"header": "bool existsLinks(string[] aPath)",
				"isStatic": false
			},
			"bool moveLink(string fromPath, string toPath)": {
				"origin": "bool moveLink(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveLink",
				"header": "bool moveLink(string fromPath, string toPath)",
				"isStatic": false
			},
			"bool existsLinks(string aPath)": {
				"origin": "bool existsLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsLinks",
				"header": "bool existsLinks(string aPath)",
				"isStatic": false
			},
			"ILink[] links(string[] aPath)": {
				"origin": "ILink[] links(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "ILink[]",
				"name": "links",
				"header": "ILink[] links(string[] aPath)",
				"isStatic": false
			},
			"size_t countLinks(string aPath)": {
				"origin": "size_t countLinks(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "size_t",
				"name": "countLinks",
				"header": "size_t countLinks(string aPath)",
				"isStatic": false
			},
			"bool existsLink(string aPath)": {
				"origin": "bool existsLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsLink",
				"header": "bool existsLink(string aPath)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	},
	"IErrorRenderer": {
		"origin": "interface IErrorRenderer {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for UIM error rendering implementations",
			"",
			"The core provided implementations of this interface are used",
			"by Debugger and ErrorTrap to render UIM errors.",
			""
		],
		"namespace": "uim.errors.interfaces.renderer",
		"name": "IErrorRenderer",
		"header": "IErrorRenderer",
		"methods": {
			"string render(IError errorToRender, bool shouldDebug)": {
				"origin": "string render(IError errorToRender, bool shouldDebug)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IError errorToRender",
					"bool shouldDebug"
				],
				"datatype": "string",
				"name": "render",
				"header": "string render(IError errorToRender, bool shouldDebug)",
				"isStatic": false
			},
			"void write(string aout)": {
				"origin": "void write(string aout)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aout"
				],
				"datatype": "void",
				"name": "write",
				"header": "void write(string aout)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-errors"
	},
	"IFixtureStrategy": {
		"origin": "interface IFixtureStrategy {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"Base interface for strategies used to manage fixtures for TestCase."
		],
		"namespace": "uim.oop.interfaces.fixturestrategy",
		"name": "IFixtureStrategy",
		"header": "IFixtureStrategy",
		"methods": {
			"void teardownTest() */": {
				"origin": "void teardownTest() */",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					") */"
				],
				"datatype": "void",
				"name": "teardownTest",
				"header": "void teardownTest() */",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IFilesystemEntry": {
		"origin": "interface IFilesystemEntry : INamed {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.entry",
		"name": "IFilesystemEntry",
		"header": "IFilesystemEntry : INamed",
		"methods": {
			"string absolutePath(string aPath)": {
				"origin": "string absolutePath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string aPath)",
				"isStatic": false
			},
			"bool hasFilesystem()": {
				"origin": "bool hasFilesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "hasFilesystem",
				"header": "bool hasFilesystem()",
				"isStatic": false
			},
			"string[] path()": {
				"origin": "string[] path()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "path",
				"header": "string[] path()",
				"isStatic": false
			},
			"bool isFile()": {
				"origin": "bool isFile()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile()",
				"isStatic": false
			},
			"bool isLink()": {
				"origin": "bool isLink()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink()",
				"isStatic": false
			},
			"IFolder parentFolder()": {
				"origin": "IFolder parentFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder",
				"name": "parentFolder",
				"header": "IFolder parentFolder()",
				"isStatic": false
			},
			"IFilesystem filesystem()": {
				"origin": "IFilesystem filesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFilesystem",
				"name": "filesystem",
				"header": "IFilesystem filesystem()",
				"isStatic": false
			},
			"void path(string[] aPath)": {
				"origin": "void path(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "void",
				"name": "path",
				"header": "void path(string[] aPath)",
				"isStatic": false
			},
			"void parentFolder(IFolder aFolder)": {
				"origin": "void parentFolder(IFolder aFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder"
				],
				"datatype": "void",
				"name": "parentFolder",
				"header": "void parentFolder(IFolder aFolder)",
				"isStatic": false
			},
			"size_t size()": {
				"origin": "size_t size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"string toString()": {
				"origin": "string toString()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "toString",
				"header": "string toString()",
				"isStatic": false
			},
			"bool rename(string newName)": {
				"origin": "bool rename(string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string newName"
				],
				"datatype": "bool",
				"name": "rename",
				"header": "bool rename(string newName)",
				"isStatic": false
			},
			"string relPath(string[] aPath = null)": {
				"origin": "string relPath(string[] aPath = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath = null"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string[] aPath = null)",
				"isStatic": false
			},
			"bool isHidden()": {
				"origin": "bool isHidden()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden()",
				"isStatic": false
			},
			"string relPath(string aPath)": {
				"origin": "string relPath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string aPath)",
				"isStatic": false
			},
			"string absolutePath(string[] aPath = null)": {
				"origin": "string absolutePath(string[] aPath = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath = null"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string[] aPath = null)",
				"isStatic": false
			},
			"bool isFolder()": {
				"origin": "bool isFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-filesystems"
	},
	"ILoggerAware": {
		"origin": "interface ILoggerAware {",
		"package": "uim.logging.interfaces",
		"visibility": "public",
		"comments": [
			"Describes a logger-aware instance."
		],
		"namespace": "uim.logging.interfaces.aware",
		"name": "ILoggerAware",
		"header": "ILoggerAware",
		"methods": {
			"void logger(ILogger aLogger)": {
				"origin": "void logger(ILogger aLogger)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"ILogger aLogger"
				],
				"datatype": "void",
				"name": "logger",
				"header": "void logger(ILogger aLogger)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-logging"
	},
	"ILogEngine": {
		"origin": "interface ILogEngine {",
		"package": "uim.logging.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.logging.interfaces.engine",
		"name": "ILogEngine",
		"header": "ILogEngine",
		"methods": {},
		"implements": [],
		"library": "uim-logging"
	},
	"IFolderManager": {
		"origin": "interface IFolderManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.foldermanager",
		"name": "IFolderManager",
		"header": "IFolderManager",
		"methods": {
			"final bool addFolders(IFolder[] someFolders...) {": {
				"origin": "final bool addFolders(IFolder[] someFolders...) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFolder[] someFolders..."
				],
				"datatype": "final",
				"name": "bool addFolders",
				"header": "final bool addFolders(IFolder[] someFolders...)",
				"isStatic": false
			},
			"bool removeFolder(string aPath)": {
				"origin": "bool removeFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string aPath)",
				"isStatic": false
			},
			"bool removeFolder(string[] aPath, string aFolderName)": {
				"origin": "bool removeFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders(string[] aPath)": {
				"origin": "IFolder[] folders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string[] aPath)",
				"isStatic": false
			},
			"bool removeFolder(string aPath, string aFolderName)": {
				"origin": "bool removeFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool renameFolder(string[] oldPathAndName, string newName)": {
				"origin": "bool renameFolder(string[] oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string[] oldPathAndName, string newName)",
				"isStatic": false
			},
			"size_t countFolders(string[] aPath)": {
				"origin": "size_t countFolders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string[] aPath)",
				"isStatic": false
			},
			"size_t countFolders(string[] aPath, string aFolderName)": {
				"origin": "size_t countFolders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool copyFolder(string fromPath, string toPath)": {
				"origin": "bool copyFolder(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFolder folder(string[] aPath)": {
				"origin": "IFolder folder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string[] aPath)",
				"isStatic": false
			},
			"bool copyFolder(string[] fromPath, string[] toPath)": {
				"origin": "bool copyFolder(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool existsFolder(string aPath, string aFolderName)": {
				"origin": "bool existsFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder folder(string aPath, string aFolderName)": {
				"origin": "IFolder folder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders()": {
				"origin": "IFolder[] folders()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders()",
				"isStatic": false
			},
			"size_t countFolders(string aPath, string aFolderName)": {
				"origin": "size_t countFolders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolders(string aPath)": {
				"origin": "bool existsFolders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string aPath)",
				"isStatic": false
			},
			"IFolder folder(string aPath)": {
				"origin": "IFolder folder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string aPath)",
				"isStatic": false
			},
			"bool existsFolder(string[] aPath)": {
				"origin": "bool existsFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string[] aPath)",
				"isStatic": false
			},
			"bool existsFolders(string[] aPath, string aFolderName)": {
				"origin": "bool existsFolders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder[] folders(string aPath, string aFolderName)": {
				"origin": "IFolder[] folders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolder(string[] aPath, string aFolderName)": {
				"origin": "bool existsFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool copyFolder(IFolder aFolder, string[] toPath)": {
				"origin": "bool copyFolder(IFolder aFolder, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(IFolder aFolder, string[] toPath)",
				"isStatic": false
			},
			"IFolder createFolder(string aPath, string aFolderName)": {
				"origin": "IFolder createFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"final bool addFolders(IFolder[] someFolders) {": {
				"origin": "final bool addFolders(IFolder[] someFolders) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"IFolder[] someFolders"
				],
				"datatype": "final",
				"name": "bool addFolders",
				"header": "final bool addFolders(IFolder[] someFolders)",
				"isStatic": false
			},
			"bool renameFolder(string[] aPath, string oldName, string newName)": {
				"origin": "bool renameFolder(string[] aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string[] aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool addFolder(IFolder aFolder)": {
				"origin": "bool addFolder(IFolder aFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder"
				],
				"datatype": "bool",
				"name": "addFolder",
				"header": "bool addFolder(IFolder aFolder)",
				"isStatic": false
			},
			"bool moveFolder(IFolder aFolder, IFolder toFolder)": {
				"origin": "bool moveFolder(IFolder aFolder, IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(IFolder aFolder, IFolder toFolder)",
				"isStatic": false
			},
			"IFolder[] folders(string aPath)": {
				"origin": "IFolder[] folders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string aPath)",
				"isStatic": false
			},
			"bool existsFolders(string[] aPath)": {
				"origin": "bool existsFolders(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string[] aPath)",
				"isStatic": false
			},
			"size_t countFolders(string aPath)": {
				"origin": "size_t countFolders(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "size_t",
				"name": "countFolders",
				"header": "size_t countFolders(string aPath)",
				"isStatic": false
			},
			"bool moveFolder(string[] fromPath, string[] toPath)": {
				"origin": "bool moveFolder(string[] fromPath, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] fromPath",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(string[] fromPath, string[] toPath)",
				"isStatic": false
			},
			"bool renameFolder(string aPath, string oldName, string newName)": {
				"origin": "bool renameFolder(string aPath, string oldName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string oldName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string aPath, string oldName, string newName)",
				"isStatic": false
			},
			"bool renameFolder(string oldPathAndName, string newName)": {
				"origin": "bool renameFolder(string oldPathAndName, string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string oldPathAndName",
					"string newName"
				],
				"datatype": "bool",
				"name": "renameFolder",
				"header": "bool renameFolder(string oldPathAndName, string newName)",
				"isStatic": false
			},
			"bool removeFolder(string[] aPath)": {
				"origin": "bool removeFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "removeFolder",
				"header": "bool removeFolder(string[] aPath)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string aPath, string aFolderName)": {
				"origin": "IFolder createIfNotExistsFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createFolder(string[] aPath)": {
				"origin": "IFolder createFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string[] aPath)",
				"isStatic": false
			},
			"IFolder createFolder(string[] aPath, string aFolderName)": {
				"origin": "IFolder createFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolders(string aPath, string aFolderName)": {
				"origin": "bool existsFolders(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "existsFolders",
				"header": "bool existsFolders(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool existsFolder(string aPath)": {
				"origin": "bool existsFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "existsFolder",
				"header": "bool existsFolder(string aPath)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)": {
				"origin": "IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string[] aPath)": {
				"origin": "IFolder createIfNotExistsFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string[] aPath)",
				"isStatic": false
			},
			"bool moveFolder(string fromPath, string toPath)": {
				"origin": "bool moveFolder(string fromPath, string toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string fromPath",
					"string toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(string fromPath, string toPath)",
				"isStatic": false
			},
			"IFolder[] folders(string[] aPath, string aFolderName)": {
				"origin": "IFolder[] folders(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder[]",
				"name": "folders",
				"header": "IFolder[] folders(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool moveFolder(IFolder aFolder, string[] toPath)": {
				"origin": "bool moveFolder(IFolder aFolder, string[] toPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"string[] toPath"
				],
				"datatype": "bool",
				"name": "moveFolder",
				"header": "bool moveFolder(IFolder aFolder, string[] toPath)",
				"isStatic": false
			},
			"IFolder folder(string[] aPath, string aFolderName)": {
				"origin": "IFolder folder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "IFolder",
				"name": "folder",
				"header": "IFolder folder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"IFolder createIfNotExistsFolder(string aPath)": {
				"origin": "IFolder createIfNotExistsFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "createIfNotExistsFolder",
				"header": "IFolder createIfNotExistsFolder(string aPath)",
				"isStatic": false
			},
			"IFolder createFolder(string aPath)": {
				"origin": "IFolder createFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "IFolder",
				"name": "createFolder",
				"header": "IFolder createFolder(string aPath)",
				"isStatic": false
			},
			"bool copyFolder(IFolder aFolder, IFolder toFolder)": {
				"origin": "bool copyFolder(IFolder aFolder, IFolder toFolder)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IFolder aFolder",
					"IFolder toFolder"
				],
				"datatype": "bool",
				"name": "copyFolder",
				"header": "bool copyFolder(IFolder aFolder, IFolder toFolder)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-filesystems"
	},
	"IValidatorAware": {
		"origin": "interface IValidatorAware {",
		"package": "uim.validations.interfaces",
		"visibility": "public",
		"comments": [
			"Provides methods for managing multiple validators."
		],
		"namespace": "uim.validations.interfaces.validatoraware",
		"name": "IValidatorAware",
		"header": "IValidatorAware",
		"methods": {
			"bool hasValidator(string validatorName) */": {
				"origin": "bool hasValidator(string validatorName) */",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string validatorName) */"
				],
				"datatype": "bool",
				"name": "hasValidator",
				"header": "bool hasValidator(string validatorName) */",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-validations"
	},
	"IConfigurable": {
		"origin": "interface IConfigurable {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.configurable",
		"name": "IConfigurable",
		"header": "IConfigurable",
		"methods": {
			"void configuration(IConfiguration newConfiguration)": {
				"origin": "void configuration(IConfiguration newConfiguration)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IConfiguration newConfiguration"
				],
				"datatype": "void",
				"name": "configuration",
				"header": "void configuration(IConfiguration newConfiguration)",
				"isStatic": false
			},
			"IConfiguration configuration()": {
				"origin": "IConfiguration configuration()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IConfiguration",
				"name": "configuration",
				"header": "IConfiguration configuration()",
				"isStatic": false
			},
			"final void setConfiguration(string key, Json value) {": {
				"origin": "final void setConfiguration(string key, Json value) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json value"
				],
				"datatype": "final",
				"name": "void setConfiguration",
				"header": "final void setConfiguration(string key, Json value)",
				"isStatic": false
			},
			"final Json getConfiguration(string key) {": {
				"origin": "final Json getConfiguration(string key) ",
				"isFinal": true,
				"isProperty": false,
				"parameters": [
					"string key"
				],
				"datatype": "final",
				"name": "Json getConfiguration",
				"header": "final Json getConfiguration(string key)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IMap": {
		"origin": "interface IMap {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.map",
		"name": "IMap",
		"header": "IMap",
		"methods": {
			"bool isEmpty()": {
				"origin": "bool isEmpty()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "isEmpty",
				"header": "bool isEmpty()",
				"isStatic": false
			},
			"size_t length()": {
				"origin": "size_t length()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "length",
				"header": "size_t length()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"ICache": {
		"origin": "interface ICache {",
		"package": "uim.caches.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.caches.interfaces.cache",
		"name": "ICache",
		"header": "ICache",
		"methods": {},
		"implements": [],
		"library": "uim-caches"
	},
	"IControllerManager": {
		"origin": "interface IControllerManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.controllermanager",
		"name": "IControllerManager",
		"header": "IControllerManager",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IPluginApplication /*": {
		"origin": "interface IPluginApplication /* : IEventDispatcher */ { // TODO",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"",
			"Interface for Applications that leverage plugins & events.",
			"",
			"Events can be bound to the application event manager during",
			"the application`s bootstrap and plugin bootstrap.",
			""
		],
		"namespace": "uim.oop.interfaces.pluginapplication",
		"name": "IPluginApplication /*",
		"header": "IPluginApplication /* : IEventDispatcher */",
		"methods": {
			"void addPlugin(string pluginName, Json Data = null)": {
				"origin": "void addPlugin(string pluginName, Json Data = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string pluginName",
					"Json Data = null"
				],
				"datatype": "void",
				"name": "addPlugin",
				"header": "void addPlugin(string pluginName, Json Data = null)",
				"isStatic": false
			},
			"void pluginBootstrap()": {
				"origin": "void pluginBootstrap()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "void",
				"name": "pluginBootstrap",
				"header": "void pluginBootstrap()",
				"isStatic": false
			}
		},
		"implements": [
			"IEventDispatcher */"
		],
		"library": "uim-oop"
	},
	"IFormatter": {
		"origin": "interface IFormatter : INamed {",
		"package": "uim.oop.formatters",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.formatters.interfaces",
		"name": "IFormatter",
		"header": "IFormatter : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-oop"
	},
	"IRoutingApplication": {
		"origin": "interface IRoutingApplication {",
		"package": "uim.routings.interfaces",
		"visibility": "public",
		"comments": [
			"Interface for applications that use routing."
		],
		"namespace": "uim.routings.interfaces.routingapplication",
		"name": "IRoutingApplication",
		"header": "IRoutingApplication",
		"methods": {},
		"implements": [],
		"library": "uim-routings"
	},
	"IFilesystem": {
		"origin": "interface IFilesystem : IFolderManager, IFileManager, ILinkManager {",
		"package": "uim.filesystems.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.filesystems.interfaces.filesystem",
		"name": "IFilesystem",
		"header": "IFilesystem : IFolderManager, IFileManager, ILinkManager",
		"methods": {
			"string absolutePath(string[] aPath)": {
				"origin": "string absolutePath(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string[] aPath)",
				"isStatic": false
			},
			"bool isFile(string[] aPath)": {
				"origin": "bool isFile(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string[] aPath)",
				"isStatic": false
			},
			"void appendTextToFile(string[] aPath, string aFileName, string aText)": {
				"origin": "void appendTextToFile(string[] aPath, string aFileName, string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"string aText"
				],
				"datatype": "void",
				"name": "appendTextToFile",
				"header": "void appendTextToFile(string[] aPath, string aFileName, string aText)",
				"isStatic": false
			},
			"bool isLink(string[] aPath, string aFolderName)": {
				"origin": "bool isLink(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isFolder(string[] aPath, string aFolderName)": {
				"origin": "bool isFolder(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"string pathSeparator()": {
				"origin": "string pathSeparator()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "pathSeparator",
				"header": "string pathSeparator()",
				"isStatic": false
			},
			"bool isHidden(string[] aPath, string aFolderName)": {
				"origin": "bool isHidden(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isLink(string aPath, string aFolderName)": {
				"origin": "bool isLink(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void appendToFile(string[] aPath, string aFileName, const void[] buffer)": {
				"origin": "void appendToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"const void[] buffer"
				],
				"datatype": "void",
				"name": "appendToFile",
				"header": "void appendToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isStatic": false
			},
			"bool isHidden(string aPath)": {
				"origin": "bool isHidden(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string aPath)",
				"isStatic": false
			},
			"bool isLink(string aPath)": {
				"origin": "bool isLink(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string aPath)",
				"isStatic": false
			},
			"void writeTextToFile(string[] aPath, string aFileName, string aText)": {
				"origin": "void writeTextToFile(string[] aPath, string aFileName, string aText)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"string aText"
				],
				"datatype": "void",
				"name": "writeTextToFile",
				"header": "void writeTextToFile(string[] aPath, string aFileName, string aText)",
				"isStatic": false
			},
			"IFilesystem filesystem()": {
				"origin": "IFilesystem filesystem()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFilesystem",
				"name": "filesystem",
				"header": "IFilesystem filesystem()",
				"isStatic": false
			},
			"string readTextFromFile(string[] aPath, string aFileName)": {
				"origin": "string readTextFromFile(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "string",
				"name": "readTextFromFile",
				"header": "string readTextFromFile(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"bool isHidden(string aPath, string aFolderName)": {
				"origin": "bool isHidden(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isFolder(string[] aPath)": {
				"origin": "bool isFolder(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string[] aPath)",
				"isStatic": false
			},
			"void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)": {
				"origin": "void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"size_t numberOfBytes = size_t.max"
				],
				"datatype": "void[]",
				"name": "readFromFile",
				"header": "void[] readFromFile(string[] aPath, string aFileName, size_t numberOfBytes = size_t.max)",
				"isStatic": false
			},
			"string absolutePath(string aPath)": {
				"origin": "string absolutePath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "absolutePath",
				"header": "string absolutePath(string aPath)",
				"isStatic": false
			},
			"string[] readLines(string[] aPath, string aFileName)": {
				"origin": "string[] readLines(string[] aPath, string aFileName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName"
				],
				"datatype": "string[]",
				"name": "readLines",
				"header": "string[] readLines(string[] aPath, string aFileName)",
				"isStatic": false
			},
			"string relPath(string[] aPath)": {
				"origin": "string relPath(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string[] aPath)",
				"isStatic": false
			},
			"size_t capacity()": {
				"origin": "size_t capacity()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "capacity",
				"header": "size_t capacity()",
				"isStatic": false
			},
			"string[] path()": {
				"origin": "string[] path()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "path",
				"header": "string[] path()",
				"isStatic": false
			},
			"bool isFolder(string aPath, string aFolderName)": {
				"origin": "bool isFolder(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void writeToFile(string[] aPath, string aFileName, const void[] buffer)": {
				"origin": "void writeToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFileName",
					"const void[] buffer"
				],
				"datatype": "void",
				"name": "writeToFile",
				"header": "void writeToFile(string[] aPath, string aFileName, const void[] buffer)",
				"isStatic": false
			},
			"bool isFolder(string aPath)": {
				"origin": "bool isFolder(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isFolder",
				"header": "bool isFolder(string aPath)",
				"isStatic": false
			},
			"bool isFile(string aPath)": {
				"origin": "bool isFile(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string aPath)",
				"isStatic": false
			},
			"bool isFile(string[] aPath, string aFolderName)": {
				"origin": "bool isFile(string[] aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string[] aPath, string aFolderName)",
				"isStatic": false
			},
			"bool isLink(string[] aPath)": {
				"origin": "bool isLink(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isLink",
				"header": "bool isLink(string[] aPath)",
				"isStatic": false
			},
			"bool isHidden(string[] aPath)": {
				"origin": "bool isHidden(string[] aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] aPath"
				],
				"datatype": "bool",
				"name": "isHidden",
				"header": "bool isHidden(string[] aPath)",
				"isStatic": false
			},
			"string relPath(string aPath)": {
				"origin": "string relPath(string aPath)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath"
				],
				"datatype": "string",
				"name": "relPath",
				"header": "string relPath(string aPath)",
				"isStatic": false
			},
			"size_t availableDiskSpace()": {
				"origin": "size_t availableDiskSpace()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "availableDiskSpace",
				"header": "size_t availableDiskSpace()",
				"isStatic": false
			},
			"string rootPath()": {
				"origin": "string rootPath()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "rootPath",
				"header": "string rootPath()",
				"isStatic": false
			},
			"size_t size()": {
				"origin": "size_t size()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "size_t",
				"name": "size",
				"header": "size_t size()",
				"isStatic": false
			},
			"string type()": {
				"origin": "string type()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "type",
				"header": "string type()",
				"isStatic": false
			},
			"bool isFile(string aPath, string aFolderName)": {
				"origin": "bool isFile(string aPath, string aFolderName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aPath",
					"string aFolderName"
				],
				"datatype": "bool",
				"name": "isFile",
				"header": "bool isFile(string aPath, string aFolderName)",
				"isStatic": false
			},
			"void path(string[] path)": {
				"origin": "void path(string[] path)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] path"
				],
				"datatype": "void",
				"name": "path",
				"header": "void path(string[] path)",
				"isStatic": false
			},
			"IFolder rootFolder()": {
				"origin": "IFolder rootFolder()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IFolder",
				"name": "rootFolder",
				"header": "IFolder rootFolder()",
				"isStatic": false
			}
		},
		"implements": [
			"IFolderManager",
			"IFileManager",
			"ILinkManager"
		],
		"library": "uim-filesystems"
	},
	"IAppendable": {
		"origin": "interface IAppendable {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An object to which char sequences and values can be appended."
		],
		"namespace": "uim.oop.interfaces.appendable",
		"name": "IAppendable",
		"header": "IAppendable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IConfigEngine": {
		"origin": "interface IConfigEngine {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for creating objects compatible with Configure.load()"
		],
		"namespace": "uim.oop.interfaces.configengine",
		"name": "IConfigEngine",
		"header": "IConfigEngine",
		"methods": {
			"bool dump(string key, Json[string] dataToDump)": {
				"origin": "bool dump(string key, Json[string] dataToDump)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json[string] dataToDump"
				],
				"datatype": "bool",
				"name": "dump",
				"header": "bool dump(string key, Json[string] dataToDump)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"ILoader": {
		"origin": "interface ILoader {",
		"package": "uim.i18n.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.i18n.interfaces.loader",
		"name": "ILoader",
		"header": "ILoader",
		"methods": {
			"ICatalog catalog()": {
				"origin": "ICatalog catalog()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "ICatalog",
				"name": "catalog",
				"header": "ICatalog catalog()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-i18n"
	},
	"IShape": {
		"origin": "interface IShape {",
		"package": "uim.oop.patterns.creational",
		"visibility": "public",
		"comments": [
			"Shape interface."
		],
		"namespace": "uim.oop.patterns.creational.abstractfactory",
		"name": "IShape",
		"header": "IShape",
		"methods": {
			"DShapeFactory shapeFactory = new DShapeFactory()": {
				"origin": "DShapeFactory shapeFactory = new DShapeFactory()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "DShapeFactory",
				"name": "shapeFactory = new DShapeFactory",
				"header": "DShapeFactory shapeFactory = new DShapeFactory()",
				"isStatic": false
			},
			"IShape shape = shapeFactory.createShape(\"CIRCLE\")": {
				"origin": "IShape shape = shapeFactory.createShape(\"CIRCLE\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"\"CIRCLE\""
				],
				"datatype": "IShape",
				"name": "shape = shapeFactory.createShape",
				"header": "IShape shape = shapeFactory.createShape(\"CIRCLE\")",
				"isStatic": false
			},
			"shape = shapeFactory.createShape(\"RECTANGLE\")": {
				"origin": "shape = shapeFactory.createShape(\"RECTANGLE\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"\"RECTANGLE\""
				],
				"datatype": "shape",
				"name": "= shapeFactory.createShape",
				"header": "shape = shapeFactory.createShape(\"RECTANGLE\")",
				"isStatic": false
			},
			"shape = shapeFactory.createShape(\"SQUARE\")": {
				"origin": "shape = shapeFactory.createShape(\"SQUARE\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"\"SQUARE\""
				],
				"datatype": "shape",
				"name": "= shapeFactory.createShape",
				"header": "shape = shapeFactory.createShape(\"SQUARE\")",
				"isStatic": false
			},
			"override void draw() {": {
				"origin": "override void draw() ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "override",
				"name": "void draw",
				"header": "override void draw()",
				"isStatic": false
			},
			"if (shape) shape.draw()": {
				"origin": "if (shape) shape.draw()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "if",
				"name": "",
				"header": "if (shape) shape.draw()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	},
	"IEventObject": {
		"origin": "interface IEventObject {",
		"package": "uim.events.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.events.interfaces.eventobject",
		"name": "IEventObject",
		"header": "IEventObject",
		"methods": {},
		"implements": [],
		"library": "uim-events"
	},
	"ICacheEngine": {
		"origin": "interface ICacheEngine : INamed {",
		"package": "uim.caches.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.caches.interfaces.engine",
		"name": "ICacheEngine",
		"header": "ICacheEngine : INamed",
		"methods": {
			"Json[string] items(string[] keys)": {
				"origin": "Json[string] items(string[] keys)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys"
				],
				"datatype": "Json[string]",
				"name": "items",
				"header": "Json[string] items(string[] keys)",
				"isStatic": false
			},
			"bool merge(Json[string] newItems, long timeToLive = 0)": {
				"origin": "bool merge(Json[string] newItems, long timeToLive = 0)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] newItems",
					"long timeToLive = 0"
				],
				"datatype": "bool",
				"name": "merge",
				"header": "bool merge(Json[string] newItems, long timeToLive = 0)",
				"isStatic": false
			},
			"bool merge(string key, Json value, long timeToLive = 0)": {
				"origin": "bool merge(string key, Json value, long timeToLive = 0)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json value",
					"long timeToLive = 0"
				],
				"datatype": "bool",
				"name": "merge",
				"header": "bool merge(string key, Json value, long timeToLive = 0)",
				"isStatic": false
			},
			"void items(Json[string] newItems, long timeToLive = 0)": {
				"origin": "void items(Json[string] newItems, long timeToLive = 0)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] newItems",
					"long timeToLive = 0"
				],
				"datatype": "void",
				"name": "items",
				"header": "void items(Json[string] newItems, long timeToLive = 0)",
				"isStatic": false
			},
			"void groupName(string name)": {
				"origin": "void groupName(string name)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string name"
				],
				"datatype": "void",
				"name": "groupName",
				"header": "void groupName(string name)",
				"isStatic": false
			},
			"bool updateKey(string key, Json value, long timeToLive = 0)": {
				"origin": "bool updateKey(string key, Json value, long timeToLive = 0)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json value",
					"long timeToLive = 0"
				],
				"datatype": "bool",
				"name": "updateKey",
				"header": "bool updateKey(string key, Json value, long timeToLive = 0)",
				"isStatic": false
			},
			"bool removeKey(string key)": {
				"origin": "bool removeKey(string key)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key"
				],
				"datatype": "bool",
				"name": "removeKey",
				"header": "bool removeKey(string key)",
				"isStatic": false
			},
			"Json[] read(string key, Json defaultValue = null)": {
				"origin": "Json[] read(string key, Json defaultValue = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json defaultValue = null"
				],
				"datatype": "Json[]",
				"name": "read",
				"header": "Json[] read(string key, Json defaultValue = null)",
				"isStatic": false
			},
			"bool removeKey(string[] keys)": {
				"origin": "bool removeKey(string[] keys)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] keys"
				],
				"datatype": "bool",
				"name": "removeKey",
				"header": "bool removeKey(string[] keys)",
				"isStatic": false
			},
			"long increment(string key, int incValue = 1)": {
				"origin": "long increment(string key, int incValue = 1)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"int incValue = 1"
				],
				"datatype": "long",
				"name": "increment",
				"header": "long increment(string key, int incValue = 1)",
				"isStatic": false
			},
			"string groupName()": {
				"origin": "string groupName()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "groupName",
				"header": "string groupName()",
				"isStatic": false
			},
			"bool updateKey(Json[string] newItems, long timeToLive = 0)": {
				"origin": "bool updateKey(Json[string] newItems, long timeToLive = 0)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"Json[string] newItems",
					"long timeToLive = 0"
				],
				"datatype": "bool",
				"name": "updateKey",
				"header": "bool updateKey(Json[string] newItems, long timeToLive = 0)",
				"isStatic": false
			},
			"bool clear()": {
				"origin": "bool clear()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "bool",
				"name": "clear",
				"header": "bool clear()",
				"isStatic": false
			},
			"long decrement(string key, int decValue = 1)": {
				"origin": "long decrement(string key, int decValue = 1)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"int decValue = 1"
				],
				"datatype": "long",
				"name": "decrement",
				"header": "long decrement(string key, int decValue = 1)",
				"isStatic": false
			},
			"bool clearGroup(string groupName)": {
				"origin": "bool clearGroup(string groupName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string groupName"
				],
				"datatype": "bool",
				"name": "clearGroup",
				"header": "bool clearGroup(string groupName)",
				"isStatic": false
			},
			"string[] keys()": {
				"origin": "string[] keys()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "keys",
				"header": "string[] keys()",
				"isStatic": false
			},
			"Json read(string key, Json defaultValue = null)": {
				"origin": "Json read(string key, Json defaultValue = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string key",
					"Json defaultValue = null"
				],
				"datatype": "Json",
				"name": "read",
				"header": "Json read(string key, Json defaultValue = null)",
				"isStatic": false
			}
		},
		"implements": [
			"INamed"
		],
		"library": "uim-caches"
	},
	"IJsonCollectionManager": {
		"origin": "interface IJsonCollectionManager {",
		"package": "uim.jsonbases.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.jsonbases.interfaces.collectionmanager",
		"name": "IJsonCollectionManager",
		"header": "IJsonCollectionManager",
		"methods": {
			"size_t countCollections(string[] someNames = null)": {
				"origin": "size_t countCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "size_t",
				"name": "countCollections",
				"header": "size_t countCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool hasCollections(string[] someNames...)": {
				"origin": "bool hasCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "hasCollections",
				"header": "bool hasCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[string] someCollections)": {
				"origin": "bool addCollections(IJsonCollection[string] someCollections)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[string] someCollections"
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[string] someCollections)",
				"isStatic": false
			},
			"string[] existingCollections(string[] someNames = null)": {
				"origin": "string[] existingCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "string[]",
				"name": "existingCollections",
				"header": "string[] existingCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool deleteCollection(string aName)": {
				"origin": "bool deleteCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "deleteCollection",
				"header": "bool deleteCollection(string aName)",
				"isStatic": false
			},
			"IJsonCollection[] createCollections(string[] someNames...)": {
				"origin": "IJsonCollection[] createCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "IJsonCollection[]",
				"name": "createCollections",
				"header": "IJsonCollection[] createCollections(string[] someNames...)",
				"isStatic": false
			},
			"string[] existingCollections(string[] someNames...)": {
				"origin": "string[] existingCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "string[]",
				"name": "existingCollections",
				"header": "string[] existingCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollection(IJsonCollection aCollection)": {
				"origin": "bool addCollection(IJsonCollection aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection aCollection"
				],
				"datatype": "bool",
				"name": "addCollection",
				"header": "bool addCollection(IJsonCollection aCollection)",
				"isStatic": false
			},
			"bool addCollection(string aName, IJsonCollection aCollection)": {
				"origin": "bool addCollection(string aName, IJsonCollection aCollection)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IJsonCollection aCollection"
				],
				"datatype": "bool",
				"name": "addCollection",
				"header": "bool addCollection(string aName, IJsonCollection aCollection)",
				"isStatic": false
			},
			"string[] collectionNames()": {
				"origin": "string[] collectionNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "collectionNames",
				"header": "string[] collectionNames()",
				"isStatic": false
			},
			"IJsonCollection[] collections()": {
				"origin": "IJsonCollection[] collections()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IJsonCollection[]",
				"name": "collections",
				"header": "IJsonCollection[] collections()",
				"isStatic": false
			},
			"IJsonCollection createCollection(string aName)": {
				"origin": "IJsonCollection createCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonCollection",
				"name": "createCollection",
				"header": "IJsonCollection createCollection(string aName)",
				"isStatic": false
			},
			"IJsonCollection collection(string aName)": {
				"origin": "IJsonCollection collection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IJsonCollection",
				"name": "collection",
				"header": "IJsonCollection collection(string aName)",
				"isStatic": false
			},
			"IJsonCollection[] createCollections(string[] someNames)": {
				"origin": "IJsonCollection[] createCollections(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "IJsonCollection[]",
				"name": "createCollections",
				"header": "IJsonCollection[] createCollections(string[] someNames)",
				"isStatic": false
			},
			"bool deleteCollections(string[] someNames)": {
				"origin": "bool deleteCollections(string[] someNames)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames"
				],
				"datatype": "bool",
				"name": "deleteCollections",
				"header": "bool deleteCollections(string[] someNames)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[] someCollections...)": {
				"origin": "bool addCollections(IJsonCollection[] someCollections...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[] someCollections..."
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[] someCollections...)",
				"isStatic": false
			},
			"bool hasCollection(string aName)": {
				"origin": "bool hasCollection(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "hasCollection",
				"header": "bool hasCollection(string aName)",
				"isStatic": false
			},
			"size_t countCollections(string[] someNames...)": {
				"origin": "size_t countCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "size_t",
				"name": "countCollections",
				"header": "size_t countCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool hasCollections(string[] someNames = null)": {
				"origin": "bool hasCollections(string[] someNames = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames = null"
				],
				"datatype": "bool",
				"name": "hasCollections",
				"header": "bool hasCollections(string[] someNames = null)",
				"isStatic": false
			},
			"bool deleteCollections(string[] someNames...)": {
				"origin": "bool deleteCollections(string[] someNames...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[] someNames..."
				],
				"datatype": "bool",
				"name": "deleteCollections",
				"header": "bool deleteCollections(string[] someNames...)",
				"isStatic": false
			},
			"bool addCollections(IJsonCollection[] someCollections)": {
				"origin": "bool addCollections(IJsonCollection[] someCollections)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IJsonCollection[] someCollections"
				],
				"datatype": "bool",
				"name": "addCollections",
				"header": "bool addCollections(IJsonCollection[] someCollections)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-jsonbases"
	},
	"ICatalog": {
		"origin": "interface ICatalog {",
		"package": "uim.i18n.interfaces",
		"visibility": "public",
		"comments": [
			"Message Catalog"
		],
		"namespace": "uim.i18n.interfaces.catalog",
		"name": "ICatalog",
		"header": "ICatalog",
		"methods": {},
		"implements": [],
		"library": "uim-i18n"
	},
	"ISessionManager": {
		"origin": "interface ISessionManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.sessionmanager",
		"name": "ISessionManager",
		"header": "ISessionManager",
		"methods": {},
		"implements": [],
		"library": "uim-apps"
	},
	"IExceptionRenderer": {
		"origin": "interface IExceptionRenderer {",
		"package": "uim.errors.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.errors.interfaces.exceptionrenderer",
		"name": "IExceptionRenderer",
		"header": "IExceptionRenderer",
		"methods": {},
		"implements": [],
		"library": "uim-errors"
	},
	"IRequestHandler": {
		"origin": "interface IRequestHandler {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.requesthandler",
		"name": "IRequestHandler",
		"header": "IRequestHandler",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IControllerCheck": {
		"origin": "interface IControllerCheck {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.check",
		"name": "IControllerCheck",
		"header": "IControllerCheck",
		"methods": {
			"bool run(IController controller, Json[string] options = null)": {
				"origin": "bool run(IController controller, Json[string] options = null)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IController controller",
					"Json[string] options = null"
				],
				"datatype": "bool",
				"name": "run",
				"header": "bool run(IController controller, Json[string] options = null)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-controllers"
	},
	"IKeyAndPath": {
		"origin": "interface IKeyAndPath {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.keyandpath",
		"name": "IKeyAndPath",
		"header": "IKeyAndPath",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IElement": {
		"origin": "interface IElement {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.element",
		"name": "IElement",
		"header": "IElement",
		"methods": {
			"void readFromRequest(string[string] requestValues, bool usePrefix = true)": {
				"origin": "void readFromRequest(string[string] requestValues, bool usePrefix = true)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[string] requestValues",
					"bool usePrefix = true"
				],
				"datatype": "void",
				"name": "readFromRequest",
				"header": "void readFromRequest(string[string] requestValues, bool usePrefix = true)",
				"isStatic": false
			},
			"void readFromStringAA(string[string] reqParameters, bool usePrefix = false)": {
				"origin": "void readFromStringAA(string[string] reqParameters, bool usePrefix = false)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string[string] reqParameters",
					"bool usePrefix = false"
				],
				"datatype": "void",
				"name": "readFromStringAA",
				"header": "void readFromStringAA(string[string] reqParameters, bool usePrefix = false)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-models"
	},
	"IAttribute": {
		"origin": "interface IAttribute {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.attribute",
		"name": "IAttribute",
		"header": "IAttribute",
		"methods": {
			"bool hasDataFormat(string dataFormatName)": {
				"origin": "bool hasDataFormat(string dataFormatName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string dataFormatName"
				],
				"datatype": "bool",
				"name": "hasDataFormat",
				"header": "bool hasDataFormat(string dataFormatName)",
				"isStatic": false
			},
			"string[] dataFormats()": {
				"origin": "string[] dataFormats()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "dataFormats",
				"header": "string[] dataFormats()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-models"
	},
	"ICommandCollectionAware": {
		"origin": "interface ICommandCollectionAware {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [
			"An interface for shells that take a CommandCollection during initialization."
		],
		"namespace": "uim.consoles.interfaces.collectionaware",
		"name": "ICommandCollectionAware",
		"header": "ICommandCollectionAware",
		"methods": {},
		"implements": [],
		"library": "uim-consoles"
	},
	"IRequest": {
		"origin": "interface IRequest {",
		"package": "uim.http.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.http.interfaces.request",
		"name": "IRequest",
		"header": "IRequest",
		"methods": {},
		"implements": [],
		"library": "uim-http"
	},
	"IData": {
		"origin": "interface IData {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.data",
		"name": "IData",
		"header": "IData",
		"methods": {
			"capitalize: function(string) {": {
				"origin": "capitalize: function(string) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string"
				],
				"datatype": "capitalize:",
				"name": "function",
				"header": "capitalize: function(string)",
				"isStatic": false
			},
			".map(function(line) { return line.words.split(' ') })": {
				"origin": ".map(function(line) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".map(function(line)",
				"name": "",
				"header": ".map(function(line)",
				"isStatic": false
			},
			"_.each(everyoneElse, sendConsolations)": {
				"origin": "_.each(everyoneElse, sendConsolations)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "_.each(everyoneElse,",
				"name": "",
				"header": "_.each(everyoneElse, sendConsolations)",
				"isStatic": false
			},
			"return \"before, \" + func(\"moe\") + \", after\"": {
				"origin": "return \"before, \" + func(\"moe\") + \", after\"",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"\"moe\") + \"",
					"after\""
				],
				"datatype": "return",
				"name": "\"before, \" + func",
				"header": "return \"before, \" + func(\"moe\") + \", after\"",
				"isStatic": false
			},
			"JST.project = <%= _.template(jstText).source %>": {
				"origin": "JST.project = <%= _.template(jstText).source %>",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"jstText).source %>"
				],
				"datatype": "JST.project",
				"name": "= <%= _.template",
				"header": "JST.project = <%= _.template(jstText).source %>",
				"isStatic": false
			},
			"note.asyncSave({success: renderNotes})": {
				"origin": "note.asyncSave(",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "note.asyncSave(",
				"name": "",
				"header": "note.asyncSave(",
				"isStatic": false
			},
			".map(function(stooge){ return stooge.name + ' is ' + stooge.age })": {
				"origin": ".map(function(stooge)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".map(function(stooge)",
				"name": "",
				"header": ".map(function(stooge)",
				"isStatic": false
			},
			"toPath: function(path) {": {
				"origin": "toPath: function(path) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"path"
				],
				"datatype": "toPath:",
				"name": "function",
				"header": "toPath: function(path)",
				"isStatic": false
			},
			".tap(alert)": {
				"origin": ".tap(alert)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".tap(alert)",
				"name": "",
				"header": ".tap(alert)",
				"isStatic": false
			},
			".map(function(num) { return num * num })": {
				"origin": ".map(function(num) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".map(function(num)",
				"name": "",
				"header": ".map(function(num)",
				"isStatic": false
			},
			"return builtinIteratee(value, context)": {
				"origin": "return builtinIteratee(value, context)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"value",
					"context"
				],
				"datatype": "return",
				"name": "builtinIteratee",
				"header": "return builtinIteratee(value, context)",
				"isStatic": false
			},
			"interpolate: /\\{\\{(.+?)\\}\\}/g": {
				"origin": "interpolate: /\\",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "interpolate:",
				"name": "",
				"header": "interpolate: /\\",
				"isStatic": false
			},
			".flatten()": {
				"origin": ".flatten()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".flatten()",
				"name": "",
				"header": ".flatten()",
				"isStatic": false
			},
			".reduce(function(counts, word) {": {
				"origin": ".reduce(function(counts, word) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".reduce(function(counts,",
				"name": "",
				"header": ".reduce(function(counts, word)",
				"isStatic": false
			},
			".sortBy(function(stooge){ return stooge.age })": {
				"origin": ".sortBy(function(stooge)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".sortBy(function(stooge)",
				"name": "",
				"header": ".sortBy(function(stooge)",
				"isStatic": false
			},
			"return _.isNumber(value)": {
				"origin": "return _.isNumber(value)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"value"
				],
				"datatype": "return",
				"name": "_.isNumber",
				"header": "return _.isNumber(value)",
				"isStatic": false
			},
			"if (_.isRegExp(value)) return function(obj) { return value.test(obj) }": {
				"origin": "if (_.isRegExp(value)) return function(obj) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "if",
				"name": "",
				"header": "if (_.isRegExp(value)) return function(obj)",
				"isStatic": false
			},
			".filter(function(num) { return num % 2 == 0 })": {
				"origin": ".filter(function(num) ",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".filter(function(num)",
				"name": "",
				"header": ".filter(function(num)",
				"isStatic": false
			},
			"onClick: function(){ alert('clicked: ' + this.label) },": {
				"origin": "onClick: function()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "onClick:",
				"name": "function",
				"header": "onClick: function()",
				"isStatic": false
			},
			"throw new TypeError(\"Example\")": {
				"origin": "throw new TypeError(\"Example\")",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"\"Example\""
				],
				"datatype": "throw",
				"name": "new TypeError",
				"header": "throw new TypeError(\"Example\")",
				"isStatic": false
			},
			"onHover: function(){ console.log('hovering: ' + this.label) }": {
				"origin": "onHover: function()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "onHover:",
				"name": "function",
				"header": "onHover: function()",
				"isStatic": false
			},
			".first()": {
				"origin": ".first()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".first()",
				"name": "",
				"header": ".first()",
				"isStatic": false
			},
			"return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2)": {
				"origin": "return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"n - 1) + fibonacci"
				],
				"datatype": "return",
				"name": "n < 2 ? n: fibonacci",
				"header": "return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2)",
				"isStatic": false
			},
			".value()": {
				"origin": ".value()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": ".value()",
				"name": "",
				"header": ".value()",
				"isStatic": false
			},
			"_.isError(o_O)": {
				"origin": "_.isError(o_O)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "_.isError(o_O)",
				"name": "",
				"header": "_.isError(o_O)",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-models"
	},
	"ITable": {
		"origin": "interface ITable {",
		"package": "uim.controllers.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.controllers.interfaces.table",
		"name": "ITable",
		"header": "ITable",
		"methods": {},
		"implements": [],
		"library": "uim-controllers"
	},
	"IRoutingMiddleware": {
		"origin": "interface IRoutingMiddleware {",
		"package": "uim.routings.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.routings.interfaces.middleware",
		"name": "IRoutingMiddleware",
		"header": "IRoutingMiddleware",
		"methods": {},
		"implements": [],
		"library": "uim-routings"
	},
	"ICloneable": {
		"origin": "interface ICloneable {}",
		"package": "uim.oop.patterns.creational",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.patterns.creational.prototypes",
		"name": "ICloneable",
		"header": "ICloneable",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"IEnumeration": {
		"origin": "interface IEnumeration {}",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.enumeration",
		"name": "IEnumeration",
		"header": "IEnumeration",
		"methods": {},
		"implements": [],
		"library": "uim-oop"
	},
	"ILogFormatter": {
		"origin": "interface ILogFormatter : INamed {",
		"package": "uim.logging.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.logging.interfaces.formatter",
		"name": "ILogFormatter",
		"header": "ILogFormatter : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-logging"
	},
	"IConsoleOptionParser": {
		"origin": "interface IConsoleOptionParser {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.consoles.interfaces.consoleoptionparser",
		"name": "IConsoleOptionParser",
		"header": "IConsoleOptionParser",
		"methods": {},
		"implements": [],
		"library": "uim-consoles"
	},
	"IConsole": {
		"origin": "interface IConsole : INamed {",
		"package": "uim.consoles.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.consoles.interfaces.console",
		"name": "IConsole",
		"header": "IConsole : INamed",
		"methods": {},
		"implements": [
			"INamed"
		],
		"library": "uim-consoles"
	},
	"IValue": {
		"origin": "interface IValue {",
		"package": "uim.models.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.models.interfaces.value",
		"name": "IValue",
		"header": "IValue",
		"methods": {},
		"implements": [],
		"library": "uim-models"
	},
	"IAppManager": {
		"origin": "interface IAppManager : IViewManager, IControllerManager {",
		"package": "uim.apps.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.apps.interfaces.appmanager",
		"name": "IAppManager",
		"header": "IAppManager : IViewManager, IControllerManager",
		"methods": {
			"bool hasApp(IApp aApp)": {
				"origin": "bool hasApp(IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "hasApp",
				"header": "bool hasApp(IApp aApp)",
				"isStatic": false
			},
			"bool hasApp(string aName)": {
				"origin": "bool hasApp(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "hasApp",
				"header": "bool hasApp(string aName)",
				"isStatic": false
			},
			"bool removeApp(string aName)": {
				"origin": "bool removeApp(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "bool",
				"name": "removeApp",
				"header": "bool removeApp(string aName)",
				"isStatic": false
			},
			"bool addApp(IApp aApp)": {
				"origin": "bool addApp(IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "addApp",
				"header": "bool addApp(IApp aApp)",
				"isStatic": false
			},
			"ISessionContainer sessionContainer()": {
				"origin": "ISessionContainer sessionContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "ISessionContainer",
				"name": "sessionContainer",
				"header": "ISessionContainer sessionContainer()",
				"isStatic": false
			},
			"IApp[] apps()": {
				"origin": "IApp[] apps()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IApp[]",
				"name": "apps",
				"header": "IApp[] apps()",
				"isStatic": false
			},
			"bool addApp(string aName, IApp aApp)": {
				"origin": "bool addApp(string aName, IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "addApp",
				"header": "bool addApp(string aName, IApp aApp)",
				"isStatic": false
			},
			"bool updateApp(IApp aApp)": {
				"origin": "bool updateApp(IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "updateApp",
				"header": "bool updateApp(IApp aApp)",
				"isStatic": false
			},
			"IViewContainer viewContainer()": {
				"origin": "IViewContainer viewContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IViewContainer",
				"name": "viewContainer",
				"header": "IViewContainer viewContainer()",
				"isStatic": false
			},
			"void addApps(IApp[] someApps)": {
				"origin": "void addApps(IApp[] someApps)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp[] someApps"
				],
				"datatype": "void",
				"name": "addApps",
				"header": "void addApps(IApp[] someApps)",
				"isStatic": false
			},
			"void addApps(IApp[string] someApps)": {
				"origin": "void addApps(IApp[string] someApps)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp[string] someApps"
				],
				"datatype": "void",
				"name": "addApps",
				"header": "void addApps(IApp[string] someApps)",
				"isStatic": false
			},
			"void addApps(IApp[] someApps...)": {
				"origin": "void addApps(IApp[] someApps...)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp[] someApps..."
				],
				"datatype": "void",
				"name": "addApps",
				"header": "void addApps(IApp[] someApps...)",
				"isStatic": false
			},
			"bool updateApp(string aName, IApp aApp)": {
				"origin": "bool updateApp(string aName, IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName",
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "updateApp",
				"header": "bool updateApp(string aName, IApp aApp)",
				"isStatic": false
			},
			"IAppContainer appContainer()": {
				"origin": "IAppContainer appContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IAppContainer",
				"name": "appContainer",
				"header": "IAppContainer appContainer()",
				"isStatic": false
			},
			"string[] appNames()": {
				"origin": "string[] appNames()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string[]",
				"name": "appNames",
				"header": "string[] appNames()",
				"isStatic": false
			},
			"IControllerContainer controllerContainer()": {
				"origin": "IControllerContainer controllerContainer()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IControllerContainer",
				"name": "controllerContainer",
				"header": "IControllerContainer controllerContainer()",
				"isStatic": false
			},
			"IEntityBase entityBase()": {
				"origin": "IEntityBase entityBase()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "IEntityBase",
				"name": "entityBase",
				"header": "IEntityBase entityBase()",
				"isStatic": false
			},
			"bool removeApp(IApp aApp)": {
				"origin": "bool removeApp(IApp aApp)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"IApp aApp"
				],
				"datatype": "bool",
				"name": "removeApp",
				"header": "bool removeApp(IApp aApp)",
				"isStatic": false
			},
			"IApp app(string aName)": {
				"origin": "IApp app(string aName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string aName"
				],
				"datatype": "IApp",
				"name": "app",
				"header": "IApp app(string aName)",
				"isStatic": false
			}
		},
		"implements": [
			"IViewManager",
			"IControllerManager"
		],
		"library": "uim-apps"
	},
	"INamed": {
		"origin": "interface INamed {",
		"package": "uim.oop.interfaces",
		"visibility": "public",
		"comments": [],
		"namespace": "uim.oop.interfaces.named",
		"name": "INamed",
		"header": "INamed",
		"methods": {
			"void name(string newName)": {
				"origin": "void name(string newName)",
				"isFinal": false,
				"isProperty": false,
				"parameters": [
					"string newName"
				],
				"datatype": "void",
				"name": "name",
				"header": "void name(string newName)",
				"isStatic": false
			},
			"string name()": {
				"origin": "string name()",
				"isFinal": false,
				"isProperty": false,
				"parameters": [],
				"datatype": "string",
				"name": "name",
				"header": "string name()",
				"isStatic": false
			}
		},
		"implements": [],
		"library": "uim-oop"
	}
}
